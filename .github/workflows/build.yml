name: Build

on:
    push:
        branches:
            - 'main'
            - 'feat/azure-signing'
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'
            - 'v[0-9]+.[0-9]+.[0-9]+-**'
    pull_request:
        branches:
            - 'feat/azure-signing'
        paths-ignore:
            - '**.md'
            - '**.spec.js'
            - '.idea'
            - '.vscode'
            - '.dockerignore'
            - 'Dockerfile'
            - '.gitignore'
            - '.github/**'
            - '!.github/workflows/build.yml'

jobs:
    build:
        runs-on: ${{ matrix.os }}

        permissions:
            contents: write

        strategy:
            fail-fast: false
            matrix:
                os:
                    - macos-latest
                    - windows-latest
                    # - ubuntu-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - uses: oven-sh/setup-bun@v1
              with:
                  bun-version: latest

            - name: Set Mac API Key
              if: startsWith(matrix.os, 'macos')
              run: |
                  mkdir -p ~/private_keys/
                  echo '${{ secrets.APPLE_API_KEY_CONTENT }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

            - name: Set environment variables
              shell: bash
              run: |
                  APP_VERSION=$(node -p "require('./apps/studio/package.json').version")
                  echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
                  echo "VITE_SUPABASE_API_URL=${{ secrets.SUPABASE_API_URL }}" >> $GITHUB_ENV
                  echo "VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
                  echo "VITE_MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN }}" >> $GITHUB_ENV
                  echo "VITE_ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
                  echo "VITE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
                  echo "VITE_LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}" >> $GITHUB_ENV
                  echo "VITE_LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}" >> $GITHUB_ENV
            
            - name: Install dependencies
              shell: pwsh
              if: runner.os == 'Windows'
              run: |
                Write-Output "Installing root dependencies..."
                bun install --frozen-lockfile
                Write-Output "Installing studio dependencies..."
                Set-Location apps/studio
                Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue
                npm install --no-workspaces
                Write-Output "Verifying node_modules structure..."
                if (Test-Path "node_modules/app-builder-bin") {
                    Write-Output "app-builder-bin found in apps/studio/node_modules"
                    Get-ChildItem "node_modules/app-builder-bin" -Force -Recurse
                    Write-Output "Checking app-builder.exe..."
                    if (Test-Path "node_modules/app-builder-bin/win/x64/app-builder.exe") {
                        Write-Output "app-builder.exe found in correct location"
                    } else {
                        Write-Output "app-builder.exe not found in expected location"
                        exit 1
                    }
                } else {
                    Write-Output "app-builder-bin not found in apps/studio/node_modules"
                    Write-Output "Contents of node_modules:"
                    Get-ChildItem "node_modules" -Force -ErrorAction SilentlyContinue
                    exit 1
                }
                Set-Location ../..

            - name: Install dependencies
              shell: bash
              if: runner.os != 'Windows'
              run: |
                echo "Installing root dependencies..."
                bun install --frozen-lockfile
                echo "Installing studio dependencies..."
                cd apps/studio
                rm -rf node_modules
                npm install --no-workspaces
                echo "Verifying node_modules structure..."
                if [ -d "node_modules/app-builder-bin" ]; then
                  echo "app-builder-bin found in apps/studio/node_modules"
                  ls -la node_modules/app-builder-bin
                  if [ "$(uname)" = "Darwin" ]; then
                    if [ -f "node_modules/app-builder-bin/mac/app-builder" ]; then
                      echo "app-builder found in correct location for macOS"
                      chmod +x node_modules/app-builder-bin/mac/app-builder
                    else
                      echo "app-builder not found in expected location for macOS"
                      ls -la node_modules/app-builder-bin/mac || true
                      exit 1
                    fi
                  fi
                else
                  echo "app-builder-bin not found in apps/studio/node_modules"
                  echo "Contents of node_modules:"
                  ls -la node_modules || true
                  exit 1
                fi
                cd ../..

            - name: Verify Windows dependencies
              if: startsWith(matrix.os, 'windows')
              shell: powershell
              run: |
                Write-Host "Checking for app-builder-bin in apps/studio/node_modules..."
                if (!(Test-Path "apps/studio/node_modules/app-builder-bin")) {
                    Write-Host "app-builder-bin not found in apps/studio/node_modules"
                    Write-Host "Contents of apps/studio/node_modules:"
                    Get-ChildItem "apps/studio/node_modules" -Directory
                    Write-Host "Contents of node_modules:"
                    Get-ChildItem "node_modules" -Directory
                    exit 1
                }
                Write-Host "app-builder-bin found in correct location"

            - name: Build foundation
              run: bun build:foundation

            - name: Build full app
              run: bun run build

            - name: Package Windows App
              if: startsWith(matrix.os, 'windows')
              run: |
                cd apps/studio
                echo "Current working directory: $(pwd)"
                echo "Listing node_modules:"
                ls -la node_modules/app-builder-bin || true
                npx electron-builder --win --dir --projectDir .
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Sign Windows App
              if: startsWith(matrix.os, 'windows')
              uses: azure/trusted-signing-action@v0.3.16
              with:
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
                  endpoint: ${{ secrets.AZURE_ENDPOINT }}
                  code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
                  certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
                  file-digest: SHA256
                  files-folder: apps/studio/release/${{ env.APP_VERSION }}/win-unpacked
                  files-folder-filter: exe
                  timestamp-rfc3161: http://timestamp.digicert.com
            
            - name: Verify Package Signatures
              if: startsWith(matrix.os, 'windows')
              shell: powershell
              run: |
                $files = Get-ChildItem -Path "apps/studio/release/${{ env.APP_VERSION }}/win-unpacked/*.exe" -Recurse
                foreach ($file in $files) {
                    Write-Host "Verifying signature for: $($file.FullName)"
                    $sig = Get-AuthenticodeSignature $file.FullName
                    if ($sig.Status -ne "Valid") {
                        Write-Host "Invalid signature found for $($file.FullName)"
                        Write-Host "Status: $($sig.Status)"
                        Write-Host "Signer: $($sig.SignerCertificate.Subject)"
                        exit 1
                    }
                    Write-Host "Valid signature found:"
                    Write-Host "Status: $($sig.Status)"
                    Write-Host "Signer: $($sig.SignerCertificate.Subject)"
                    Write-Host "Timestamp: $($sig.TimeStamper)"
                }
                    
            - name: Upload Windows Artifacts
              if: startsWith(matrix.os, 'windows')
              uses: actions/upload-artifact@v4
              with:
                name: signed-windows-binaries
                path: apps/studio/release/${{ env.APP_VERSION }}/win-unpacked/*.exe
            
            - name: Publish Windows Artifacts
              if: startsWith(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v')
              run: |
                cd apps/studio
                npx electron-builder --win --publish always --projectDir .
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  EP_GH_IGNORE_TIME: true

            - name: Build, Sign, Publish and Release Mac App
              if: startsWith(matrix.os, 'macos')
              uses: samuelmeuli/action-electron-builder@v1
              with:
                  skip_build: true
                  package_root: apps/studio
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  release: ${{ startsWith(github.ref, 'refs/tags/v') }}
                  mac_certs: ${{ secrets.MAC_CERTS }}
                  mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  APPLE_API_KEY: ${{ startsWith(matrix.os, 'macos') && format('~/private_keys/AuthKey_{0}.p8', secrets.APPLE_API_KEY_ID) || '' }}
                  APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
                  APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
