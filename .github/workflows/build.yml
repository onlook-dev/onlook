name: Build

on:
    push:
        branches:
            - 'main'
            - 'feat/azure-1'
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'
            - 'v[0-9]+.[0-9]+.[0-9]+-**'
        paths-ignore:
            - '**.md'
            - '**.spec.js'
            - '.idea'
            - '.vscode'
            - '.dockerignore'
            - 'Dockerfile'
            - '.gitignore'
    pull_request:
        types: [opened, synchronize, reopened, ready_for_review, converted_to_ready_for_review]
        branches:
            - 'main'
        paths-ignore:
            - '**.md'
            - '**.spec.js'
            - '.idea'
            - '.vscode'
            - '.dockerignore'
            - 'Dockerfile'
            - '.gitignore'

jobs:
    build:
        runs-on: ${{ matrix.os }}

        permissions:
            contents: write

        strategy:
            matrix:
                os:
                    - macos-latest
                    - windows-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Install system dependencies
              shell: bash
              run: |
                  if [ "$RUNNER_OS" == "macOS" ]; then
                      brew install python-setuptools
                  fi

            - uses: oven-sh/setup-bun@v1
              with:
                  bun-version: latest

            - name: Install dependencies
              run: bun install --frozen-lockfile

            - name: Set Mac API Key
              if: startsWith(matrix.os, 'macos')
              run: |
                  mkdir -p ~/private_keys/
                  echo '${{ secrets.APPLE_API_KEY_CONTENT }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

            - name: Build foundation
              run: bun build:foundation

            - name: Set environment variables
              shell: bash
              run: |
                  # Set version from package.json
                  APP_VERSION=$(node -p "require('./apps/studio/package.json').version")
                  echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

                  echo "VITE_SUPABASE_API_URL=${{ secrets.SUPABASE_API_URL }}" >> $GITHUB_ENV
                  echo "VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
                  echo "VITE_MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN }}" >> $GITHUB_ENV
                  echo "VITE_ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV
                  echo "VITE_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
                  echo "VITE_LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}" >> $GITHUB_ENV
                  echo "VITE_LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}" >> $GITHUB_ENV

            # Build the app first
            - name: Build Vite App
              working-directory: apps/studio
              run: bun run build

            # Package the app
            - name: Build Electron App
              working-directory: apps/studio
              if: startsWith(matrix.os, 'windows')
              run: npx electron-builder --win --dir
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Build and sign Mac app
            - name: Build and Sign Mac App
              if: startsWith(matrix.os, 'macos')
              working-directory: apps/studio
              run: |
                  # Import certificates
                  echo '${{ secrets.MAC_CERTS }}' | base64 --decode > certificate.p12
                  security create-keychain -p actions build.keychain
                  security default-keychain -s build.keychain
                  security unlock-keychain -p actions build.keychain
                  security import certificate.p12 -k build.keychain -P '${{ secrets.MAC_CERTS_PASSWORD }}' -T /usr/bin/codesign
                  security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain

                  # Create draft release if tag exists
                  if [[ $GITHUB_REF == refs/tags/v* ]]; then
                    gh release create "${GITHUB_REF#refs/tags/}" --draft --title "${GITHUB_REF#refs/tags/}" --notes "Release ${GITHUB_REF#refs/tags/}"
                  fi

                  # Build and publish
                  npx electron-builder --mac --publish onTag
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  APPLE_API_KEY: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
                  APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
                  APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
                  CSC_KEYCHAIN: build.keychain
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Sign with Azure Trusted Signing
            - name: Azure Trusted Signing
              if: startsWith(matrix.os, 'windows')
              uses: azure/trusted-signing-action@v0.3.16
              with:
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
                  endpoint: ${{ secrets.AZURE_ENDPOINT }}
                  code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
                  certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
                  file-digest: SHA256
                  files-folder: apps/studio/release/${{ env.APP_VERSION }}/win-unpacked
                  files-folder-filter: exe
                  timestamp-rfc3161: http://timestamp.digicert.com

            # Verify package signatures
            - name: Verify Package Signatures
              if: startsWith(matrix.os, 'windows')
              shell: powershell
              run: |
                $files = Get-ChildItem -Path "apps/studio/release/${{ env.APP_VERSION }}/win-unpacked/*.exe" -Recurse
                foreach ($file in $files) {
                    Write-Host "Verifying signature for: $($file.FullName)"
                    $sig = Get-AuthenticodeSignature $file.FullName
                    if ($sig.Status -ne "Valid") {
                        Write-Host "Invalid signature found for $($file.FullName)"
                        Write-Host "Status: $($sig.Status)"
                        Write-Host "Signer: $($sig.SignerCertificate.Subject)"
                        exit 1
                    }
                    Write-Host "Valid signature found:"
                    Write-Host "Status: $($sig.Status)"
                    Write-Host "Signer: $($sig.SignerCertificate.Subject)"
                    Write-Host "Timestamp: $($sig.TimeStamper)"
                }

            # Upload Windows Artifacts
            - name: Upload Windows Artifacts
              if: startsWith(matrix.os, 'windows')
              uses: actions/upload-artifact@v4
              with:
                name: signed-windows-binaries
                path: apps/studio/release/${{ env.APP_VERSION }}/win-unpacked/*.exe

            # Upload Mac artifacts
            - name: Upload Mac Artifacts
              if: startsWith(matrix.os, 'macos')
              uses: actions/upload-artifact@v4
              with:
                name: signed-mac-binaries
                path: |
                  apps/studio/release/${{ env.APP_VERSION }}/*.dmg
                  apps/studio/release/${{ env.APP_VERSION }}/*.zip

            # Publish Windows artifacts
            - name: Publish Windows Artifacts
              if: startsWith(matrix.os, 'windows') && startsWith(github.ref, 'refs/tags/v')
              working-directory: apps/studio
              run: npx electron-builder --win --publish always
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  EP_GH_IGNORE_TIME: true

            # Publish Mac artifacts
            - name: Publish Mac Artifacts
              if: startsWith(matrix.os, 'macos') && startsWith(github.ref, 'refs/tags/v')
              working-directory: apps/studio
              run: npx electron-builder --mac --publish always
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  EP_GH_IGNORE_TIME: true
                  APPLE_API_KEY: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
                  APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
                  APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
                  CSC_KEYCHAIN: build.keychain
