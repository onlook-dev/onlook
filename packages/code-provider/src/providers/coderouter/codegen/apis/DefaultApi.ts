/* tslint:disable */
/* eslint-disable */
/**
 * Coderouter
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
    CoderouterApiAuthSignPost200Response,
    CoderouterApiAuthSignPost401Response,
    CoderouterApiAuthSignPostRequest,
    CoderouterApiSandboxCreatePost200Response,
    CoderouterApiSandboxCreatePostRequest,
    CoderouterApiSandboxFileCopyPostRequest,
    CoderouterApiSandboxFileDeletePostRequest,
    CoderouterApiSandboxFileDownloadPostRequest,
    CoderouterApiSandboxFileListPost200Response,
    CoderouterApiSandboxFileListPostRequest,
    CoderouterApiSandboxFileReadPost200Response,
    CoderouterApiSandboxFileReadPostRequest,
    CoderouterApiSandboxFileRenamePostRequest,
    CoderouterApiSandboxFileStatPost200Response,
    CoderouterApiSandboxFileStatPostRequest,
    CoderouterApiSandboxFileWatchPost200Response,
    CoderouterApiSandboxFileWatchPostRequest,
    CoderouterApiSandboxFileWritePostRequest,
    CoderouterApiSandboxUrlPost200Response,
} from '../models/index';
import {
    CoderouterApiAuthSignPost200ResponseFromJSON,
    CoderouterApiAuthSignPost200ResponseToJSON,
    CoderouterApiAuthSignPost401ResponseFromJSON,
    CoderouterApiAuthSignPost401ResponseToJSON,
    CoderouterApiAuthSignPostRequestFromJSON,
    CoderouterApiAuthSignPostRequestToJSON,
    CoderouterApiSandboxCreatePost200ResponseFromJSON,
    CoderouterApiSandboxCreatePost200ResponseToJSON,
    CoderouterApiSandboxCreatePostRequestFromJSON,
    CoderouterApiSandboxCreatePostRequestToJSON,
    CoderouterApiSandboxFileCopyPostRequestFromJSON,
    CoderouterApiSandboxFileCopyPostRequestToJSON,
    CoderouterApiSandboxFileDeletePostRequestFromJSON,
    CoderouterApiSandboxFileDeletePostRequestToJSON,
    CoderouterApiSandboxFileDownloadPostRequestFromJSON,
    CoderouterApiSandboxFileDownloadPostRequestToJSON,
    CoderouterApiSandboxFileListPost200ResponseFromJSON,
    CoderouterApiSandboxFileListPost200ResponseToJSON,
    CoderouterApiSandboxFileListPostRequestFromJSON,
    CoderouterApiSandboxFileListPostRequestToJSON,
    CoderouterApiSandboxFileReadPost200ResponseFromJSON,
    CoderouterApiSandboxFileReadPost200ResponseToJSON,
    CoderouterApiSandboxFileReadPostRequestFromJSON,
    CoderouterApiSandboxFileReadPostRequestToJSON,
    CoderouterApiSandboxFileRenamePostRequestFromJSON,
    CoderouterApiSandboxFileRenamePostRequestToJSON,
    CoderouterApiSandboxFileStatPost200ResponseFromJSON,
    CoderouterApiSandboxFileStatPost200ResponseToJSON,
    CoderouterApiSandboxFileStatPostRequestFromJSON,
    CoderouterApiSandboxFileStatPostRequestToJSON,
    CoderouterApiSandboxFileWatchPost200ResponseFromJSON,
    CoderouterApiSandboxFileWatchPost200ResponseToJSON,
    CoderouterApiSandboxFileWatchPostRequestFromJSON,
    CoderouterApiSandboxFileWatchPostRequestToJSON,
    CoderouterApiSandboxFileWritePostRequestFromJSON,
    CoderouterApiSandboxFileWritePostRequestToJSON,
    CoderouterApiSandboxUrlPost200ResponseFromJSON,
    CoderouterApiSandboxUrlPost200ResponseToJSON,
} from '../models/index';

export interface CoderouterApiAuthSignPostOperationRequest {
    coderouterApiAuthSignPostRequest?: CoderouterApiAuthSignPostRequest;
}

export interface CoderouterApiSandboxCreatePostOperationRequest {
    coderouterApiSandboxCreatePostRequest?: CoderouterApiSandboxCreatePostRequest;
}

export interface CoderouterApiSandboxFileCopyPostOperationRequest {
    coderouterApiSandboxFileCopyPostRequest?: CoderouterApiSandboxFileCopyPostRequest;
}

export interface CoderouterApiSandboxFileDeletePostOperationRequest {
    coderouterApiSandboxFileDeletePostRequest?: CoderouterApiSandboxFileDeletePostRequest;
}

export interface CoderouterApiSandboxFileDownloadPostOperationRequest {
    coderouterApiSandboxFileDownloadPostRequest?: CoderouterApiSandboxFileDownloadPostRequest;
}

export interface CoderouterApiSandboxFileListPostOperationRequest {
    coderouterApiSandboxFileListPostRequest?: CoderouterApiSandboxFileListPostRequest;
}

export interface CoderouterApiSandboxFileReadPostOperationRequest {
    coderouterApiSandboxFileReadPostRequest?: CoderouterApiSandboxFileReadPostRequest;
}

export interface CoderouterApiSandboxFileRenamePostOperationRequest {
    coderouterApiSandboxFileRenamePostRequest?: CoderouterApiSandboxFileRenamePostRequest;
}

export interface CoderouterApiSandboxFileStatPostOperationRequest {
    coderouterApiSandboxFileStatPostRequest?: CoderouterApiSandboxFileStatPostRequest;
}

export interface CoderouterApiSandboxFileWatchPostOperationRequest {
    coderouterApiSandboxFileWatchPostRequest?: CoderouterApiSandboxFileWatchPostRequest;
}

export interface CoderouterApiSandboxFileWritePostOperationRequest {
    coderouterApiSandboxFileWritePostRequest?: CoderouterApiSandboxFileWritePostRequest;
}

export interface CoderouterApiSandboxPausePostRequest {
    body?: object;
}

export interface CoderouterApiSandboxResumePostRequest {
    body?: object;
}

export interface CoderouterApiSandboxStopPostRequest {
    body?: object;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
    /**
     */
    async coderouterApiAuthSignPostRaw(
        requestParameters: CoderouterApiAuthSignPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiAuthSignPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('apikey', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/auth/sign`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiAuthSignPostRequestToJSON(
                    requestParameters['coderouterApiAuthSignPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiAuthSignPost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiAuthSignPost(
        requestParameters: CoderouterApiAuthSignPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiAuthSignPost200Response> {
        const response = await this.coderouterApiAuthSignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxCreatePostRaw(
        requestParameters: CoderouterApiSandboxCreatePostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxCreatePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/create`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxCreatePostRequestToJSON(
                    requestParameters['coderouterApiSandboxCreatePostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxCreatePost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxCreatePost(
        requestParameters: CoderouterApiSandboxCreatePostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxCreatePost200Response> {
        const response = await this.coderouterApiSandboxCreatePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileCopyPostRaw(
        requestParameters: CoderouterApiSandboxFileCopyPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/copy`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileCopyPostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileCopyPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async coderouterApiSandboxFileCopyPost(
        requestParameters: CoderouterApiSandboxFileCopyPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.coderouterApiSandboxFileCopyPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileDeletePostRaw(
        requestParameters: CoderouterApiSandboxFileDeletePostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/delete`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileDeletePostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileDeletePostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async coderouterApiSandboxFileDeletePost(
        requestParameters: CoderouterApiSandboxFileDeletePostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.coderouterApiSandboxFileDeletePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileDownloadPostRaw(
        requestParameters: CoderouterApiSandboxFileDownloadPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/download`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileDownloadPostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileDownloadPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async coderouterApiSandboxFileDownloadPost(
        requestParameters: CoderouterApiSandboxFileDownloadPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.coderouterApiSandboxFileDownloadPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileListPostRaw(
        requestParameters: CoderouterApiSandboxFileListPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxFileListPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/list`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileListPostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileListPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxFileListPost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxFileListPost(
        requestParameters: CoderouterApiSandboxFileListPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxFileListPost200Response> {
        const response = await this.coderouterApiSandboxFileListPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileReadPostRaw(
        requestParameters: CoderouterApiSandboxFileReadPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxFileReadPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/read`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileReadPostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileReadPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxFileReadPost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxFileReadPost(
        requestParameters: CoderouterApiSandboxFileReadPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxFileReadPost200Response> {
        const response = await this.coderouterApiSandboxFileReadPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileRenamePostRaw(
        requestParameters: CoderouterApiSandboxFileRenamePostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/rename`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileRenamePostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileRenamePostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async coderouterApiSandboxFileRenamePost(
        requestParameters: CoderouterApiSandboxFileRenamePostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.coderouterApiSandboxFileRenamePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileStatPostRaw(
        requestParameters: CoderouterApiSandboxFileStatPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxFileStatPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/stat`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileStatPostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileStatPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxFileStatPost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxFileStatPost(
        requestParameters: CoderouterApiSandboxFileStatPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxFileStatPost200Response> {
        const response = await this.coderouterApiSandboxFileStatPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileWatchPostRaw(
        requestParameters: CoderouterApiSandboxFileWatchPostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxFileWatchPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/watch`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileWatchPostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileWatchPostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxFileWatchPost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxFileWatchPost(
        requestParameters: CoderouterApiSandboxFileWatchPostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxFileWatchPost200Response> {
        const response = await this.coderouterApiSandboxFileWatchPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxFileWritePostRaw(
        requestParameters: CoderouterApiSandboxFileWritePostOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/file/write`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CoderouterApiSandboxFileWritePostRequestToJSON(
                    requestParameters['coderouterApiSandboxFileWritePostRequest'],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async coderouterApiSandboxFileWritePost(
        requestParameters: CoderouterApiSandboxFileWritePostOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.coderouterApiSandboxFileWritePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxPausePostRaw(
        requestParameters: CoderouterApiSandboxPausePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxCreatePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/pause`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'] as any,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxCreatePost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxPausePost(
        requestParameters: CoderouterApiSandboxPausePostRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxCreatePost200Response> {
        const response = await this.coderouterApiSandboxPausePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxResumePostRaw(
        requestParameters: CoderouterApiSandboxResumePostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxCreatePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/resume`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'] as any,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxCreatePost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxResumePost(
        requestParameters: CoderouterApiSandboxResumePostRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxCreatePost200Response> {
        const response = await this.coderouterApiSandboxResumePostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxStopPostRaw(
        requestParameters: CoderouterApiSandboxStopPostRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxCreatePost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/stop`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'] as any,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxCreatePost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxStopPost(
        requestParameters: CoderouterApiSandboxStopPostRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxCreatePost200Response> {
        const response = await this.coderouterApiSandboxStopPostRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async coderouterApiSandboxUrlPostRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CoderouterApiSandboxUrlPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('jwt', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coderouter/api/sandbox/url`;

        const response = await this.request(
            {
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CoderouterApiSandboxUrlPost200ResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async coderouterApiSandboxUrlPost(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CoderouterApiSandboxUrlPost200Response> {
        const response = await this.coderouterApiSandboxUrlPostRaw(initOverrides);
        return await response.value();
    }
}
