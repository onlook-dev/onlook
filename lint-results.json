[?2026h[1m@onlook/studio[0m lint $ [2meslint --fix .[0m
[36mâ”‚[0m [{"filePath":"/home/ubuntu/repos/onlook/apps/studio/builder-config/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/timer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/twTranslator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/hotkeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/ide.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/e2e/example.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/electron-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/assets/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ImageContentData } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { promises as fs, readFileSync } from 'fs';\nimport mime from 'mime-lite';\nimport path from 'path';\nimport writeFileAtomic from 'write-file-atomic';\n\nasync function scanImagesDirectory(projectRoot: string): Promise<ImageContentData[]> {\n    const imagesPath = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const images: ImageContentData[] = [];\n\n    try {\n        const entries = await fs.readdir(imagesPath, { withFileTypes: true });\n\n        for (const entry of entries) {\n            if (entry.isFile()) {\n                const extension = path.extname(entry.name).toLowerCase();\n                // Common image extensions\n                if (\n                    ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.ico'].includes(extension)\n                ) {\n                    const imagePath = path.join(imagesPath, entry.name);\n                    const image = readFileSync(imagePath, { encoding: 'base64' });\n                    const mimeType = mime.getType(imagePath);\n                    if (!mimeType) {\n                        console.error(`Failed to get mime type for ${imagePath}`);\n                        continue;\n                    }\n                    images.push({\n                        fileName: entry.name,\n                        content: `data:${mimeType};base64,${image}`,\n                        mimeType,\n                    });\n                }\n            }\n        }\n\n        return images;\n    } catch (error) {\n        console.error('Error scanning images directory:', error);\n        return [];\n    }\n}\n\nexport async function scanNextJsImages(projectRoot: string): Promise<ImageContentData[]> {\n    try {\n        return await scanImagesDirectory(projectRoot);\n    } catch (error) {\n        console.error('Error scanning images:', error);\n        throw error;\n    }\n}\n\nexport async function saveImageToProject(\n    projectFolder: string,\n    content: string,\n    fileName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectFolder, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, fileName);\n\n        try {\n            await fs.access(imagePath);\n            throw new Error(`File ${fileName} already exists`);\n        } catch (err: any) {\n            if (err.code === 'ENOENT') {\n                const buffer = Buffer.from(content, 'base64');\n                await fs.writeFile(imagePath, buffer);\n                return imagePath;\n            }\n            throw err;\n        }\n    } catch (error) {\n        console.error('Error uploading image:', error);\n        throw error;\n    }\n}\n\nexport async function deleteImageFromProject(\n    projectRoot: string,\n    imageName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, imageName);\n        await fs.unlink(imagePath);\n        return imagePath;\n    } catch (error) {\n        console.error('Error deleting image:', error);\n        throw error;\n    }\n}\n\nexport async function renameImageInProject(\n    projectRoot: string,\n    imageName: string,\n    newName: string,\n): Promise<string> {\n    if (!imageName || !newName) {\n        throw new Error('Image name and new name are required');\n    }\n\n    const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const oldImagePath = path.join(imageFolder, imageName);\n    const newImagePath = path.join(imageFolder, newName);\n\n    try {\n        await validateRename(oldImagePath, newImagePath);\n        await fs.rename(oldImagePath, newImagePath);\n\n        await updateImageReferences(projectRoot, imageName, newName);\n        return newImagePath;\n    } catch (error) {\n        console.error('Error renaming image:', error);\n        throw error;\n    }\n}\n\nconst MAX_FILENAME_LENGTH = 255;\nconst VALID_FILENAME_REGEX = /^[a-zA-Z0-9-_. ]+$/;\n\nasync function validateRename(oldImagePath: string, newImagePath: string): Promise<void> {\n    try {\n        await fs.access(oldImagePath);\n    } catch (err) {\n        throw new Error(`Source image does not exist`);\n    }\n\n    const newFileName = path.basename(newImagePath);\n\n    if (newFileName.length > MAX_FILENAME_LENGTH) {\n        throw new Error(`File name is too long (max ${MAX_FILENAME_LENGTH} characters)`);\n    }\n\n    if (!VALID_FILENAME_REGEX.test(newFileName)) {\n        throw new Error(\n            'File name can only contain letters, numbers, spaces, hyphens, underscores, and periods',\n        );\n    }\n\n    try {\n        await fs.access(newImagePath);\n        throw new Error(`A file with this name already exists`);\n    } catch (err: any) {\n        if (err.code !== 'ENOENT') {\n            throw err;\n        }\n    }\n}\n\nasync function updateImageReferences(\n    projectRoot: string,\n    oldName: string,\n    newName: string,\n): Promise<void> {\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const oldImageUrl = `/${prefix}/${oldName}`;\n    const newImageUrl = `/${prefix}/${newName}`;\n    const pattern = new RegExp(oldImageUrl.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g');\n\n    const sourceFiles = await findSourceFiles(projectRoot);\n    await Promise.all(\n        sourceFiles.map(async (file) => {\n            const content = await fs.readFile(file, 'utf8');\n            if (!content.includes(oldImageUrl)) {\n                return;\n            }\n            const updatedContent = content.replace(pattern, newImageUrl);\n            await writeFileAtomic(file, updatedContent, { encoding: 'utf8' });\n        }),\n    );\n}\n\nasync function findSourceFiles(\n    dirPath: string,\n    maxDepth: number = 10,\n    currentDepth: number = 0,\n): Promise<string[]> {\n    if (currentDepth >= maxDepth) {\n        console.warn(`Max directory depth (${maxDepth}) reached at: ${dirPath}`);\n        return [];\n    }\n\n    const files: string[] = [];\n    const entries = await fs.readdir(dirPath, { withFileTypes: true });\n\n    for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n            files.push(...(await findSourceFiles(fullPath, maxDepth, currentDepth + 1)));\n        } else if (\n            entry.isFile() &&\n            (entry.name.endsWith('.tsx') ||\n                entry.name.endsWith('.jsx') ||\n                entry.name.endsWith('.ts'))\n        ) {\n            files.push(fullPath);\n        }\n    }\n\n    return files;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/parse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/llmProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/classes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/image.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":32,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'action' is defined but never used.","line":32,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport * as t from '@babel/types';\nimport { type CodeInsertImage, type CodeRemoveImage } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { join } from 'path';\nimport { writeFile } from '../files';\nimport { addClassToNode } from './style';\n\nexport function insertImageToNode(path: NodePath<t.JSXElement>, action: CodeInsertImage): void {\n    const imageName = writeImageToFile(action);\n    if (!imageName) {\n        console.error('Failed to write image to file');\n        return;\n    }\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const backgroundClass = `bg-[url(/${prefix}/${imageName})]`;\n    addClassToNode(path.node, backgroundClass);\n}\n\nfunction writeImageToFile(action: CodeInsertImage): string | null {\n    try {\n        const imageFolder = `${action.folderPath}/${DefaultSettings.IMAGE_FOLDER}`;\n        const imagePath = join(imageFolder, action.image.fileName);\n        writeFile(imagePath, action.image.content, 'base64');\n        return action.image.fileName;\n    } catch (error) {\n        console.error('Failed to write image to file', error);\n        return null;\n    }\n}\n\nexport function removeImageFromNode(path: NodePath<t.JSXElement>, action: CodeRemoveImage): void {}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/move.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/remove.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'element' is defined but never used.","line":6,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport type * as t from '@babel/types';\nimport type { CodeRemove } from '@onlook/models/actions';\nimport { addKeyToElement, jsxFilter } from './helpers';\n\nexport function removeElementFromNode(path: NodePath<t.JSXElement>, element: CodeRemove): void {\n    const parentPath = path.parentPath;\n\n    if (!parentPath) {\n        console.error('No parent path found');\n        return;\n    }\n\n    const siblings = (parentPath.node as t.JSXElement).children?.filter(jsxFilter) || [];\n    path.remove();\n\n    siblings.forEach((sibling) => {\n        addKeyToElement(sibling);\n    });\n\n    path.stop();\n}\n\nexport function removeElementAtIndex(\n    index: number,\n    jsxElements: Array<t.JSXElement | t.JSXFragment>,\n    children: t.Node[],\n) {\n    if (index >= 0 && index < jsxElements.length) {\n        const elementToRemove = jsxElements[index];\n        const indexInChildren = children.indexOf(elementToRemove);\n\n        if (indexInChildren !== -1) {\n            children.splice(indexInChildren, 1);\n        } else {\n            console.error('Element to be removed not found in children');\n        }\n    } else {\n        console.error('Invalid element index for removal');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/transform.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/files.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/props.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/templateNode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/install.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/asset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":10,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":10,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { signIn, signOut } from '../auth';\n\nexport function listenForAuthMessages() {\n    ipcMain.handle(MainChannels.SIGN_IN, (e: Electron.IpcMainInvokeEvent, args) => {\n        signIn(args.provider);\n    });\n\n    ipcMain.handle(MainChannels.SIGN_OUT, (e: Electron.IpcMainInvokeEvent, args) => {\n        signOut();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ChatConversation, ProjectSuggestions, StreamRequestType } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { ipcMain } from 'electron';\nimport Chat from '../chat';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForChatMessages() {\n    ipcMain.handle(\n        MainChannels.SEND_CHAT_MESSAGES_STREAM,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { messages, requestType } = args as {\n                messages: CoreMessage[];\n                requestType: StreamRequestType;\n            };\n            return Chat.stream(messages, requestType);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_STOP_STREAM_REQUEST,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            return Chat.abortStream();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.GET_CONVERSATIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            return PersistentStorage.CONVERSATIONS.getCollection(projectId);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { conversation } = args as { conversation: ChatConversation };\n        return PersistentStorage.CONVERSATIONS.writeItem(conversation);\n    });\n\n    ipcMain.handle(MainChannels.DELETE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return PersistentStorage.CONVERSATIONS.deleteItem(id);\n    });\n\n    ipcMain.handle(MainChannels.GENERATE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { messages } = args as {\n            messages: CoreMessage[];\n        };\n        return Chat.generateSuggestions(messages);\n    });\n\n    ipcMain.handle(\n        MainChannels.GET_SUGGESTIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            const suggestions = PersistentStorage.SUGGESTIONS.getCollection(\n                projectId,\n            ) as ProjectSuggestions[];\n            return suggestions.flatMap((suggestion) => suggestion.suggestions);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { suggestions } = args as { suggestions: ProjectSuggestions };\n        return PersistentStorage.SUGGESTIONS.writeItem(suggestions);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/create.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":48,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateStage, SetupStage, type CreateCallback, type SetupCallback } from '@onlook/models';\nimport type { ImageMessageContext } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { mainWindow } from '..';\nimport projectCreator from '../create';\nimport { createProject } from '../create/install';\nimport { installProjectDependencies } from '../create/setup';\n\nexport function listenForCreateMessages() {\n    ipcMain.handle(MainChannels.CREATE_NEW_PROJECT, (e: Electron.IpcMainInvokeEvent, args) => {\n        const progressCallback: CreateCallback = (stage: CreateStage, message: string) => {\n            mainWindow?.webContents.send(MainChannels.CREATE_NEW_PROJECT_CALLBACK, {\n                stage,\n                message,\n            });\n        };\n\n        const { name, path } = args as { name: string; path: string };\n        return createProject(name, path, progressCallback);\n    });\n\n    ipcMain.handle(\n        MainChannels.INSTALL_PROJECT_DEPENDENCIES,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const progressCallback: SetupCallback = (stage: SetupStage, message: string) => {\n                mainWindow?.webContents.send(MainChannels.SETUP_PROJECT_CALLBACK, {\n                    stage,\n                    message,\n                });\n            };\n            const { folderPath, installCommand } = args;\n            return installProjectDependencies(folderPath, installCommand, progressCallback);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { prompt, images } = args as {\n                prompt: string;\n                images: ImageMessageContext[];\n            };\n            return projectCreator.createProject(prompt, images);\n        },\n    );\n\n    ipcMain.handle(MainChannels.CREATE_NEW_BLANK_PROJECT, (e: Electron.IpcMainInvokeEvent) => {\n        return projectCreator.createBlankProject();\n    });\n\n    ipcMain.handle(\n        MainChannels.CANCEL_CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent) => {\n            return projectCreator.cancel();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/hosting.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCustomDomains' is defined but never used.","line":7,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":44,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { PublishRequest, PublishResponse, UnpublishRequest } from '@onlook/models/hosting';\nimport { ipcMain } from 'electron';\nimport hostingManager from '../hosting';\nimport {\n    createDomainVerification,\n    getCustomDomains,\n    getOwnedDomains,\n    verifyDomain,\n} from '../hosting/domains';\n\nexport function listenForHostingMessages() {\n    ipcMain.handle(\n        MainChannels.PUBLISH_TO_DOMAIN,\n        async (_e: Electron.IpcMainInvokeEvent, args: PublishRequest): Promise<PublishResponse> => {\n            return await hostingManager.publish(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.UNPUBLISH_DOMAIN,\n        async (\n            e: Electron.IpcMainInvokeEvent,\n            args: UnpublishRequest,\n        ): Promise<PublishResponse> => {\n            const { urls } = args;\n            return await hostingManager.unpublish(urls);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_DOMAIN_VERIFICATION,\n        async (_e: Electron.IpcMainInvokeEvent, args) => {\n            const { domain } = args;\n            return await createDomainVerification(domain);\n        },\n    );\n\n    ipcMain.handle(MainChannels.VERIFY_DOMAIN, async (_e: Electron.IpcMainInvokeEvent, args) => {\n        const { domain } = args;\n        return await verifyDomain(domain);\n    });\n\n    ipcMain.handle(MainChannels.GET_OWNED_DOMAINS, async (_e: Electron.IpcMainInvokeEvent) => {\n        return await getOwnedDomains();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":41,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":41,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":61,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { WindowCommand } from '@onlook/models/projects';\nimport { BrowserWindow, ipcMain, shell } from 'electron';\nimport { mainWindow } from '..';\nimport { imageStorage } from '../storage/images';\nimport { updater } from '../update';\nimport { listenForAnalyticsMessages } from './analytics';\nimport { listenForAssetMessages } from './asset';\nimport { listenForAuthMessages } from './auth';\nimport { listenForChatMessages } from './chat';\nimport { listenForCodeMessages } from './code';\nimport { listenForCreateMessages } from './create';\nimport { listenForHostingMessages } from './hosting';\nimport { listenForPageMessages } from './page';\nimport { listenForPaymentMessages } from './payments';\nimport { listenForRunMessages } from './run';\nimport { listenForStorageMessages } from './storage';\n\nexport function listenForIpcMessages() {\n    listenForGeneralMessages();\n    listenForAnalyticsMessages();\n    listenForCodeMessages();\n    listenForStorageMessages();\n    listenForAuthMessages();\n    listenForCreateMessages();\n    listenForChatMessages();\n    listenForRunMessages();\n    listenForHostingMessages();\n    listenForPaymentMessages();\n    listenForPageMessages();\n    listenForAssetMessages();\n}\n\nexport function removeIpcListeners() {\n    Object.values(MainChannels).forEach((channel) => {\n        ipcMain.removeHandler(channel);\n    });\n}\n\nfunction listenForGeneralMessages() {\n    ipcMain.handle(MainChannels.RELOAD_APP, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return mainWindow?.reload();\n    });\n\n    ipcMain.handle(\n        MainChannels.OPEN_IN_EXPLORER,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.showItemInFolder(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.OPEN_EXTERNAL_WINDOW,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.openExternal(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.QUIT_AND_INSTALL,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return updater.quitAndInstall();\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_IMAGE, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return imageStorage.readImage(args);\n    });\n\n    ipcMain.handle(\n        MainChannels.SAVE_IMAGE,\n        (e: Electron.IpcMainInvokeEvent, args: { img: string; name: string }) => {\n            return imageStorage.writeImage(args.name, args.img);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_WINDOW_COMMAND,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            const window = BrowserWindow.getFocusedWindow();\n\n            const command = args as WindowCommand;\n            switch (command) {\n                case WindowCommand.MINIMIZE:\n                    window?.minimize();\n                    break;\n                case WindowCommand.MAXIMIZE:\n                    window?.maximize();\n                    break;\n                case WindowCommand.UNMAXIMIZE:\n                    window?.unmaximize();\n                    break;\n                case WindowCommand.CLOSE:\n                    window?.close();\n                    break;\n            }\n        },\n    );\n\n    ipcMain.handle(MainChannels.DELETE_FOLDER, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return shell.trashItem(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/payments.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":8,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":8,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":15,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":15,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { checkoutWithStripe, checkSubscription, manageSubscription } from '../payment';\n\nexport function listenForPaymentMessages() {\n    ipcMain.handle(\n        MainChannels.CREATE_STRIPE_CHECKOUT,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkoutWithStripe();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.MANAGE_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await manageSubscription();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CHECK_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkSubscription();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/run.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":37,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":37,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DetectedPortResults } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { isPortAvailable, runBunCommand } from '../bun';\nimport run from '../run';\nimport terminal from '../run/terminal';\n\nexport async function listenForRunMessages() {\n    ipcMain.handle(MainChannels.RUN_START, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.start(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.RUN_STOP, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath } = args as { id: string; folderPath: string };\n        return run.stop(id, folderPath);\n    });\n\n    ipcMain.handle(MainChannels.RUN_RESTART, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.restart(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.GET_TEMPLATE_NODE, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return run.getTemplateNode(id);\n    });\n\n    ipcMain.handle(MainChannels.GET_RUN_STATE, (_, args) => {\n        return run.state;\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_INPUT, (_, args) => {\n        const { id, data } = args as { id: string; data: string };\n        return terminal.write(id, data);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_EXECUTE_COMMAND, (_, args) => {\n        const { id, command } = args as { id: string; command: string };\n        return terminal.executeCommand(id, command);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_RESIZE, (_, args) => {\n        const { id, cols, rows } = args as { id: string; cols: number; rows: number };\n        return terminal.resize(id, cols, rows);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_GET_HISTORY, (_, args) => {\n        const { id } = args as { id: string };\n        return terminal.getHistory(id);\n    });\n\n    ipcMain.handle(MainChannels.RUN_COMMAND, async (_, args) => {\n        const { cwd, command } = args as { cwd: string; command: string };\n        return await runBunCommand(command, { cwd });\n    });\n\n    ipcMain.handle(\n        MainChannels.IS_PORT_AVAILABLE,\n        async (e: Electron.IpcMainInvokeEvent, args): Promise<DetectedPortResults> => {\n            const { port } = args as { port: number };\n            return await isPortAvailable(port);\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":9,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":20,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":47,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { AppState, UserMetadata, UserSettings } from '@onlook/models/settings';\nimport { ipcMain } from 'electron';\nimport mixpanel from '../analytics';\nimport { getRefreshedAuthTokens } from '../auth';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForStorageMessages() {\n    ipcMain.handle(MainChannels.GET_USER_SETTINGS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_SETTINGS.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_SETTINGS,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserSettings>) => {\n            PersistentStorage.USER_SETTINGS.update(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_USER_METADATA, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_METADATA.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_METADATA,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserMetadata>) => {\n            PersistentStorage.USER_METADATA.update(args);\n            mixpanel.updateUserMetadata(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_APP_STATE, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.APP_STATE.read();\n    });\n\n    ipcMain.handle(MainChannels.IS_USER_SIGNED_IN, (e: Electron.IpcMainInvokeEvent) => {\n        return getRefreshedAuthTokens();\n    });\n\n    ipcMain.handle(\n        MainChannels.REPLACE_APP_STATE,\n        (e: Electron.IpcMainInvokeEvent, args: AppState) => {\n            PersistentStorage.APP_STATE.replace(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_PROJECTS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.PROJECTS.read();\n    });\n\n    ipcMain.handle(MainChannels.UPDATE_PROJECTS, (e: Electron.IpcMainInvokeEvent, args: any) => {\n        PersistentStorage.PROJECTS.update(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/domains.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'require' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAIN_DIST' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":75,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":123,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":125,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APP_NAME, APP_SCHEMA } from '@onlook/models/constants';\nimport { BrowserWindow, app, shell } from 'electron';\nimport fixPath from 'fix-path';\nimport { createRequire } from 'node:module';\nimport os from 'node:os';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { sendAnalytics } from './analytics';\nimport { handleAuthCallback, setupAuthAutoRefresh } from './auth';\nimport { listenForIpcMessages } from './events';\nimport { updater } from './update';\n\n// Help main inherit $PATH defined in dotfiles (.bashrc/.bash_profile/.zshrc/etc).\nfixPath();\n\nexport let mainWindow: BrowserWindow | null = null;\nconst require = createRequire(import.meta.url);\nexport const __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Constants\nconst MAIN_DIST = path.join(__dirname, '../../dist-electron');\nconst RENDERER_DIST = path.join(__dirname, '../../dist');\nconst PRELOAD_PATH = path.join(__dirname, '../preload/index.js');\nconst INDEX_HTML = path.join(RENDERER_DIST, 'index.html');\nconst VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;\n\n// Environment setup\nconst setupEnvironment = () => {\n    process.env.APP_ROOT = path.join(__dirname, '../..');\n    process.env.WEBVIEW_PRELOAD_PATH = path.join(__dirname, '../preload/webview.js');\n    process.env.APP_VERSION = app.getVersion();\n    process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n        ? path.join(process.env.APP_ROOT, 'public')\n        : RENDERER_DIST;\n};\n\n// Platform-specific configurations\nconst configurePlatformSpecifics = () => {\n    if (os.release().startsWith('6.1')) {\n        app.disableHardwareAcceleration();\n    }\n\n    if (process.platform === 'win32') {\n        app.setAppUserModelId(app.getName());\n    }\n};\n\n// Protocol setup\nconst setupProtocol = () => {\n    if (process.defaultApp && process.argv.length >= 2) {\n        app.setAsDefaultProtocolClient(APP_SCHEMA, process.execPath, [\n            path.resolve(process.argv?.[1]),\n        ]);\n    } else {\n        app.setAsDefaultProtocolClient(APP_SCHEMA);\n    }\n};\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        title: APP_NAME,\n        minWidth: 800,\n        icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n        titleBarStyle: 'hiddenInset',\n        frame: false,\n        webPreferences: {\n            preload: PRELOAD_PATH,\n            webviewTag: true,\n        },\n    });\n    return mainWindow;\n};\n\nconst loadWindowContent = (win: BrowserWindow) => {\n    VITE_DEV_SERVER_URL ? win.loadURL(VITE_DEV_SERVER_URL) : win.loadFile(INDEX_HTML);\n};\n\nconst initMainWindow = () => {\n    const win = createWindow();\n    win.maximize();\n    loadWindowContent(win);\n    win.webContents.setWindowOpenHandler(({ url }) => {\n        if (url.startsWith('https:')) {\n            shell.openExternal(url);\n        }\n        return { action: 'deny' };\n    });\n\n    setupAuthAutoRefresh();\n};\n\nconst setupAppEventListeners = () => {\n    app.whenReady().then(() => {\n        initMainWindow();\n    });\n\n    app.on('ready', () => {\n        updater.listen();\n        sendAnalytics('start app');\n    });\n\n    app.on('window-all-closed', async () => {\n        if (process.platform !== 'darwin') {\n            mainWindow = null;\n            app.quit();\n        }\n    });\n\n    app.on('second-instance', (_, commandLine) => {\n        if (mainWindow) {\n            if (mainWindow.isMinimized()) {\n                mainWindow.restore();\n            }\n            mainWindow.focus();\n        }\n        const url = commandLine.find((arg) => arg.startsWith(`${APP_SCHEMA}://`));\n        if (url && process.platform !== 'darwin') {\n            handleAuthCallback(url);\n        }\n    });\n\n    app.on('activate', () => {\n        BrowserWindow.getAllWindows().length\n            ? BrowserWindow.getAllWindows()?.[0]?.focus()\n            : initMainWindow();\n    });\n\n    app.on('open-url', (event, url) => {\n        event.preventDefault();\n        handleAuthCallback(url);\n    });\n\n    app.on('quit', () => sendAnalytics('quit app'));\n};\n\n// Main function\nconst main = async () => {\n    if (!app.requestSingleInstanceLock()) {\n        app.quit();\n        process.exit(0);\n    }\n\n    setupEnvironment();\n    configurePlatformSpecifics();\n    setupProtocol();\n    setupAppEventListeners();\n    listenForIpcMessages();\n};\n\nmain();\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/delete.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":22,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from 'fs';\nimport * as path from 'path';\nimport { cleanupEmptyFolders, detectRouterType } from './helpers';\n\nexport async function deleteNextJsPage(projectRoot: string, pagePath: string, isDir: boolean) {\n    try {\n        const routerConfig = await detectRouterType(projectRoot);\n\n        if (!routerConfig) {\n            throw new Error('Could not detect Next.js router type');\n        }\n\n        if (routerConfig.type !== 'app') {\n            throw new Error('Page deletion is only supported for App Router projects for now.');\n        }\n\n        const fullPath = path.join(routerConfig.basePath, pagePath);\n\n        // Check if file/folder exists\n        let stats;\n        try {\n            stats = await fs.stat(fullPath);\n        } catch (err) {\n            if (err instanceof Error && 'code' in err && err.code === 'ENOENT') {\n                throw new Error('Selected page not found');\n            }\n            throw err;\n        }\n\n        if (isDir) {\n            await fs.rm(fullPath, { recursive: true, force: true });\n        } else {\n            const selectedFilePath = path.join(fullPath, 'page.tsx');\n            await fs.unlink(selectedFilePath);\n            await cleanupEmptyFolders(path.dirname(fullPath));\n        }\n\n        console.log(`Deleted: ${fullPath}`);\n        return true;\n    } catch (error) {\n        console.error('Error deleting page:', error);\n        throw error;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/duplicate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/rename.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/scan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/terminal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/directory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/file.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/images.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/update/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/browserview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/group.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":56,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ActionTarget, GroupContainer } from '@onlook/models/actions';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement } from '../helpers';\nimport { elementFromDomId } from '/common/helpers';\n\nexport function groupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = createContainerElement(container);\n\n    // Find child elements and their positions\n    const childrenMap = new Set(children.map((c) => c.domId));\n    const childrenWithIndices = Array.from(parentEl.children)\n        .map((child, index) => ({\n            element: child as HTMLElement,\n            index,\n            domId: getOrAssignDomId(child as HTMLElement),\n        }))\n        .filter(({ domId }) => childrenMap.has(domId));\n\n    if (childrenWithIndices.length === 0) {\n        console.warn('No valid children found to group');\n        return null;\n    }\n\n    // Insert container at the position of the first child\n    const insertIndex = Math.min(...childrenWithIndices.map((c) => c.index));\n    parentEl.insertBefore(containerEl, parentEl.children?.[insertIndex]);\n\n    // Move children into container\n    childrenWithIndices.forEach(({ element }) => {\n        const newElement = element.cloneNode(true) as HTMLElement;\n\n        newElement.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        containerEl.appendChild(newElement);\n        element.style.display = 'none';\n        removeIdsFromChildElement(element);\n    });\n\n    return getDomElement(containerEl, true);\n}\n\nexport function ungroupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = Array.from(parentEl.children).find(\n        (child) => child.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID) === container.domId,\n    ) as HTMLElement | undefined;\n    if (!containerEl) {\n        console.warn('Failed to find container element', parent.domId);\n        return null;\n    }\n\n    // Insert container children in order into parent behind container\n    Array.from(containerEl.children).forEach((child) => {\n        child.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        parentEl.insertBefore(child, containerEl);\n    });\n    containerEl.style.display = 'none';\n    return getDomElement(parentEl, true);\n}\n\nfunction createContainerElement(target: GroupContainer): HTMLElement {\n    const containerEl = document.createElement(target.tagName);\n    Object.entries(target.attributes).forEach(([key, value]) => {\n        containerEl.setAttribute(key, value);\n    });\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID, target.domId);\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_ID, target.oid);\n    return containerEl;\n}\n\nfunction removeIdsFromChildElement(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_INSERTED);\n\n    const children = Array.from(el.children);\n    if (children.length === 0) {\n        return;\n    }\n\n    children.forEach((child) => {\n        removeIdsFromChildElement(child as HTMLElement);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/image.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/remove.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/drag.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDragElement' is defined but never used.","line":116,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement, restoreElementStyle } from '../helpers';\nimport { getDisplayDirection } from './helpers';\nimport { createStub, getCurrentStubIndex, moveStub, removeStub } from './stub';\nimport { elementFromDomId, isValidHtmlElement } from '/common/helpers';\n\nexport function startDrag(domId: string): number | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn(`Start drag element not found: ${domId}`);\n        return null;\n    }\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('Start drag parent not found');\n        return null;\n    }\n    const htmlChildren = Array.from(parent.children).filter(isValidHtmlElement);\n    const originalIndex = htmlChildren.indexOf(el);\n    prepareElementForDragging(el);\n    createStub(el);\n    const pos = getAbsolutePosition(el);\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION, JSON.stringify(pos));\n    return originalIndex;\n}\n\nexport function drag(domId: string, dx: number, dy: number, x: number, y: number) {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('Dragging element not found');\n        return;\n    }\n    const styles = window.getComputedStyle(el);\n    const pos = JSON.parse(\n        el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION) || '{}',\n    );\n    const left = pos.left + dx - window.scrollX;\n    const top = pos.top + dy - window.scrollY;\n\n    el.style.left = `${left}px`;\n    el.style.top = `${top}px`;\n    el.style.width = styles.width + 1;\n    el.style.height = styles.height + 1;\n    el.style.position = 'fixed';\n\n    moveStub(el, x, y);\n}\n\nexport function endDrag(domId: string): {\n    newIndex: number;\n    child: DomElement;\n    parent: DomElement;\n} | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('End drag element not found');\n        endAllDrag();\n        return null;\n    }\n\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('End drag parent not found');\n        cleanUpElementAfterDragging(el);\n        return null;\n    }\n\n    const stubIndex = getCurrentStubIndex(parent, el);\n    cleanUpElementAfterDragging(el);\n    removeStub();\n\n    if (stubIndex === -1) {\n        return null;\n    }\n\n    const elementIndex = Array.from(parent.children).indexOf(el);\n    if (stubIndex === elementIndex) {\n        return null;\n    }\n    return {\n        newIndex: stubIndex,\n        child: getDomElement(el, false),\n        parent: getDomElement(parent, false),\n    };\n}\n\nfunction prepareElementForDragging(el: HTMLElement) {\n    const saved = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    if (saved) {\n        return;\n    }\n\n    const style = {\n        position: el.style.position,\n        transform: el.style.transform,\n        width: el.style.width,\n        height: el.style.height,\n        left: el.style.left,\n        top: el.style.top,\n    };\n\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE, JSON.stringify(style));\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING, 'true');\n\n    if (el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION) !== null) {\n        const parent = el.parentElement;\n        if (parent) {\n            const displayDirection = getDisplayDirection(parent);\n            el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION, displayDirection);\n        }\n    }\n}\n\nfunction getDragElement(): HTMLElement | undefined {\n    const el = document.querySelector(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    ) as HTMLElement | null;\n    if (!el) {\n        return;\n    }\n    return el;\n}\n\nfunction cleanUpElementAfterDragging(el: HTMLElement) {\n    restoreElementStyle(el);\n    removeDragAttributes(el);\n    getOrAssignDomId(el);\n}\n\nfunction removeDragAttributes(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION);\n}\n\nfunction getAbsolutePosition(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return {\n        left: rect.left + window.scrollX,\n        top: rect.top + window.scrollY,\n    };\n}\n\nexport function endAllDrag() {\n    const draggingElements = document.querySelectorAll(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    );\n    for (const el of draggingElements) {\n        cleanUpElementAfterDragging(el as HTMLElement);\n    }\n    removeStub();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/stub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/publish.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-plugin-unsafe-accessors/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/no-unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/UpdateButton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/WindowsControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouteManager, useUpdateManager } from '@/components/Context';\nimport { Route } from '@/lib/routes';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport UpdateButton from './UpdateButton';\nimport { WindowsControls } from './WindowsControls';\n\nconst AppBar = observer(() => {\n    const routeManager = useRouteManager();\n    const updateManager = useUpdateManager();\n\n    const className = cn(\n        'opacity-50 hover:opacity-100',\n        updateManager.updateAvailable &&\n            'hover:bg-red-800 hover:text-red-100 dark:hover:text-red-100',\n    );\n\n    return (\n        <div\n            className={cn(\n                'flex flex-row items-center pl-20 h-10 border-b bg-background dark:bg-background-active transition-colors duration-300 ease-in-out',\n                routeManager.route === Route.SIGN_IN && 'bg-transparent border-b-0',\n                updateManager.updateAvailable &&\n                    'bg-red-950 dark:bg-red-950 dark:text-red-300 text-red-300 transition-opacity duration-300 ease-in-out',\n            )}\n        >\n            <div className=\"appbar w-full h-full\"></div>\n            <div className=\"flex mr-2 gap-2\">\n                <UpdateButton />\n            </div>\n            <WindowsControls />\n        </div>\n    );\n});\n\nexport default AppBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/Context/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/dunes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/hotkeys-label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/auth/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":31,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":31,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":36,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { UserMetadata } from '@onlook/models/settings';\nimport supabase from '@onlook/supabase/clients';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class AuthManager {\n    authenticated = false;\n    userMetadata: UserMetadata | null = null;\n    isAuthEnabled = !!supabase && !!supabase.auth;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.fetchUserMetadata();\n        this.listenForAuthEvents();\n    }\n\n    async fetchUserMetadata() {\n        this.userMetadata = (await invokeMainChannel(\n            MainChannels.GET_USER_METADATA,\n        )) as UserMetadata;\n\n        const signedIn = (await invokeMainChannel(MainChannels.IS_USER_SIGNED_IN)) as boolean;\n\n        if (this.userMetadata && signedIn) {\n            this.authenticated = true;\n        }\n    }\n\n    listenForAuthEvents() {\n        window.api.on(MainChannels.USER_SIGNED_IN, async (e, args) => {\n            this.authenticated = true;\n            this.fetchUserMetadata();\n        });\n\n        window.api.on(MainChannels.USER_SIGNED_OUT, async (e, args) => {\n            this.authenticated = false;\n            this.userMetadata = null;\n        });\n    }\n\n    async signIn(provider: 'github' | 'google') {\n        await invokeMainChannel(MainChannels.SIGN_IN, { provider });\n    }\n\n    async signOut() {\n        await invokeMainChannel(MainChannels.SIGN_OUT);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/action/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/layers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/canvas/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/conversation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":78,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatMessageType, type ChatConversation } from '@onlook/models/chat';\nimport { MAX_NAME_LENGTH } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { AssistantChatMessageImpl } from '../message/assistant';\nimport { UserChatMessageImpl } from '../message/user';\n\nexport class ChatConversationImpl implements ChatConversation {\n    id: string;\n    projectId: string;\n    displayName: string | null = null;\n    messages: (UserChatMessageImpl | AssistantChatMessageImpl)[];\n    createdAt: string;\n    updatedAt: string;\n\n    constructor(projectId: string, messages: (UserChatMessageImpl | AssistantChatMessageImpl)[]) {\n        makeAutoObservable(this);\n        this.id = nanoid();\n        this.projectId = projectId;\n        this.messages = messages;\n        this.createdAt = new Date().toISOString();\n        this.updatedAt = new Date().toISOString();\n    }\n\n    getMessageById(id: string) {\n        return this.messages.find((m) => m.id === id);\n    }\n\n    static fromJSON(data: ChatConversation) {\n        const conversation = new ChatConversationImpl(data.projectId, []);\n        conversation.id = data.id;\n        conversation.displayName = data.displayName;\n        conversation.messages = data.messages.map((m) => {\n            if (m.type === ChatMessageType.USER) {\n                return UserChatMessageImpl.fromJSON(m);\n            } else {\n                return AssistantChatMessageImpl.fromJSON(m);\n            }\n        });\n        conversation.createdAt = data.createdAt;\n        conversation.updatedAt = data.updatedAt;\n        return conversation;\n    }\n\n    getMessagesForStream(): CoreMessage[] {\n        return this.messages.map((m) => m.toCoreMessage());\n    }\n\n    appendMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        this.messages = [...this.messages, message];\n        this.updatedAt = new Date().toISOString();\n    }\n\n    removeAllMessagesAfter(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages = this.messages.slice(0, index + 1);\n        this.updatedAt = new Date().toISOString();\n    }\n\n    updateName(name: string, override = false) {\n        if (override || !this.displayName) {\n            this.displayName = name.slice(0, MAX_NAME_LENGTH);\n        }\n    }\n\n    getLastUserMessage() {\n        return this.messages.findLast((message) => message.type === ChatMessageType.USER);\n    }\n\n    updateMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages?.[index] = message;\n        this.updatedAt = new Date().toISOString();\n        this.messages = [...this.messages];\n    }\n\n    updateCodeReverted(id: string) {\n        this.messages = [...this.messages];\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/assistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/stream.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/copy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/element/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/error/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/group/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/history/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/image/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":279,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorMode, EditorTabValue, SettingsTabValue } from '@/lib/models';\nimport type { ProjectsManager } from '@/lib/projects';\nimport type { UserManager } from '@/lib/user';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport type { NativeImage } from 'electron';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { ActionManager } from './action';\nimport { AstManager } from './ast';\nimport { CanvasManager } from './canvas';\nimport { ChatManager } from './chat';\nimport { CodeManager } from './code';\nimport { CopyManager } from './copy';\nimport { ElementManager } from './element';\nimport { ErrorManager } from './error';\nimport { GroupManager } from './group';\nimport { HistoryManager } from './history';\nimport { ImageManager } from './image';\nimport { InsertManager } from './insert';\nimport { MoveManager } from './move';\nimport { OverlayManager } from './overlay';\nimport { PagesManager } from './pages';\nimport { ProjectInfoManager } from './projectinfo';\nimport { StyleManager } from './style';\nimport { TextEditingManager } from './text';\nimport { WebviewManager } from './webview';\n\nexport class EditorEngine {\n    private _editorMode: EditorMode = EditorMode.DESIGN;\n    private _plansOpen: boolean = false;\n    private _settingsOpen: boolean = false;\n    private _hotkeysOpen: boolean = false;\n    private _editorPanelTab: EditorTabValue = EditorTabValue.CHAT;\n    private _settingsTab: SettingsTabValue = SettingsTabValue.DOMAIN;\n\n    private canvasManager: CanvasManager;\n    private chatManager: ChatManager;\n    private webviewManager: WebviewManager;\n    private overlayManager: OverlayManager;\n    private codeManager: CodeManager;\n    private pagesManager: PagesManager;\n    private errorManager: ErrorManager;\n    private imageManager: ImageManager;\n\n    private astManager: AstManager = new AstManager(this);\n    private historyManager: HistoryManager = new HistoryManager(this);\n    private projectInfoManager: ProjectInfoManager = new ProjectInfoManager();\n    private elementManager: ElementManager = new ElementManager(this);\n    private textEditingManager: TextEditingManager = new TextEditingManager(this);\n    private actionManager: ActionManager = new ActionManager(this);\n    private insertManager: InsertManager = new InsertManager(this);\n    private moveManager: MoveManager = new MoveManager(this);\n    private styleManager: StyleManager = new StyleManager(this);\n    private copyManager: CopyManager = new CopyManager(this);\n    private groupManager: GroupManager = new GroupManager(this);\n\n    constructor(\n        private projectsManager: ProjectsManager,\n        private userManager: UserManager,\n    ) {\n        makeAutoObservable(this);\n        this.canvasManager = new CanvasManager(this.projectsManager);\n        this.chatManager = new ChatManager(this, this.projectsManager, this.userManager);\n        this.webviewManager = new WebviewManager(this, this.projectsManager);\n        this.overlayManager = new OverlayManager(this);\n        this.codeManager = new CodeManager(this, this.projectsManager);\n        this.pagesManager = new PagesManager(this, this.projectsManager);\n        this.errorManager = new ErrorManager(this, this.projectsManager);\n        this.imageManager = new ImageManager(this, this.projectsManager);\n    }\n\n    get elements() {\n        return this.elementManager;\n    }\n    get overlay() {\n        return this.overlayManager;\n    }\n    get webviews() {\n        return this.webviewManager;\n    }\n    get code() {\n        return this.codeManager;\n    }\n    get history() {\n        return this.historyManager;\n    }\n    get ast() {\n        return this.astManager;\n    }\n    get action() {\n        return this.actionManager;\n    }\n    get mode() {\n        return this._editorMode;\n    }\n    get insert() {\n        return this.insertManager;\n    }\n    get move() {\n        return this.moveManager;\n    }\n    get projectInfo() {\n        return this.projectInfoManager;\n    }\n    get style() {\n        return this.styleManager;\n    }\n    get canvas() {\n        return this.canvasManager;\n    }\n    get text() {\n        return this.textEditingManager;\n    }\n    get copy() {\n        return this.copyManager;\n    }\n    get group() {\n        return this.groupManager;\n    }\n    get chat() {\n        return this.chatManager;\n    }\n    get image() {\n        return this.imageManager;\n    }\n    get editPanelTab() {\n        return this._editorPanelTab;\n    }\n    get settingsTab() {\n        return this._settingsTab;\n    }\n    get isPlansOpen() {\n        return this._plansOpen;\n    }\n    get isSettingsOpen() {\n        return this._settingsOpen;\n    }\n    get isHotkeysOpen() {\n        return this._hotkeysOpen;\n    }\n    get errors() {\n        return this.errorManager;\n    }\n    get isWindowSelected() {\n        return this.webviews.selected.length > 0 && this.elements.selected.length === 0;\n    }\n\n    set mode(mode: EditorMode) {\n        this._editorMode = mode;\n    }\n\n    set editPanelTab(tab: EditorTabValue) {\n        this._editorPanelTab = tab;\n    }\n\n    set settingsTab(tab: SettingsTabValue) {\n        this._settingsTab = tab;\n    }\n\n    set isPlansOpen(open: boolean) {\n        this._plansOpen = open;\n        if (open) {\n            sendAnalytics('open pro checkout');\n        }\n    }\n\n    set isSettingsOpen(open: boolean) {\n        this._settingsOpen = open;\n    }\n\n    set isHotkeysOpen(value: boolean) {\n        this._hotkeysOpen = value;\n    }\n\n    get pages() {\n        return this.pagesManager;\n    }\n\n    dispose() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deregisterAll();\n        this.errors.clear();\n        this.chatManager?.dispose();\n        this.historyManager?.clear();\n        this.elementManager?.clear();\n        this.actionManager?.dispose();\n        this.overlayManager?.clear();\n        this.astManager?.clear();\n        this.textEditingManager?.clean();\n        this.codeManager?.dispose();\n        this.insertManager?.dispose();\n        this.moveManager?.dispose();\n        this.styleManager?.dispose();\n        this.copyManager?.dispose();\n        this.groupManager?.dispose();\n        this.canvasManager?.clear();\n        this.imageManager?.dispose();\n        this._settingsOpen = false;\n        this._plansOpen = false;\n    }\n\n    clearUI() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deselectAll();\n    }\n\n    inspect() {\n        const selected = this.elements.selected;\n        if (selected.length === 0) {\n            return;\n        }\n        const selectedEl = selected[0];\n        const webviewId = selectedEl.webviewId;\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            return;\n        }\n        webview.openDevTools();\n    }\n\n    async refreshLayers() {\n        const webviews = this.webviews.webviews;\n        if (webviews.size === 0) {\n            return;\n        }\n        const webview = Array.from(webviews.values())?.[0]?.webview;\n        webview.executeJavaScript('window.api?.processDom()');\n    }\n\n    async takeActiveWebviewScreenshot(\n        name: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        if (this.webviews.webviews.size === 0) {\n            console.error('No webviews found');\n            return null;\n        }\n        const webviewId = Array.from(this.webviews.webviews.values())?.[0]?.webview.id;\n        return this.takeWebviewScreenshot(name, webviewId, options);\n    }\n\n    async takeWebviewScreenshot(\n        name: string,\n        webviewId: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            console.error('No webview found');\n            return null;\n        }\n\n        const hasContent = await webview.executeJavaScript(\n            `document.body.innerText.trim().length > 0 || document.body.children.length > 0 `,\n        );\n        if (!hasContent) {\n            console.error('No content found in webview');\n            return null;\n        }\n\n        const image: NativeImage = await webview.capturePage();\n\n        if (options?.save) {\n            const imageName = `${name}-preview.png`;\n            const path: string | null = await invokeMainChannel(MainChannels.SAVE_IMAGE, {\n                img: image.toDataURL(),\n                name: imageName,\n            });\n            return {\n                name: imageName,\n            };\n        }\n        return {\n            image: image.resize({ quality: 'good', height: 100 }).toDataURL({\n                scaleFactor: 0.1,\n            }),\n        };\n    }\n\n    canDeleteWindow() {\n        return this.canvas.frames.length > 1;\n    }\n\n    deleteWindow(id?: string) {\n        if (this.canvas.frames.length === 1) {\n            console.error('Cannot delete the last window');\n            return;\n        }\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n            if (!settings) {\n                console.error('Window not found');\n                return;\n            }\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        this.ast.mappings.remove(settings.id);\n        this.canvas.frames = this.canvas.frames.filter((frame) => frame.id !== settings.id);\n        const webview = this.webviews.getWebview(settings.id);\n        if (webview) {\n            this.webviews.deregister(webview);\n        }\n        sendAnalytics('window delete');\n    }\n\n    duplicateWindow(id?: string) {\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        const currentFrame = settings;\n        const newFrame: FrameSettings = {\n            id: nanoid(),\n            url: currentFrame.url,\n            dimension: {\n                width: currentFrame.dimension.width,\n                height: currentFrame.dimension.height,\n            },\n            position: {\n                x: currentFrame.position.x + currentFrame.dimension.width + 100,\n                y: currentFrame.position.y,\n            },\n            aspectRatioLocked: currentFrame.aspectRatioLocked,\n            orientation: currentFrame.orientation,\n            device: currentFrame.device,\n            theme: currentFrame.theme,\n        };\n\n        this.canvas.frames = [...this.canvas.frames, newFrame];\n        sendAnalytics('window duplicate');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/insert/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/move/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":100,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { MoveElementAction } from '@onlook/models/actions';\nimport type { DomElement, ElementPosition } from '@onlook/models/element';\nimport type React from 'react';\nimport type { EditorEngine } from '..';\n\nexport class MoveManager {\n    dragOrigin: ElementPosition | undefined;\n    dragTarget: DomElement | undefined;\n    originalIndex: number | undefined;\n    MIN_DRAG_DISTANCE = 5;\n    isDraggingAbsolute = false;\n\n    constructor(private editorEngine: EditorEngine) {}\n\n    get isDragging() {\n        return !!this.dragOrigin;\n    }\n\n    async start(el: DomElement, position: ElementPosition, webview: Electron.WebviewTag) {\n        if (this.editorEngine.chat.isWaiting) {\n            return;\n        }\n        if (!this.editorEngine.elements.selected.some((selected) => selected.domId === el.domId)) {\n            console.warn('Element not selected, cannot start drag');\n            return;\n        }\n\n        this.dragOrigin = position;\n        this.dragTarget = el;\n        if (el.styles?.computed?.position === 'absolute') {\n            this.isDraggingAbsolute = true;\n            this.editorEngine.history.startTransaction();\n            return;\n        } else {\n            this.originalIndex = await webview.executeJavaScript(\n                `window.api?.startDrag('${el.domId}')`,\n            );\n        }\n\n        if (this.originalIndex === null || this.originalIndex === -1) {\n            this.clear();\n            console.warn('Start drag failed, original index is null or -1');\n            return;\n        }\n    }\n\n    drag(\n        e: React.MouseEvent<HTMLDivElement>,\n        getRelativeMousePositionToWebview: (e: React.MouseEvent<HTMLDivElement>) => ElementPosition,\n    ) {\n        if (!this.dragOrigin || !this.dragTarget) {\n            console.error('Cannot drag without drag origin or target');\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag');\n            return;\n        }\n\n        const { x, y } = getRelativeMousePositionToWebview(e);\n        const dx = x - this.dragOrigin.x;\n        const dy = y - this.dragOrigin.y;\n\n        if (this.isDraggingAbsolute) {\n            this.handleDragAbsolute(this.dragOrigin, this.dragTarget, x, y);\n            return;\n        }\n\n        if (Math.max(Math.abs(dx), Math.abs(dy)) > this.MIN_DRAG_DISTANCE) {\n            this.editorEngine.overlay.clear();\n            webview.executeJavaScript(\n                `window.api?.drag('${this.dragTarget.domId}', ${dx}, ${dy}, ${x}, ${y})`,\n            );\n        }\n    }\n\n    handleDragAbsolute(dragOrigin: ElementPosition, dragTarget: DomElement, x: number, y: number) {\n        const initialOffset = {\n            x: dragOrigin.x - dragTarget.rect.x,\n            y: dragOrigin.y - dragTarget.rect.y,\n        };\n\n        const parentRect = dragTarget.parent?.rect;\n        if (!parentRect) {\n            return;\n        }\n\n        const newX = Math.round(x - parentRect.x - initialOffset.x);\n        const newY = Math.round(y - parentRect.y - initialOffset.y);\n\n        this.editorEngine.overlay.clear();\n        this.editorEngine.style.updateMultiple({\n            left: `${newX}px`,\n            top: `${newY}px`,\n        });\n    }\n\n    async end(e: React.MouseEvent<HTMLDivElement>) {\n        if (this.isDraggingAbsolute) {\n            this.editorEngine.history.commitTransaction();\n            this.isDraggingAbsolute = false;\n            this.clear();\n        }\n\n        if (this.originalIndex === undefined || !this.dragTarget) {\n            this.clear();\n            this.endAllDrag();\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag end');\n            this.endAllDrag();\n            return;\n        }\n\n        const res: {\n            newIndex: number;\n            child: DomElement;\n            parent: DomElement;\n        } | null = await webview.executeJavaScript(\n            `window.api?.endDrag('${this.dragTarget.domId}')`,\n        );\n\n        if (res) {\n            const { child, parent, newIndex } = res;\n            if (newIndex !== this.originalIndex) {\n                const moveAction = this.createMoveAction(\n                    webview.id,\n                    child,\n                    parent,\n                    newIndex,\n                    this.originalIndex,\n                );\n                this.editorEngine.action.run(moveAction);\n            }\n        }\n        this.clear();\n    }\n\n    endAllDrag() {\n        this.editorEngine.webviews.webviews.forEach((webview) => {\n            webview.webview.executeJavaScript(`window.api?.endAllDrag()`);\n        });\n    }\n\n    moveSelected(direction: 'up' | 'down') {\n        const selected = this.editorEngine.elements.selected;\n        if (selected.length === 1) {\n            this.shiftElement(selected[0], direction);\n        } else {\n            if (selected.length > 1) {\n                console.error('Multiple elements selected, cannot shift');\n            } else {\n                console.error('No elements selected, cannot shift');\n            }\n        }\n    }\n\n    async shiftElement(element: DomElement, direction: 'up' | 'down'): Promise<void> {\n        const webview = this.editorEngine.webviews.getWebview(element.webviewId);\n        if (!webview) {\n            return;\n        }\n\n        // Get current index and parent\n        const currentIndex = await webview.executeJavaScript(\n            `window.api?.getElementIndex('${element.domId}')`,\n        );\n\n        if (currentIndex === -1) {\n            return;\n        }\n\n        const parent: DomElement | null = await webview.executeJavaScript(\n            `window.api?.getParentElement('${element.domId}')`,\n        );\n        if (!parent) {\n            return;\n        }\n\n        // Get filtered children count for accurate index calculation\n        const childrenCount = await webview.executeJavaScript(\n            `window.api?.getChildrenCount('${parent.domId}')`,\n        );\n\n        // Calculate new index based on direction and bounds\n        const newIndex =\n            direction === 'up'\n                ? Math.max(0, currentIndex - 1)\n                : Math.min(childrenCount - 1, currentIndex + 1);\n\n        if (newIndex === currentIndex) {\n            return;\n        }\n\n        // Create and run move action\n        const moveAction = this.createMoveAction(\n            webview.id,\n            element,\n            parent,\n            newIndex,\n            currentIndex,\n        );\n\n        this.editorEngine.action.run(moveAction);\n    }\n\n    createMoveAction(\n        webviewId: string,\n        child: DomElement,\n        parent: DomElement,\n        newIndex: number,\n        originalIndex: number,\n    ): MoveElementAction {\n        return {\n            type: 'move-element',\n            location: {\n                type: 'index',\n                targetDomId: parent.domId,\n                targetOid: parent.instanceId || parent.oid,\n                index: newIndex,\n                originalIndex: originalIndex,\n            },\n            targets: [\n                {\n                    webviewId,\n                    domId: child.domId,\n                    oid: child.instanceId || child.oid,\n                },\n            ],\n        };\n    }\n\n    clear() {\n        this.originalIndex = undefined;\n        this.dragOrigin = undefined;\n        this.dragTarget = undefined;\n    }\n\n    dispose() {\n        // Clear state\n        this.clear();\n\n        // Clear references\n        this.editorEngine = null as any;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/prosemirror/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/rect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/projectinfo/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/text/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/token/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/eventHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/messageBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/autolayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/numberUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/tag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/units.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/hosting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/port.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/run.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/routes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/sizePresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/update/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":14,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":14,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":18,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":18,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class UpdateManager {\n    updateAvailable = false;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.listen();\n    }\n\n    listen() {\n        window.api.on(MainChannels.UPDATE_DOWNLOADED, async (e, args) => {\n            this.updateAvailable = true;\n        });\n\n        window.api.on(MainChannels.UPDATE_NOT_AVAILABLE, async (e, args) => {\n            this.updateAvailable = false;\n        });\n    }\n\n    quitAndInstall() {\n        invokeMainChannel(MainChannels.QUIT_AND_INSTALL);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/Delete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":35,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":35,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { ReactNode } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport DeleteKey from './Delete';\nimport { Hotkey } from '/common/hotkeys';\n\nconst HotkeysArea = ({ children }: { children: ReactNode }) => {\n    const editorEngine = useEditorEngine();\n\n    // Zoom\n    useHotkeys(\n        'mod+0',\n        () => {\n            editorEngine.canvas.scale = DefaultSettings.SCALE;\n            editorEngine.canvas.position = {\n                x: DefaultSettings.PAN_POSITION.x,\n                y: DefaultSettings.PAN_POSITION.y,\n            };\n        },\n        { preventDefault: true },\n    );\n    useHotkeys('mod+equal', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 1.2), {\n        preventDefault: true,\n    });\n    useHotkeys('mod+minus', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 0.8), {\n        preventDefault: true,\n    });\n\n    // Modes\n    useHotkeys(Hotkey.SELECT.command, () => (editorEngine.mode = EditorMode.DESIGN));\n    useHotkeys(Hotkey.ESCAPE.command, () => {\n        editorEngine.mode = EditorMode.DESIGN;\n        !editorEngine.text.isEditing && editorEngine.clearUI();\n    });\n    useHotkeys(Hotkey.PAN.command, () => (editorEngine.mode = EditorMode.PAN));\n    useHotkeys(Hotkey.INTERACT.command, () => (editorEngine.mode = EditorMode.INTERACT));\n    useHotkeys(Hotkey.INSERT_DIV.command, () => (editorEngine.mode = EditorMode.INSERT_DIV));\n    useHotkeys(Hotkey.INSERT_TEXT.command, () => (editorEngine.mode = EditorMode.INSERT_TEXT));\n\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.PAN), { keydown: true });\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.DESIGN), { keyup: true });\n\n    useHotkeys('alt', () => editorEngine.elements.showMeasurement(), { keydown: true });\n    useHotkeys('alt', () => editorEngine.overlay.removeMeasurement(), { keyup: true });\n\n    // Actions\n    useHotkeys(Hotkey.UNDO.command, () => editorEngine.action.undo());\n    useHotkeys(Hotkey.REDO.command, () => editorEngine.action.redo());\n    useHotkeys(Hotkey.ENTER.command, () => editorEngine.text.editSelectedElement());\n    useHotkeys(Hotkey.REFRESH_LAYERS.command, () => editorEngine.refreshLayers());\n    useHotkeys(Hotkey.OPEN_DEV_TOOL.command, () => editorEngine.inspect());\n\n    // Group\n    useHotkeys(Hotkey.GROUP.command, () => editorEngine.group.groupSelectedElements());\n    useHotkeys(Hotkey.UNGROUP.command, () => editorEngine.group.ungroupSelectedElement());\n\n    // Copy\n    useHotkeys(Hotkey.COPY.command, () => editorEngine.copy.copy());\n    useHotkeys(Hotkey.PASTE.command, () => editorEngine.copy.paste());\n    useHotkeys(Hotkey.CUT.command, () => editorEngine.copy.cut());\n    useHotkeys(Hotkey.DUPLICATE.command, () => {\n        if (editorEngine.isWindowSelected) {\n            editorEngine.duplicateWindow();\n        } else {\n            editorEngine.copy.duplicate();\n        }\n    });\n\n    // AI\n    useHotkeys(Hotkey.ADD_AI_CHAT.command, () => (editorEngine.editPanelTab = EditorTabValue.CHAT));\n    useHotkeys(Hotkey.NEW_AI_CHAT.command, () => {\n        editorEngine.editPanelTab = EditorTabValue.CHAT;\n        editorEngine.chat.conversation.startNewConversation();\n    });\n\n    // Move\n    useHotkeys(Hotkey.MOVE_LAYER_UP.command, () => editorEngine.move.moveSelected('up'));\n    useHotkeys(Hotkey.MOVE_LAYER_DOWN.command, () => editorEngine.move.moveSelected('down'));\n\n    useHotkeys(Hotkey.SHOW_HOTKEYS.command, () => {\n        editorEngine.isHotkeysOpen = !editorEngine.isHotkeysOpen;\n    });\n\n    return (\n        <>\n            <DeleteKey />\n            {children}\n        </>\n    );\n};\n\nexport default HotkeysArea;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/BaseRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getOffsets' is assigned a value but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":231,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { ClickRectState } from '@/lib/editor/engine/overlay/state';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\nconst SPACING = {\n    base: 8,\n    padding: 16,\n};\n\nconst DIMENSIONS = {\n    singleLineHeight: 32,\n    minInputWidth: 280,\n    buttonHeight: 36, // Standard button height\n    multiLineRows: 4,\n    minCharsToSubmit: 4,\n};\n\nconst ANIMATION = {\n    DISTANCE_THRESHOLD: 300, // pixels - adjust this value as needed\n    TRANSITION_DURATION: 100, // ms\n};\n\nconst getOffsets = (isMultiline: boolean) => {\n    const chatButtonHeight = DIMENSIONS.buttonHeight + SPACING.padding;\n    const inputHeight = isMultiline\n        ? DIMENSIONS.singleLineHeight * (DIMENSIONS.multiLineRows - 1) + SPACING.padding\n        : DIMENSIONS.singleLineHeight + SPACING.padding;\n\n    return {\n        chatButton: chatButtonHeight,\n        input: chatButtonHeight + inputHeight,\n    };\n};\n\nconst DEFAULT_INPUT_STATE = {\n    value: '',\n    isVisible: false,\n    isMultiline: false,\n    isSubmitting: false,\n};\n\nexport const OverlayChat = observer(\n    ({ selectedEl, elementId }: { selectedEl: ClickRectState | null; elementId: string }) => {\n        const editorEngine = useEditorEngine();\n        const isInteractMode = editorEngine.mode === EditorMode.INTERACT;\n        const [inputState, setInputState] = useState(DEFAULT_INPUT_STATE);\n        const [isComposing, setIsComposing] = useState(false);\n        const textareaRef = useRef<HTMLTextAreaElement>(null);\n        const prevChatPositionRef = useRef<{ x: number; y: number } | null>(null);\n\n        // Add effect to reset input state when elementId changes\n        useEffect(() => {\n            setInputState(DEFAULT_INPUT_STATE);\n        }, [elementId]);\n\n        // Get current chat position\n        const chatPosition = {\n            x: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().left ?? 0)\n                : 0,\n            y: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().bottom ?? 0)\n                : 0,\n        };\n\n        // Calculate distance from previous chat position\n        const distance = prevChatPositionRef.current\n            ? Math.sqrt(\n                  Math.pow(chatPosition.x - prevChatPositionRef.current.x, 2) +\n                      Math.pow(chatPosition.y - prevChatPositionRef.current.y, 2),\n              )\n            : 0;\n\n        useEffect(() => {\n            prevChatPositionRef.current = chatPosition;\n        }, [chatPosition.x, chatPosition.y]);\n\n        const animationClass =\n            distance > ANIMATION.DISTANCE_THRESHOLD\n                ? 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200'\n                : 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200';\n\n        useEffect(() => {\n            if (elementId) {\n                requestAnimationFrame(() => {\n                    const element = document.querySelector(`[data-element-id=\"${elementId}\"]`);\n                    if (element) {\n                        element.classList.remove('scale-[0.2]', 'opacity-0', '-translate-y-2');\n                        element.classList.add('scale-100', 'opacity-100', 'translate-y-0');\n                    }\n                });\n            }\n        }, [elementId]);\n\n        if (\n            !selectedEl ||\n            isInteractMode ||\n            editorEngine.chat.isWaiting ||\n            editorEngine.chat.streamingMessage\n        ) {\n            return null;\n        }\n\n        const handleSubmit = async () => {\n            const messageToSend = inputState.value;\n            editorEngine.editPanelTab = EditorTabValue.CHAT;\n            await editorEngine.chat.sendNewMessage(messageToSend);\n            setInputState(DEFAULT_INPUT_STATE);\n        };\n\n        const containerStyle: React.CSSProperties = {\n            position: 'fixed',\n            top: selectedEl.top - 8,\n            left: selectedEl.left + selectedEl.width / 2,\n            transform: 'translate(-50%, 0)',\n            transformOrigin: 'center center',\n            pointerEvents: 'auto',\n            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n        };\n\n        return (\n            <div\n                style={containerStyle}\n                onClick={(e) => e.stopPropagation()}\n                className={animationClass}\n                data-element-id={elementId}\n            >\n                <div\n                    className={cn(\n                        'rounded-xl backdrop-blur-lg transition-all duration-300',\n                        'shadow-xl shadow-background-secondary/50',\n                        inputState.isVisible\n                            ? 'bg-background/80 border shadow-xl shadow-background-secondary/50 p-1'\n                            : 'bg-background-secondary/85 dark:bg-background/85 border-foreground-secondary/20 hover:border-foreground-secondary/50 p-0.5',\n                        'border flex relative',\n                    )}\n                >\n                    {!inputState.isVisible ? (\n                        // Chat Button\n                        <button\n                            onClick={() => setInputState((prev) => ({ ...prev, isVisible: true }))}\n                            className=\"rounded-lg hover:text-foreground-primary transition-colors px-2.5 py-1.5 flex flex-row items-center gap-2 w-full\"\n                        >\n                            <Icons.Sparkles className=\"w-4 h-4\" />\n                            <span className=\"text-miniPlus whitespace-nowrap\">Chat with AI</span>\n                        </button>\n                    ) : (\n                        // Input Field\n                        <div className=\"flex flex-row items-top gap-1 w-full min-w-[280px] relative\">\n                            <Button\n                                size=\"icon\"\n                                onClick={() =>\n                                    setInputState((prev) => ({\n                                        ...prev,\n                                        isVisible: false,\n                                        value: '',\n                                    }))\n                                }\n                                className={cn(\n                                    'group h-6 w-6 absolute left-1 top-1 z-10 border-none shadow-none bg-transparent hover:bg-transparent',\n                                    'transition-all duration-200',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'opacity-0 -translate-x-2 scale-75 pointer-events-none'\n                                        : 'opacity-100 translate-x-0 scale-100 pointer-events-auto',\n                                )}\n                                disabled={inputState.isSubmitting}\n                            >\n                                <Icons.CrossS className=\"h-4 w-4 text-foreground-secondary group-hover:text-foreground transition-colors\" />\n                            </Button>\n                            <Textarea\n                                aria-label=\"Chat message input\"\n                                ref={textareaRef}\n                                className={cn(\n                                    'w-full text-xs break-words p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px] rounded-lg',\n                                    'transition-all duration-150 ease-in-out',\n                                    'pr-10 backdrop-blur-lg',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'pl-2'\n                                        : 'pl-8',\n                                    'bg-background-secondary/75 text-foreground-primary border-background-secondary/75',\n                                    'max-h-[80px] caret-[#FA003C]',\n                                    'selection:bg-[#FA003C]/30 selection:text-[#FA003C]',\n                                )}\n                                value={inputState.value}\n                                onChange={(e) => {\n                                    setInputState((prev) => ({ ...prev, value: e.target.value }));\n                                    if (textareaRef.current) {\n                                        textareaRef.current.style.height = 'auto';\n                                        const maxHeight = DIMENSIONS.singleLineHeight * 4;\n                                        textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, maxHeight)}px`;\n                                        textareaRef.current.scrollTop =\n                                            textareaRef.current.scrollHeight;\n                                    }\n                                }}\n                                placeholder=\"Type your message...\"\n                                style={{\n                                    resize: 'none',\n                                    minHeight: DIMENSIONS.singleLineHeight,\n                                    height: 'auto',\n                                    overflowY: 'auto',\n                                    overflowX: 'hidden',\n                                    overscrollBehavior: 'contain',\n                                    lineHeight: '1.5',\n                                }}\n                                rows={1}\n                                autoFocus\n                                disabled={inputState.isSubmitting}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n                                        e.preventDefault();\n                                        const charCount = inputState.value.trim().length;\n                                        if (charCount >= DIMENSIONS.minCharsToSubmit) {\n                                            handleSubmit();\n                                        }\n                                    } else if (e.key === 'Escape') {\n                                        e.preventDefault();\n                                        setInputState((prev) => ({\n                                            ...prev,\n                                            isVisible: false,\n                                            value: '',\n                                        }));\n                                    }\n                                }}\n                                onCompositionStart={() => setIsComposing(true)}\n                                onCompositionEnd={(e) => {\n                                    setIsComposing(false);\n                                }}\n                            />\n                            {inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit && (\n                                <Button\n                                    size=\"icon\"\n                                    variant=\"secondary\"\n                                    onClick={handleSubmit}\n                                    className={cn(\n                                        'absolute right-0.5 bottom-0.5 h-7 w-7',\n                                        'bg-foreground-primary text-white hover:bg-foreground-hover',\n                                    )}\n                                    disabled={inputState.isSubmitting}\n                                >\n                                    <Icons.ArrowRight className=\"h-4 w-4 text-background\" />\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ClickRect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shouldShowResizeHandles' is defined but never used.","line":103,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'renderDimensionLabels' is assigned a value but never used.","line":301,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RectDimensions } from '@/lib/editor/engine/overlay/rect';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport { nanoid } from 'nanoid';\nimport { BaseRect } from './BaseRect';\n\nconst parseCssBoxValues = (\n    value: string,\n): {\n    adjusted: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n    original: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n} => {\n    const originalValues = value.split(' ').map((v) => parseInt(v));\n    const adjustedValues = originalValues.map((v) => Math.round(adaptValueToCanvas(v)));\n\n    let original = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    let adjusted = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n\n    switch (originalValues.length) {\n        case 1:\n            original = {\n                top: originalValues[0],\n                right: originalValues[0],\n                bottom: originalValues[0],\n                left: originalValues[0],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[0],\n                bottom: adjustedValues[0],\n                left: adjustedValues[0],\n            };\n            break;\n        case 2:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[0],\n                left: originalValues[1],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[0],\n                left: adjustedValues[1],\n            };\n            break;\n        case 4:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[2],\n                left: originalValues[3],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[2],\n                left: adjustedValues[3],\n            };\n            break;\n        default:\n            original = { top: 0, right: 0, bottom: 0, left: 0 };\n            adjusted = { top: 0, right: 0, bottom: 0, left: 0 };\n            break;\n    }\n    return { adjusted, original };\n};\n\ninterface ClickRectProps extends RectDimensions {\n    isComponent?: boolean;\n    styles: Record<string, string>;\n    shouldShowResizeHandles: boolean;\n}\n\nexport const ClickRect = ({\n    width,\n    height,\n    top,\n    left,\n    isComponent,\n    styles,\n    shouldShowResizeHandles,\n}: ClickRectProps) => {\n    const renderMarginLabels = () => {\n        if (!styles?.margin) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.margin);\n\n        const patternId = `margin-pattern-${nanoid()}`;\n        const maskId = `margin-mask-${nanoid()}`;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.blue?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.blue?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect\n                            x={-adjusted.left}\n                            y={-adjusted.top}\n                            width={width + adjusted.left + adjusted.right}\n                            height={height + adjusted.top + adjusted.bottom}\n                            fill=\"white\"\n                        />\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" />\n                    </mask>\n                </defs>\n                <rect\n                    x={-adjusted.left}\n                    y={-adjusted.top}\n                    width={width + adjusted.left + adjusted.right}\n                    height={height + adjusted.top + adjusted.bottom}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing margin labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={-adjusted.top / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height + adjusted.bottom / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={-adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width + adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderPaddingLabels = () => {\n        if (!styles?.padding) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.padding);\n\n        const patternId = `padding-pattern-${nanoid()}`;\n        const maskId = `padding-mask-${nanoid()}`;\n        const pWidth = width - adjusted.left - adjusted.right;\n        const pHeight = height - adjusted.top - adjusted.bottom;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.green?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.green?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\" />\n                        <rect\n                            x={adjusted.left}\n                            y={adjusted.top}\n                            width={pWidth}\n                            height={pHeight}\n                            fill=\"black\"\n                        />\n                    </mask>\n                </defs>\n                <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width={width}\n                    height={height}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing padding labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={adjusted.top / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height - adjusted.bottom / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width - adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderDimensionLabels = () => {\n        const rectColor = isComponent ? colors.purple?.[500] : colors.red?.[500];\n        const displayWidth = parseFloat(styles?.width || '0').toFixed(0);\n        const displayHeight = parseFloat(styles?.height || '0').toFixed(0);\n        const text = `${displayWidth} Ã— ${displayHeight}`;\n\n        // Constants from showDimensions\n        const padding = { top: 2, bottom: 2, left: 4, right: 4 };\n        const radius = 2;\n\n        // Assuming text width is roughly 80px and height is 16px (you may want to measure this dynamically)\n        const rectWidth = 80 + padding.left + padding.right;\n        const rectHeight = 16 + padding.top + padding.bottom;\n        const rectX = (width - rectWidth) / 2;\n        const rectY = height;\n\n        // Path for rounded rectangle\n        const path =\n            rectWidth > width\n                ? `M${rectX + radius},${rectY} q-${radius},0 -${radius},${radius} v${rectHeight - 2 * radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - 2 * radius} q0,-${radius} -${radius},-${radius} z`\n                : `M${rectX},${rectY} v${rectHeight - radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - radius} z`;\n\n        return (\n            <g>\n                <path d={path} fill={rectColor} />\n                <text\n                    x={width / 2}\n                    y={rectY + rectHeight / 2}\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                >\n                    {text}\n                </text>\n            </g>\n        );\n    };\n\n    return (\n        <BaseRect\n            width={width}\n            height={height}\n            top={top}\n            left={left}\n            isComponent={isComponent}\n            strokeWidth={2}\n        >\n            {renderMarginLabels()}\n            {renderPaddingLabels()}\n            {/* {renderDimensionLabels()} */}\n            {/* {shouldShowResizeHandles && (\n                <ResizeHandles\n                    width={width}\n                    height={height}\n                    left={left}\n                    top={top}\n                    borderRadius={parseInt(styles?.['borderRadius'] || '0')}\n                    isComponent={isComponent}\n                    styles={styles}\n                />\n            )} */}\n        </BaseRect>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/HoverRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/InsertRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/MeasurementOverlay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditorAttributes' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { colors } from '@onlook/ui/tokens';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { RectDimensions } from '../../../../lib/editor/engine/overlay/rect';\nimport React, { memo, useMemo } from 'react';\nimport { BaseRect } from './BaseRect';\nimport { useEditorEngine } from '@/components/Context';\nimport { adaptRectToCanvas, adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\ninterface Distance {\n    value: number;\n    start: Point;\n    end: Point;\n    supportLine?: {\n        start: Point;\n        end: Point;\n    };\n}\n\ninterface RectPoint extends RectDimensions {\n    right: number;\n    bottom: number;\n}\n\ninterface MeasurementProps {\n    fromRect: RectDimensions;\n    toRect: RectDimensions;\n}\n\nconst toRectPoint = (rect: RectDimensions): RectPoint => ({\n    ...rect,\n    right: rect.left + rect.width,\n    bottom: rect.top + rect.height,\n    width: rect.width,\n    height: rect.height,\n    left: rect.left,\n    top: rect.top,\n});\n\nconst isBetween = (x: number, start: number, end: number): boolean => {\n    return (start <= x && x <= end) || (end <= x && x <= start);\n};\n\nconst isIntersect = (rectA: RectPoint, rectB: RectPoint): boolean => {\n    if (rectA.left > rectB.right || rectB.left > rectA.right) {\n        return false;\n    }\n    if (rectA.top > rectB.bottom || rectB.top > rectA.bottom) {\n        return false;\n    }\n    return true;\n};\n\nconst getInsideRect = (rectA: RectPoint, rectB: RectPoint): RectPoint | null => {\n    if (\n        rectA.left >= rectB.left &&\n        rectA.right <= rectB.right &&\n        rectA.top >= rectB.top &&\n        rectA.bottom <= rectB.bottom\n    ) {\n        return rectA;\n    } else if (\n        rectB.left >= rectA.left &&\n        rectB.right <= rectA.right &&\n        rectB.top >= rectA.top &&\n        rectB.bottom <= rectA.bottom\n    ) {\n        return rectB;\n    }\n    return null;\n};\n\nexport const MeasurementOverlay: React.FC<MeasurementProps> = memo(({ fromRect, toRect }) => {\n    const editorEngine = useEditorEngine();\n    const webview = editorEngine.webviews.getWebview(editorEngine.elements.selected?.[0]?.webviewId);\n\n    const fromRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(fromRect, webview) : fromRect),\n        [fromRect, webview],\n    );\n    const toRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(toRect, webview) : toRect),\n        [toRect, webview],\n    );\n\n    const fromRectPoint = useMemo(() => toRectPoint(fromRect), [fromRect]);\n    const toRectPointResult = useMemo(() => toRectPoint(toRect), [toRect]);\n\n    type DistanceWithoutSupportLine = Omit<Distance, 'supportLine'>;\n\n    const createDistance = (\n        distance: DistanceWithoutSupportLine,\n        toRect: RectPoint,\n        isHorizontal: boolean,\n    ): Distance => {\n        const result: Distance = { ...distance };\n        const { start, end } = distance;\n\n        if (isHorizontal && !isBetween(start.y, toRect.top, toRect.bottom)) {\n            result.supportLine = {\n                start: { x: end.x, y: toRect.top },\n                end: { x: end.x, y: end.y },\n            };\n        } else if (!isHorizontal && !isBetween(start.x, toRect.left, toRect.right)) {\n            result.supportLine = {\n                start: { x: toRect.left, y: end.y },\n                end: { x: end.x, y: end.y },\n            };\n        }\n\n        return result;\n    };\n\n    const distances = useMemo(() => {\n        if (!webview) {\n            return [];\n        }\n        const result: Distance[] = [];\n\n        // Scale values for display\n        const scaleValue = (value: number) => adaptValueToCanvas(Math.abs(value), true);\n\n        // Calculate horizontal distances\n        let y = fromRectPoint.top + fromRectPoint.height / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                y = insideRect.top + insideRect.height / 2;\n            } else if (fromRectPoint.bottom > toRectPointResult.bottom) {\n                y = fromRectPoint.top + (toRectPointResult.bottom - fromRectPoint.top) / 2;\n            } else {\n                y = fromRectPoint.bottom - (fromRectPoint.bottom - toRectPointResult.top) / 2;\n            }\n\n            const leftDistance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                leftDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(leftDistance);\n\n            const rightDistance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                rightDistance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(rightDistance);\n        } else if (fromRectPoint.left > toRectPointResult.right) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.right),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.right < toRectPointResult.left) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.left),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.left, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.right >= toRectPointResult.left\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.right, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.left <= toRectPointResult.left\n        ) {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        } else {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                        start: { x: fromRectPoint.left, y },\n                        end: { x: toRectPointResult.left, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        }\n\n        // Calculate vertical distances\n        let x = fromRectPoint.left + fromRectPoint.width / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                x = insideRect.left + insideRect.width / 2;\n            } else if (fromRectPoint.right > toRectPointResult.right) {\n                x = fromRectPoint.left + (toRectPointResult.right - fromRectPoint.left) / 2;\n            } else {\n                x = fromRectPoint.right - (fromRectPoint.right - toRectPointResult.left) / 2;\n            }\n\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        } else if (fromRectPoint.top > toRectPointResult.bottom) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.bottom < toRectPointResult.top) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.top),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (isBetween(fromRectPoint.top, toRectPointResult.top, toRectPointResult.bottom)) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.bottom, toRectPointResult.top, toRectPointResult.bottom)\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else {\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        }\n\n        return result;\n    }, [fromRectPoint, toRectPointResult]);\n\n    const viewBox = useMemo(\n        () => ({\n            minX: Math.min(fromRectAdjusted.left, toRectAdjusted.left) - 100,\n            minY: Math.min(fromRectAdjusted.top, toRectAdjusted.top) - 100,\n            width:\n                Math.abs(toRectAdjusted.left - fromRectAdjusted.left) +\n                Math.max(fromRectAdjusted.width, toRectAdjusted.width) +\n                200,\n            height:\n                Math.abs(toRectAdjusted.top - fromRectAdjusted.top) +\n                Math.max(fromRectAdjusted.height, toRectAdjusted.height) +\n                200,\n        }),\n        [fromRectAdjusted, toRectAdjusted],\n    );\n\n    const svgContent = (\n        <g transform={`translate(${-viewBox.minX},${-viewBox.minY})`}>\n            <rect\n                x={fromRect.left}\n                y={fromRect.top}\n                width={fromRect.width}\n                height={fromRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <rect\n                x={toRect.left}\n                y={toRect.top}\n                width={toRect.width}\n                height={toRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            {/* Distance lines and labels */}\n\n            {/* Distance lines and labels */}\n            {distances.map((distance, index) => {\n                const isHorizontal = distance.start.y === distance.end.y;\n                const midX = (distance.start.x + distance.end.x) / 2 + (isHorizontal ? 24 : 0);\n                const midY = (distance.start.y + distance.end.y) / 2 + (isHorizontal ? 0 : 16);\n\n                return (\n                    <g key={index}>\n                        <line\n                            x1={distance.start.x}\n                            y1={distance.start.y}\n                            x2={distance.end.x}\n                            y2={distance.end.y}\n                            stroke={colors.red?.[500]}\n                            strokeWidth={1}\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                        />\n                        {distance.supportLine && (\n                            <line\n                                x1={distance.supportLine.start.x}\n                                y1={distance.supportLine.start.y}\n                                x2={distance.supportLine.end.x}\n                                y2={distance.supportLine.end.y}\n                                stroke={colors.red?.[500]}\n                                strokeWidth={1}\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeDasharray=\"10 6\"\n                            />\n                        )}\n                        <g transform={`translate(${midX},${midY})`}>\n                            <rect\n                                x={-20}\n                                y={-10}\n                                width={40}\n                                height={20}\n                                fill={colors.red?.[500]}\n                                rx={2}\n                            />\n                            <text\n                                x={0}\n                                y={0}\n                                fill=\"white\"\n                                fontSize={12}\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                            >\n                                {Math.round(distance.value)}\n                            </text>\n                        </g>\n                    </g>\n                );\n            })}\n        </g>\n    );\n\n    return (\n        <BaseRect\n            width={viewBox.width}\n            height={viewBox.height}\n            top={viewBox.minY}\n            left={viewBox.minX}\n            strokeWidth={0}\n        >\n            {svgContent}\n        </BaseRect>\n    );\n});\n\nMeasurementOverlay.displayName = 'MeasurementOverlay';\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":379,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'styles' is defined but never used.","line":380,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":380,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport React from 'react';\n\nenum ResizeHandlePosition {\n    TOP = 'top',\n    RIGHT = 'right',\n    BOTTOM = 'bottom',\n    LEFT = 'left',\n    TOP_LEFT = 'top-left',\n    TOP_RIGHT = 'top-right',\n    BOTTOM_RIGHT = 'bottom-right',\n    BOTTOM_LEFT = 'bottom-left',\n}\n\ninterface HandleProps {\n    x: number;\n    y: number;\n    color: string;\n    position: ResizeHandlePosition;\n    styles: Record<string, string>;\n    handleMouseDown: (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => void;\n}\n\nconst getCursorStyle = (position: ResizeHandlePosition): string => {\n    switch (position) {\n        case 'top':\n        case 'bottom':\n            return 'ns-resize';\n        case 'left':\n        case 'right':\n            return 'ew-resize';\n        case 'top-left':\n        case 'bottom-right':\n            return 'nwse-resize';\n        case 'top-right':\n        case 'bottom-left':\n            return 'nesw-resize';\n        default:\n            return 'pointer';\n    }\n};\n\nconst createCaptureOverlay = (startEvent: React.MouseEvent) => {\n    const captureOverlay = document.createElement('div');\n    captureOverlay.style.position = 'fixed';\n    captureOverlay.style.top = '0';\n    captureOverlay.style.left = '0';\n    captureOverlay.style.width = '100%';\n    captureOverlay.style.height = '100%';\n    captureOverlay.style.cursor = window.getComputedStyle(startEvent.currentTarget).cursor;\n    captureOverlay.style.zIndex = '9999';\n    document.body.appendChild(captureOverlay);\n    return captureOverlay;\n};\n\ninterface ResizeDimensions {\n    width: number;\n    height: number;\n}\n\nconst calculateNewElementDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.round(Math.max(startWidth - adjustedDeltaX, 0));\n    } else if (position.includes('right')) {\n        newWidth = Math.round(Math.max(startWidth + adjustedDeltaX, 0));\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.round(Math.max(startHeight - adjustedDeltaY, 0));\n    } else if (position.includes('bottom')) {\n        newHeight = Math.round(Math.max(startHeight + adjustedDeltaY, 0));\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\nconst calculateNewOverlayDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.max(startWidth - adjustedDeltaX, 0);\n    } else if (position.includes('right')) {\n        newWidth = Math.max(startWidth + adjustedDeltaX, 0);\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.max(startHeight - adjustedDeltaY, 0);\n    } else if (position.includes('bottom')) {\n        newHeight = Math.max(startHeight + adjustedDeltaY, 0);\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\ninterface EdgeHandleProps extends HandleProps {\n    handleDoubleClick: (e: React.MouseEvent, position: ResizeHandlePosition) => void;\n}\n\nconst EdgeHandle: React.FC<EdgeHandleProps> = ({\n    x,\n    y,\n    position,\n    styles,\n    handleMouseDown,\n    handleDoubleClick,\n}) => {\n    const size = 4;\n    const halfSize = size / 2;\n    const isVertical =\n        position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n\n    const lastClickRef = React.useRef<number>(0);\n    const DOUBLE_CLICK_TIMEOUT = 300;\n\n    const handleMouseDownRect = (e: React.MouseEvent) => {\n        const currentTime = Date.now();\n        const timeSinceLastClick = currentTime - lastClickRef.current;\n        const doubleClick = timeSinceLastClick < DOUBLE_CLICK_TIMEOUT;\n\n        if (doubleClick) {\n            handleDoubleClick(e, position);\n            lastClickRef.current = 0;\n        } else {\n            handleMouseDown(e, position, styles);\n            lastClickRef.current = currentTime;\n        }\n    };\n\n    return (\n        <rect\n            x={isVertical ? x - halfSize : 0}\n            y={isVertical ? 0 : y - halfSize}\n            width={isVertical ? size : '100%'}\n            height={isVertical ? '100%' : size}\n            fill=\"transparent\"\n            style={{ cursor: getCursorStyle(position), pointerEvents: 'auto' }}\n            onMouseDown={handleMouseDownRect}\n        />\n    );\n};\n\nconst CornerHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: getCursorStyle(position),\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            {/* Invisible larger circle for hit area */}\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n        </g>\n    );\n};\n\nconst RadiusHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: 'nwse-resize',\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n            <circle cx={halfSize} cy={halfSize} r={1.5} fill={color} />\n        </g>\n    );\n};\n\ninterface ResizeHandlesProps {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n    borderRadius: number;\n    isComponent?: boolean;\n    styles: Record<string, string>;\n}\n\nexport const ResizeHandles: React.FC<ResizeHandlesProps> = ({\n    width,\n    height,\n    borderRadius,\n    isComponent,\n    styles,\n}) => {\n    const editorEngine = useEditorEngine();\n    const color = isComponent ? colors.purple?.[500] : colors.red?.[500];\n\n    // Calculate radius handle position (20px or 25% of width/height, whichever is smaller)\n    const radiusOffset = Math.min(20, width * 0.25, height * 0.25);\n    const showRadius = width >= 10 && height >= 10;\n\n    const updateWidth = (newWidth: string) => {\n        editorEngine.style.update('width', newWidth);\n    };\n\n    const updateHeight = (newHeight: string) => {\n        editorEngine.style.update('height', newHeight);\n    };\n\n    const updateWidthHeight = (newWidth: string, newHeight: string) => {\n        editorEngine.style.updateMultiple({\n            width: newWidth,\n            height: newHeight,\n        });\n    };\n\n    const updateRadius = (newRadius: string) => {\n        editorEngine.style.update('border-radius', newRadius);\n    };\n\n    const handleDoubleClick = (e: React.MouseEvent, position: ResizeHandlePosition) => {\n        const isVertical =\n            position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n        const targetValue = e.altKey ? '100%' : 'fit-content';\n        if (isVertical) {\n            editorEngine.style.update('width', targetValue);\n        } else {\n            editorEngine.style.update('height', targetValue);\n        }\n    };\n\n    const handleMouseDownDimensions = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startDimensions = {\n            width: parseFloat(styles.width),\n            height: parseFloat(styles.height),\n        };\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n            const adjustedDelta = {\n                x: adaptValueToCanvas(deltaX, true),\n                y: adaptValueToCanvas(deltaY, true),\n            };\n\n            const newElementDimensions = calculateNewElementDimensions(\n                position,\n                startDimensions,\n                adjustedDelta,\n            );\n            const newOverlayDimensions = calculateNewOverlayDimensions(\n                position,\n                { width, height },\n                {\n                    x: deltaX,\n                    y: deltaY,\n                },\n            );\n\n            const widthChanged = newElementDimensions.width !== startDimensions.width;\n            const heightChanged = newElementDimensions.height !== startDimensions.height;\n\n            if (widthChanged && heightChanged) {\n                updateWidthHeight(\n                    `${newElementDimensions.width}px`,\n                    `${newElementDimensions.height}px`,\n                );\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                    height: newOverlayDimensions.height,\n                });\n            } else if (widthChanged) {\n                updateWidth(`${newElementDimensions.width}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                });\n            } else if (heightChanged) {\n                updateHeight(`${newElementDimensions.height}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    height: newOverlayDimensions.height,\n                });\n            }\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    const handleMouseDownRadius = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startRadius = borderRadius;\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n\n            // Use the larger of the two deltas for a more natural radius adjustment\n            const delta = Math.max(Math.abs(deltaX), Math.abs(deltaY)) * Math.sign(deltaX + deltaY);\n            const adjustedDelta = adaptValueToCanvas(delta, true);\n\n            const newRadius = Math.max(0, startRadius + adjustedDelta);\n            updateRadius(`${Math.round(newRadius)}px`);\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <>\n            {/* Edge handles */}\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={0}\n                position={ResizeHandlePosition.TOP}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width}\n                y={height / 2}\n                position={ResizeHandlePosition.RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={0}\n                y={height / 2}\n                position={ResizeHandlePosition.LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n\n            {/* Corner handles */}\n            <CornerHandle\n                color={color}\n                x={0}\n                y={0}\n                position={ResizeHandlePosition.TOP_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={0}\n                position={ResizeHandlePosition.TOP_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={0}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n\n            {showRadius && (\n                <RadiusHandle\n                    color={color}\n                    x={radiusOffset}\n                    y={radiusOffset}\n                    position={ResizeHandlePosition.TOP_LEFT}\n                    styles={styles}\n                    handleMouseDown={handleMouseDownRadius}\n                />\n            )}\n        </>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/TextEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/PanOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/ChatHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":270,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":317,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { FOCUS_CHAT_INPUT_EVENT } from '@/lib/editor/engine/chat';\nimport { EditorTabValue } from '@/lib/models';\nimport { compressImage } from '@/lib/utils';\nimport type { ChatMessageContext, ImageMessageContext } from '@onlook/models/chat';\nimport { MessageContextType } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { AnimatePresence } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { DraftContextPill } from './ContextPills/DraftContextPill';\nimport { DraftImagePill } from './ContextPills/DraftingImagePill';\nimport type { SuggestionsRef } from './Suggestions';\nimport Suggestions from './Suggestions';\n\nexport const ChatInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const [inputValue, setInputValue] = useState('');\n    const [isComposing, setIsComposing] = useState(false);\n    const [actionTooltipOpen, setActionTooltipOpen] = useState(false);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const focusInput = () => {\n        requestAnimationFrame(() => {\n            textareaRef.current?.focus();\n        });\n    };\n\n    useEffect(() => {\n        if (textareaRef.current && !editorEngine.chat.isWaiting) {\n            focusInput();\n        }\n    }, [editorEngine.chat.conversation.current?.messages.length]);\n\n    useEffect(() => {\n        if (editorEngine.editPanelTab === EditorTabValue.CHAT) {\n            focusInput();\n        }\n    }, [editorEngine.editPanelTab]);\n\n    useEffect(() => {\n        const focusHandler = () => {\n            if (textareaRef.current && !editorEngine.chat.isWaiting) {\n                focusInput();\n            }\n        };\n\n        window.addEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n        return () => window.removeEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n    }, []);\n\n    useEffect(() => {\n        const handleGlobalKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && suggestionRef.current?.handleEnterSelection()) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Stop the event from bubbling to the canvas\n                e.stopImmediatePropagation();\n                // Handle the suggestion selection\n                suggestionRef.current.handleEnterSelection();\n            }\n        };\n\n        // Capture phase to intercept before it reaches the canvas\n        window.addEventListener('keydown', handleGlobalKeyDown, true);\n        return () => window.removeEventListener('keydown', handleGlobalKeyDown, true);\n    }, []);\n\n    const disabled = editorEngine.chat.isWaiting || editorEngine.chat.context.context.length === 0;\n    const inputEmpty = !inputValue || inputValue.trim().length === 0;\n\n    function handleInput(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        if (isComposing) {\n            return;\n        }\n        e.currentTarget.style.height = 'auto';\n        e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Tab') {\n            // Always prevent default tab behavior\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Only let natural tab order continue if handleTabNavigation returns false\n            const handled = suggestionRef.current?.handleTabNavigation();\n            if (!handled) {\n                // Focus the textarea\n                textareaRef.current?.focus();\n            }\n        } else if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (suggestionRef.current?.handleEnterSelection()) {\n                setTimeout(() => textareaRef.current?.focus(), 0);\n                return;\n            }\n\n            if (!inputEmpty) {\n                sendMessage();\n            }\n        }\n    };\n\n    function sendMessage() {\n        if (inputEmpty) {\n            console.warn('Empty message');\n            return;\n        }\n        if (editorEngine.chat.isWaiting) {\n            console.warn('Already waiting for response');\n            return;\n        }\n        editorEngine.chat.sendNewMessage(inputValue);\n        setInputValue('');\n    }\n\n    const handleRemoveContext = (contextToRemove: ChatMessageContext) => {\n        const newContext = [...editorEngine.chat.context.context].filter(\n            (context) => context !== contextToRemove,\n        );\n\n        editorEngine.chat.context.context = newContext;\n    };\n\n    const handleOpenFileDialog = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.currentTarget.blur(); // Removes focus from the button to prevent tooltip from showing\n        const inputElement = document.createElement('input');\n        inputElement.type = 'file';\n        inputElement.accept = 'image/*';\n        inputElement.onchange = () => {\n            if (inputElement.files && inputElement.files.length > 0) {\n                const file = inputElement.files?.[0];\n                const fileName = file.name;\n                handleImageEvent(file, fileName);\n            }\n        };\n        inputElement.click();\n    };\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n        const items = e.clipboardData.items;\n\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                e.preventDefault();\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Pasted image');\n                break;\n            }\n        }\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.removeAttribute('data-dragging-image');\n\n        const items = e.dataTransfer.items;\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Dropped image');\n                break;\n            }\n        }\n    };\n\n    const handleImageEvent = async (file: File, displayName?: string) => {\n        const reader = new FileReader();\n        reader.onload = async (event) => {\n            const compressedImage = await compressImage(file);\n            const base64URL = compressedImage || (event.target?.result as string);\n            const contextImage: ImageMessageContext = {\n                type: MessageContextType.IMAGE,\n                content: base64URL,\n                mimeType: file.type,\n                displayName: displayName || file.name,\n            };\n            editorEngine.chat.context.context.push(contextImage);\n        };\n        reader.readAsDataURL(file);\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            e.currentTarget.setAttribute('data-dragging-image', isDragging.toString());\n        }\n    };\n\n    const suggestionRef = useRef<SuggestionsRef>(null);\n\n    return (\n        <div\n            className={cn(\n                'flex flex-col w-full text-foreground-tertiary border-t text-small transition-colors duration-200',\n                '[&[data-dragging-image=true]]:bg-teal-500/40',\n                isDragging && 'cursor-copy',\n            )}\n            onDrop={(e) => {\n                handleDrop(e);\n                setIsDragging(false);\n            }}\n            onDragOver={handleDragOver}\n            onDragEnter={(e) => {\n                e.preventDefault();\n                handleDragStateChange(true, e);\n            }}\n            onDragLeave={(e) => {\n                if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                    handleDragStateChange(false, e);\n                }\n            }}\n        >\n            <Suggestions\n                ref={suggestionRef}\n                disabled={disabled}\n                inputValue={inputValue}\n                setInput={(suggestion) => {\n                    setInputValue(suggestion);\n                    textareaRef.current?.focus();\n                    setTimeout(() => {\n                        if (textareaRef.current) {\n                            textareaRef.current.scrollTop = textareaRef.current.scrollHeight;\n                        }\n                    }, 100);\n                }}\n                onSuggestionFocus={(isFocused) => {\n                    if (!isFocused) {\n                        textareaRef.current?.focus();\n                    }\n                }}\n            />\n\n            <div className=\"flex flex-col w-full p-4\">\n                <div\n                    className={cn(\n                        'flex flex-row flex-wrap w-full gap-1.5 text-micro mb-1 text-foreground-secondary',\n                        editorEngine.chat.context.context.length > 0 ? 'min-h-6' : 'h-0',\n                    )}\n                >\n                    <AnimatePresence mode=\"popLayout\">\n                        {editorEngine.chat.context.context.map(\n                            (context: ChatMessageContext, index: number) => {\n                                if (context.type === MessageContextType.IMAGE) {\n                                    return (\n                                        <DraftImagePill\n                                            key={`image-${context.content}`}\n                                            context={context}\n                                            onRemove={() => handleRemoveContext(context)}\n                                        />\n                                    );\n                                }\n                                return (\n                                    <DraftContextPill\n                                        key={`${context.type}-${context.content}`}\n                                        context={context}\n                                        onRemove={() => handleRemoveContext(context)}\n                                    />\n                                );\n                            },\n                        )}\n                    </AnimatePresence>\n                </div>\n                <Textarea\n                    ref={textareaRef}\n                    disabled={disabled}\n                    placeholder={\n                        disabled\n                            ? projectsManager.runner?.isRunning ||\n                              projectsManager.runner?.isStarting\n                                ? 'Select an element to chat'\n                                : 'Start the project to chat'\n                            : 'Ask follow up questions or provide more context...'\n                    }\n                    className={cn(\n                        'mt-2 overflow-auto max-h-32 text-small p-0 border-0 shadow-none rounded-none caret-[#FA003C]',\n                        'selection:bg-[#FA003C]/30 selection:text-[#FA003C] text-foreground-primary',\n                        'placeholder:text-foreground-primary/50',\n                        'cursor-text',\n                        isDragging ? 'pointer-events-none' : 'pointer-events-auto',\n                    )}\n                    rows={3}\n                    style={{ resize: 'none' }}\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onInput={handleInput}\n                    onKeyDown={handleKeyDown}\n                    onPaste={handlePaste}\n                    onCompositionStart={() => setIsComposing(true)}\n                    onCompositionEnd={(e) => {\n                        setIsComposing(false);\n                    }}\n                    onDragEnter={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragenter', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragOver={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragover', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragLeave={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                            e.currentTarget.parentElement?.dispatchEvent(\n                                new DragEvent('dragleave', {\n                                    bubbles: true,\n                                    cancelable: true,\n                                    dataTransfer: e.dataTransfer,\n                                }),\n                            );\n                        }\n                    }}\n                    onDrop={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('drop', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                />\n            </div>\n            <div className=\"flex flex-row w-full justify-between pt-2 pb-2 px-2\">\n                <div className=\"flex flex-row justify-start gap-1.5\">\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={handleOpenFileDialog}\n                                disabled={disabled}\n                            >\n                                <Icons.Image\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled ? 'Select an element to start' : 'Upload Image Reference'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={() => {\n                                    editorEngine.chat.context.addScreenshotContext();\n                                }}\n                                disabled={disabled}\n                            >\n                                <Icons.Laptop\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled\n                                    ? 'Select an element to start'\n                                    : 'Add screenshot of the current page'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Button\n                        variant={'outline'}\n                        className=\"w-fit h-fit py-0.5 px-2.5 text-foreground-tertiary hidden\"\n                    >\n                        <Icons.FilePlus className=\"mr-2\" />\n                        <span className=\"text-smallPlus\">File Reference</span>\n                    </Button>\n                </div>\n                {editorEngine.chat.isWaiting ? (\n                    <Tooltip open={actionTooltipOpen} onOpenChange={setActionTooltipOpen}>\n                        <TooltipTrigger asChild>\n                            <Button\n                                size={'icon'}\n                                variant={'secondary'}\n                                className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                                onClick={() => {\n                                    setActionTooltipOpen(false);\n                                    editorEngine.chat.stopStream();\n                                }}\n                            >\n                                <Icons.Stop />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>{'Stop response'}</TooltipContent>\n                    </Tooltip>\n                ) : (\n                    <Button\n                        size={'icon'}\n                        variant={'secondary'}\n                        className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                        disabled={inputEmpty || editorEngine.chat.isWaiting}\n                        onClick={sendMessage}\n                    >\n                        <Icons.ArrowRight />\n                    </Button>\n                )}\n            </div>\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/AssistantMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/MarkdownRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":35,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":41,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@onlook/ui/utils';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport CodeChangeDisplay from '../CodeChangeDisplay';\nimport BashCodeDisplay from '../CodeChangeDisplay/BashCodeDisplay';\n\nconst MarkdownRenderer = ({\n    messageId,\n    content,\n    className = '',\n    applied,\n    isStream = false,\n}: {\n    messageId: string;\n    content: string;\n    className?: string;\n    applied: boolean;\n    isStream?: boolean;\n}) => {\n    const transformedContent = content.replace(\n        /^(.*?)\\n```(\\w+)\\n/gm,\n        (_, filePath, language) => `\\`\\`\\`${language}:${filePath}\\n`,\n    );\n\n    return (\n        <div\n            className={cn(\n                'prose prose-stone dark:prose-invert prose-compact text-small break-words',\n                className,\n            )}\n        >\n            <ReactMarkdown\n                remarkPlugins={[remarkGfm]}\n                components={{\n                    pre: ({ node, ...props }) => (\n                        <pre\n                            className=\"m-0 p-0 mb-2 rounded-lg bg-none border-0.5 border-border-primary\"\n                            {...props}\n                        />\n                    ),\n                    code({ node, className, children, ...props }) {\n                        const match = /language-(\\w+)(:?.+)?/.exec(className || '');\n                        const language = match?.[1];\n                        const filePath = match?.[2]?.substring(1);\n                        const codeContent = String(children).replace(/\\n$/, '');\n\n                        if (language === 'bash') {\n                            return <BashCodeDisplay content={codeContent} isStream={isStream} />;\n                        }\n\n                        if (match && filePath) {\n                            return (\n                                <CodeChangeDisplay\n                                    path={filePath}\n                                    content={codeContent}\n                                    messageId={messageId}\n                                    applied={applied}\n                                    isStream={isStream}\n                                />\n                            );\n                        }\n\n                        return (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        );\n                    },\n                }}\n            >\n                {transformedContent}\n            </ReactMarkdown>\n        </div>\n    );\n};\n\nexport default MarkdownRenderer;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/StreamMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/UserMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/BashCodeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeDiff.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CollapsibleCodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftingImagePill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/SentContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ErrorView/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/Suggestions/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/BooleanProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/CodeProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/TextProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":135,"column":49,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":140,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":163,"column":53,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":170,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { PropsType, type DomElement, type PropsParsingResult } from '@onlook/models/element';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\nimport BooleanProp from './BooleanProp';\nimport CodeProp from './CodeProp';\nimport TextProp from './TextProp';\n\nexport interface Prop {\n    type: PropsType;\n    displayType?: string;\n    value: string | boolean;\n    icon?: React.ReactNode;\n}\n\nconst PropsTab = () => {\n    const [props, setProps] = useState<{ [key: string]: Prop } | null>({});\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n\n    const editorEngine = useEditorEngine();\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            getRootProps(selectedEl);\n        }\n    }, [editorEngine.elements.selected]);\n\n    async function getRootProps(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootProps: PropsParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_PROPS,\n                newRoot,\n            );\n\n            if (rootProps.type === 'props' && rootProps.props.length > 0) {\n                const elementProps: Record<string, Prop> = {};\n                rootProps.props.forEach((prop) => {\n                    const newProp: Prop = {\n                        type: prop.type,\n                        value: prop.value,\n                    };\n                    elementProps[prop.key] = newProp;\n                });\n                setProps(elementProps);\n            } else {\n                setProps(null);\n            }\n        }\n    }\n\n    const createCodeDiffRequest = async (\n        oid: string | undefined,\n        value: string | number | boolean,\n        name: string,\n    ) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n\n        request.push({\n            oid,\n            attributes: { [name]: value },\n            textContent: null,\n            overrideClasses: false,\n            structureChanges: [],\n        });\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('attributes action');\n        }\n    };\n\n    function viewSource() {\n        if (selectedEl?.oid) {\n            editorEngine.code.viewSource(selectedEl?.oid);\n        }\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2 px-3 w-full\">\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs\">Detected Properties</span>\n                <Button size={'icon'} variant={'ghost'}>\n                    <Icons.Plus />\n                </Button>\n            </div>\n            <div className=\"flex flex-col gap-4 mb-5\">\n                {props !== null &&\n                    Object.keys(props).map((key) => {\n                        const prop = props[key];\n                        return (\n                            <div className=\"flex flex-row items-center\" key={key}>\n                                <div className=\"flex flex-row gap-2 items-center\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"text-sm\">{key}</span>\n                                        <span className=\"text-xs text-foreground-secondary\">\n                                            {prop.displayType ? prop.displayType : prop.type}\n                                        </span>\n                                    </div>\n                                </div>\n                                <div className=\"text-end ml-auto\">\n                                    {prop.type === 'code' ? (\n                                        <CodeProp onClick={viewSource} />\n                                    ) : prop.type === 'boolean' ? (\n                                        <BooleanProp\n                                            value={prop.value as boolean}\n                                            change={(value) => {\n                                                setProps((prev) =>\n                                                    prev !== null\n                                                        ? {\n                                                              ...prev,\n                                                              [key]: {\n                                                                  ...prev[key],\n                                                                  value,\n                                                              },\n                                                          }\n                                                        : null,\n                                                );\n                                                selectedEl?.oid &&\n                                                    createCodeDiffRequest(\n                                                        selectedEl?.oid,\n                                                        value,\n                                                        key,\n                                                    );\n                                            }}\n                                        />\n                                    ) : (\n                                        (prop.type === PropsType.String ||\n                                            prop.type === PropsType.Number) && (\n                                            <TextProp\n                                                prop={prop}\n                                                type={prop.type}\n                                                onChange={(value) => {\n                                                    setProps((prev) =>\n                                                        prev !== null\n                                                            ? {\n                                                                  ...prev,\n                                                                  [key]: {\n                                                                      ...prev[key],\n                                                                      value,\n                                                                  },\n                                                              }\n                                                            : null,\n                                                    );\n                                                }}\n                                                onBlur={(val) => {\n                                                    selectedEl?.oid &&\n                                                        createCodeDiffRequest(\n                                                            selectedEl?.oid,\n                                                            prop.type === PropsType.Number\n                                                                ? parseInt(val)\n                                                                : val,\n                                                            key,\n                                                        );\n                                                }}\n                                            />\n                                        )\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n        </div>\n    );\n};\n\nexport default PropsTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/BorderInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/DisplayInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/FillInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/GridRowColInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/NestedInputs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/PositionInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { CompoundStyleImpl } from '@/lib/editor/styles';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport TextInput from '../single/TextInput';\nimport { cn } from '@onlook/ui/utils';\nimport SelectInput from '../single/SelectInput';\nimport { Icons } from '@onlook/ui/icons/index';\nimport type { DomElement } from '@onlook/models/element';\n\ntype Position = 'top' | 'bottom' | 'left' | 'right';\ntype PositionState = Record<Position, boolean>;\n\ninterface LineProps {\n    position: Position;\n    isActive: boolean;\n    onClick: (position: Position) => void;\n}\n\nconst PositionLine = ({ position, isActive, onClick }: LineProps) => {\n    const positionStyles = {\n        top: 'top-0.5 w-[calc(100%-16px)] left-[8px]',\n        right: 'right-0.5 h-[calc(100%-16px)] top-[8px]',\n        bottom: 'bottom-0.5 w-[calc(100%-16px)] left-[8px]',\n        left: 'left-0.5 h-[calc(100%-16px)] top-[8px]',\n    };\n\n    const lineStyles = {\n        top: 'w-1 h-3',\n        right: 'h-1 w-3',\n        bottom: 'w-1 h-3',\n        left: 'h-1 w-3',\n    };\n\n    return (\n        <div\n            className={cn(\n                'absolute cursor-pointer transition-colors flex items-center justify-center ',\n                positionStyles[position],\n            )}\n            onClick={() => onClick(position)}\n        >\n            <div\n                className={cn(\n                    'rounded-full',\n                    lineStyles[position],\n                    isActive\n                        ? 'bg-red-500 hover:bg-red-600'\n                        : 'bg-background-active hover:bg-primary',\n                )}\n            />\n        </div>\n    );\n};\n\nconst CenterButton = ({ isCenter, onClick }: { isCenter: boolean; onClick: () => void }) => (\n    <div\n        className=\"bg-background-onlook rounded relative flex items-center justify-center px-2 py-2 border border-background-active\"\n        onClick={onClick}\n    >\n        <Icons.Plus\n            className={cn(\n                'w-4 h-4 hover:text-red-500 transition-colors hover:cursor-pointer hover:scale-110',\n                isCenter ? 'text-red-500' : 'text-gray-400',\n            )}\n        />\n    </div>\n);\n\nconst PositionInput = observer(({ compoundStyle }: { compoundStyle: CompoundStyleImpl }) => {\n    const editorEngine = useEditorEngine();\n    const [lines, setLines] = useState<PositionState>({\n        top: false,\n        bottom: false,\n        left: false,\n        right: false,\n    });\n    const [isCentered, setIsCentered] = useState(false);\n\n    const resetPositionState = () => {\n        setLines({\n            top: false,\n            bottom: false,\n            left: false,\n            right: false,\n        });\n    };\n\n    const onLineClicked = (position: Position) => {\n        setLines((prev) => {\n            const newState = { ...prev, [position]: !prev[position], center: false };\n            if (!newState[position]) {\n                editorEngine.style.update(position, 'auto');\n            }\n            return newState;\n        });\n    };\n\n    const onMainValueChanged = (key: string, value: string) => {\n        if (value === 'absolute') {\n            centerElement();\n        } else {\n            editorEngine.style.updateStyleNoAction(\n                Object.fromEntries(\n                    compoundStyle.children.map((elementStyle) => [elementStyle.key, 'auto']),\n                ),\n            );\n            resetPositionState();\n        }\n    };\n\n    const getElementAndParent = async () => {\n        const elements = editorEngine.elements.selected;\n        if (elements.length === 0) {\n            return null;\n        }\n\n        const results = [];\n        for (const element of elements) {\n            if (!element?.domId) {\n                continue;\n            }\n\n            const webview = editorEngine.webviews.getWebview(element.webviewId);\n            if (!webview) {\n                continue;\n            }\n\n            const parent: DomElement | null = await webview.executeJavaScript(\n                `window.api?.getParentElement('${element.domId}')`,\n            );\n            if (!parent) {\n                continue;\n            }\n\n            results.push({ element, parent });\n        }\n\n        return results.length > 0 ? results : null;\n    };\n\n    const centerElement = async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return;\n        }\n        if (isCentered) {\n            return;\n        }\n\n        const updates: Record<string, string> = {};\n        for (const { element, parent } of elementPairs) {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n\n            updates.left = `${Math.round(centerX)}px`;\n            updates.top = `${Math.round(centerY)}px`;\n        }\n\n        editorEngine.style.updateMultiple(updates);\n    };\n\n    const checkIfCentered = useCallback(async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return false;\n        }\n\n        const allCentered = elementPairs.every(({ element, parent }) => {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n            const currentLeft = element.rect.x - parent.rect.x;\n            const currentTop = element.rect.y - parent.rect.y;\n\n            return Math.abs(currentLeft - centerX) < 1 && Math.abs(currentTop - centerY) < 1;\n        });\n\n        setIsCentered(allCentered);\n        return allCentered;\n    }, [editorEngine.style.selectedStyle]);\n\n    const renderMainControl = () => (\n        <div className=\"flex flex-row items-center justify-between w-full\">\n            <p className=\"text-xs text-foreground-onlook\">{compoundStyle.head.displayName}</p>\n            <div className=\"flex flex-row space-x-1\">\n                <SelectInput elementStyle={compoundStyle.head} onValueChange={onMainValueChanged} />\n            </div>\n        </div>\n    );\n\n    const renderLines = useCallback(() => {\n        return (\n            <div className=\"w-16 h-16 bg-background-onlook rounded relative flex items-center justify-center px-4 py-4\">\n                <CenterButton isCenter={isCentered} onClick={centerElement} />\n                {(['top', 'right', 'bottom', 'left'] as Position[]).map((position) => (\n                    <PositionLine\n                        key={position}\n                        position={position}\n                        isActive={lines[position]}\n                        onClick={onLineClicked}\n                    />\n                ))}\n            </div>\n        );\n    }, [lines, centerElement, isCentered]);\n\n    const renderPositionInputs = useCallback(() => {\n        const elementStyles = compoundStyle.children;\n        const currentPosition = compoundStyle.head.getValue(\n            editorEngine.style.selectedStyle?.styles || {},\n        );\n\n        if (currentPosition !== 'absolute') {\n            return null;\n        }\n\n        const positionStyles = {\n            top: 'top-0 left-1/2 -translate-x-1/2',\n            bottom: 'bottom-0 left-1/2 -translate-x-1/2',\n            left: 'left-0 top-1/2 -translate-y-1/2',\n            right: 'right-0 top-1/2 -translate-y-1/2',\n        };\n\n        return (\n            <div className=\"relative h-36 w-52 flex items-center justify-center mb-4 mx-auto\">\n                {elementStyles.map((elementStyle) => {\n                    const position = elementStyle.key.toLowerCase() as Position;\n                    const isActive = lines[position];\n\n                    return (\n                        <TextInput\n                            key={elementStyle.key}\n                            elementStyle={elementStyle}\n                            disabled={!isActive}\n                            className={cn(\n                                'absolute w-16 bg-background-onlook text-foreground-onlook text-center rounded p-2',\n                                positionStyles[position],\n                                !isActive && 'opacity-50 cursor-not-allowed',\n                            )}\n                        />\n                    );\n                })}\n                {renderLines()}\n            </div>\n        );\n    }, [compoundStyle.children, editorEngine.style.selectedStyle, lines, renderLines]);\n\n    useEffect(() => {\n        const updatePosition = async () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n\n            const position = selectedStyle.styles?.['position'];\n\n            if (position === 'absolute') {\n                setLines({\n                    top: selectedStyle.styles?.['top'] !== 'auto',\n                    bottom: selectedStyle.styles?.['bottom'] !== 'auto',\n                    left: selectedStyle.styles?.['left'] !== 'auto',\n                    right: selectedStyle.styles?.['right'] !== 'auto',\n                });\n            }\n        };\n\n        checkIfCentered();\n        updatePosition();\n    }, [editorEngine.style.selectedStyle]);\n\n    return (\n        <div className=\"space-y-2\">\n            {renderMainControl()}\n            {renderPositionInputs()}\n        </div>\n    );\n});\n\nexport default PositionInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/AutoLayoutInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ImagePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/Popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/NumberUnitInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":42,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":42,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":124,"column":25,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":124,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { observer } from 'mobx-react-lite';\nimport { type ChangeEvent, useEffect, useState } from 'react';\n\nconst NumberUnitInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [numberValue, setNumberValue] = useState<string>('');\n        const [unitValue, setUnitValue] = useState<string>('');\n        const [prevNumberValue, setPrevNumberValue] = useState<string>('');\n\n        useEffect(() => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(selectedStyle.styles);\n            const { numberVal, unitVal } = stringToParsedValue(\n                newValue,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        }, [editorEngine.style.selectedStyle]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const handleNumberInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n            setNumberValue(e.currentTarget.value);\n\n            const newNumber = e.currentTarget.value;\n            const parsedNewNumber = Number.parseFloat(newNumber);\n            const { min, max } = elementStyle.params || {};\n\n            if (min !== undefined && parsedNewNumber < min) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            if (max !== undefined && parsedNewNumber > max) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be more than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            const { unitVal } = stringToParsedValue(\n                e.currentTarget.value,\n                elementStyle.key === 'opacity',\n            );\n            const newUnit = unitVal === '' ? 'px' : unitVal;\n            setUnitValue(newUnit);\n        };\n\n        const handleUnitInputChange = (e: ChangeEvent<HTMLSelectElement>) => {\n            const newUnit = e.currentTarget.value;\n            const newValue = parsedValueToString(numberValue, newUnit);\n            setUnitValue(newUnit);\n            sendStyleUpdate(newValue);\n        };\n\n        const setValueCallback = (value: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(\n                value,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            if (e.currentTarget.value !== prevNumberValue) {\n                const value = parsedValueToString(\n                    Number.parseFloat(numberValue).toString(),\n                    unitValue,\n                );\n                sendStyleUpdate(value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n\n        const renderNumberInput = () => {\n            return (\n                <input\n                    type=\"text\"\n                    placeholder=\"--\"\n                    value={numberValue}\n                    onKeyDown={(e) =>\n                        handleNumberInputKeyDown(\n                            e,\n                            elementStyle,\n                            parsedValueToString(numberValue, unitValue),\n                            setValueCallback,\n                            sendStyleUpdate,\n                        )\n                    }\n                    onChange={handleNumberInputChange}\n                    className=\"w-full p-[6px] px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                    onFocus={() => {\n                        setPrevNumberValue(numberValue);\n                        editorEngine.history.startTransaction;\n                    }}\n                    onBlur={handleBlur}\n                />\n            );\n        };\n\n        const renderUnitInput = () => {\n            return (\n                <div className=\"relative w-full group\">\n                    <select\n                        value={unitValue}\n                        className=\"p-[6px] w-full px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start appearance-none focus:outline-none focus:ring-0\"\n                        onChange={handleUnitInputChange}\n                    >\n                        {elementStyle.params?.units?.map((option) => (\n                            <option key={option} value={option}>\n                                {option}\n                            </option>\n                        ))}\n                    </select>\n                    <div className=\"text-foreground-onlook group-hover:text-foreground-hover absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                        <Icons.ChevronDown />\n                    </div>\n                </div>\n            );\n        };\n\n        return (\n            <div className=\"flex flex-row gap-1 justify-end text-xs w-32\">\n                {renderNumberInput()}\n                {renderUnitInput()}\n            </div>\n        );\n    },\n);\n\nexport default NumberUnitInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/SelectInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":80,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":80,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport { Icons } from '@onlook/ui/icons';\nimport { ToggleGroup, ToggleGroupItem } from '@onlook/ui/toggle-group';\nimport { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\n\nconst OVERRIDE_OPTIONS: Record<string, string | undefined> = {\n    'flex-start': 'start',\n    'flex-end': 'end',\n    'space-between': 'stretch',\n    'space-around': 'around',\n    'space-evenly': 'evenly',\n    'flex-start flex-end': 'between',\n    'flex-start flex-start': 'around',\n    'flex-end flex-end': 'evenly',\n};\n\nconst OVERRIDE_ICONS: Record<string, JSX.Element | string | Record<string, JSX.Element>> = {\n    'flex-start': <Icons.ArrowRight />,\n    'flex-end': <Icons.ArrowDown />,\n    'space-between': <Icons.ArrowRight />,\n    'space-around': <Icons.ArrowRight />,\n    'space-evenly': <Icons.ArrowRight />,\n    'flex-start flex-end': <Icons.ArrowRight />,\n    'flex-start flex-start': <Icons.ArrowRight />,\n    'flex-end flex-end': <Icons.ArrowRight />,\n    start: <Icons.TextAlignLeft />,\n    center: <Icons.TextAlignCenter />,\n    end: <Icons.TextAlignRight />,\n    solid: <Icons.BorderSolid />,\n    dashed: <Icons.BorderDashed />,\n    dotted: <Icons.BorderDotted />,\n    row: <Icons.ArrowRight />,\n    column: <Icons.ArrowDown />,\n    block: '--',\n    justifyContent: {\n        'flex-start': <Icons.AlignLeft />,\n        center: <Icons.AlignCenterHorizontally />,\n        'flex-end': <Icons.AlignRight />,\n        'space-between': <Icons.SpaceBetweenHorizontally />,\n        stretch: <Icons.SpaceBetweenHorizontally />,\n    },\n    alignItems: {\n        'flex-start': <Icons.AlignTop />,\n        center: <Icons.AlignCenterVertically />,\n        'flex-end': <Icons.AlignBottom />,\n        'space-between': <Icons.SpaceBetweenVertically />,\n        stretch: <Icons.SpaceBetweenVertically />,\n    },\n};\n\nconst ICON_SELECTION = ['justifyContent', 'alignItems'];\n\nconst SelectInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n\n        useEffect(() => {\n            if (!editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle]);\n\n        const handleValueChange = (newValue: string) => {\n            if (!newValue) {\n                return;\n            }\n            setValue(newValue);\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const getFlexDirection = () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return 'row'; // default to row\n            }\n            return selectedStyle.styles?.['flexDirection'] ?? 'row'; // fallback to row if undefined\n        };\n\n        const getIcon = (option: string) => {\n            const flexDirection = getFlexDirection();\n            if (elementStyle.key === 'justifyContent') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option];\n            } else if (elementStyle.key === 'alignItems') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option];\n            }\n            const icon = OVERRIDE_ICONS[option];\n            if (typeof icon === 'object' && !React.isValidElement(icon)) {\n                return null;\n            }\n            return icon || option;\n        };\n\n        if (!elementStyle.params?.options) {\n            return null;\n        }\n\n        if (elementStyle.params.options.length <= 3 || ICON_SELECTION.includes(elementStyle.key)) {\n            return (\n                <ToggleGroup\n                    className={`w-32 overflow-hidden ${\n                        ICON_SELECTION.includes(elementStyle.key) ? 'gap-0.75' : ''\n                    }`}\n                    size=\"sm\"\n                    type=\"single\"\n                    value={value}\n                    onValueChange={handleValueChange}\n                >\n                    {elementStyle.params?.options.map((option) => (\n                        <ToggleGroupItem\n                            className=\"capitalize text-xs data-[state=on]:bg-background-onlook/75 data-[state=on]:text-foreground-active hover:text-foreground-hover\"\n                            value={option}\n                            key={option}\n                        >\n                            {getIcon(option)}\n                        </ToggleGroupItem>\n                    ))}\n                </ToggleGroup>\n            );\n        }\n\n        return (\n            <div className=\"relative w-32\">\n                <select\n                    name={elementStyle.displayName}\n                    value={value}\n                    className=\"p-[6px] w-full px-2 text-start rounded border-none text-xs text-active bg-background-onlook/75 appearance-none focus:outline-none focus:ring-0 capitalize\"\n                    onChange={(event) => handleValueChange(event.currentTarget.value)}\n                >\n                    {!elementStyle.params.options.includes(value) && (\n                        <option value={value}>{value}</option>\n                    )}\n                    {elementStyle.params.options.map((option) => (\n                        <option value={option} key={option}>\n                            {OVERRIDE_OPTIONS[option] ?? option}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"text-foreground-onlook absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                    <Icons.ChevronDown />\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default SelectInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TagDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/AutoComplete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":435,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":437,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":458,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":460,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":535,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":537,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":558,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":560,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { StyleMode } from '@/lib/editor/engine/style';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models/code';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { ClassParsingResult, DomElement } from '@onlook/models/element';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport { AutoComplete, type SuggestionsListRef } from './AutoComplete';\n\ninterface History {\n    past: string[];\n    present: string;\n    future: string[];\n    error?: string;\n}\n\nconst TailwindInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const suggestionRef = useRef<SuggestionsListRef>(nu
[36mâ””â”€[0m [36mRunning...[0m
[?2026l[?2026h[0G[K[1A[K[1A[K[1A[K[1m@onlook/studio[0m lint $ [2meslint --fix .[0m
[36mâ”‚[0m [{"filePath":"/home/ubuntu/repos/onlook/apps/studio/builder-config/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/timer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/twTranslator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/hotkeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/ide.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/e2e/example.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/electron-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/assets/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ImageContentData } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { promises as fs, readFileSync } from 'fs';\nimport mime from 'mime-lite';\nimport path from 'path';\nimport writeFileAtomic from 'write-file-atomic';\n\nasync function scanImagesDirectory(projectRoot: string): Promise<ImageContentData[]> {\n    const imagesPath = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const images: ImageContentData[] = [];\n\n    try {\n        const entries = await fs.readdir(imagesPath, { withFileTypes: true });\n\n        for (const entry of entries) {\n            if (entry.isFile()) {\n                const extension = path.extname(entry.name).toLowerCase();\n                // Common image extensions\n                if (\n                    ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.ico'].includes(extension)\n                ) {\n                    const imagePath = path.join(imagesPath, entry.name);\n                    const image = readFileSync(imagePath, { encoding: 'base64' });\n                    const mimeType = mime.getType(imagePath);\n                    if (!mimeType) {\n                        console.error(`Failed to get mime type for ${imagePath}`);\n                        continue;\n                    }\n                    images.push({\n                        fileName: entry.name,\n                        content: `data:${mimeType};base64,${image}`,\n                        mimeType,\n                    });\n                }\n            }\n        }\n\n        return images;\n    } catch (error) {\n        console.error('Error scanning images directory:', error);\n        return [];\n    }\n}\n\nexport async function scanNextJsImages(projectRoot: string): Promise<ImageContentData[]> {\n    try {\n        return await scanImagesDirectory(projectRoot);\n    } catch (error) {\n        console.error('Error scanning images:', error);\n        throw error;\n    }\n}\n\nexport async function saveImageToProject(\n    projectFolder: string,\n    content: string,\n    fileName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectFolder, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, fileName);\n\n        try {\n            await fs.access(imagePath);\n            throw new Error(`File ${fileName} already exists`);\n        } catch (err: any) {\n            if (err.code === 'ENOENT') {\n                const buffer = Buffer.from(content, 'base64');\n                await fs.writeFile(imagePath, buffer);\n                return imagePath;\n            }\n            throw err;\n        }\n    } catch (error) {\n        console.error('Error uploading image:', error);\n        throw error;\n    }\n}\n\nexport async function deleteImageFromProject(\n    projectRoot: string,\n    imageName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, imageName);\n        await fs.unlink(imagePath);\n        return imagePath;\n    } catch (error) {\n        console.error('Error deleting image:', error);\n        throw error;\n    }\n}\n\nexport async function renameImageInProject(\n    projectRoot: string,\n    imageName: string,\n    newName: string,\n): Promise<string> {\n    if (!imageName || !newName) {\n        throw new Error('Image name and new name are required');\n    }\n\n    const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const oldImagePath = path.join(imageFolder, imageName);\n    const newImagePath = path.join(imageFolder, newName);\n\n    try {\n        await validateRename(oldImagePath, newImagePath);\n        await fs.rename(oldImagePath, newImagePath);\n\n        await updateImageReferences(projectRoot, imageName, newName);\n        return newImagePath;\n    } catch (error) {\n        console.error('Error renaming image:', error);\n        throw error;\n    }\n}\n\nconst MAX_FILENAME_LENGTH = 255;\nconst VALID_FILENAME_REGEX = /^[a-zA-Z0-9-_. ]+$/;\n\nasync function validateRename(oldImagePath: string, newImagePath: string): Promise<void> {\n    try {\n        await fs.access(oldImagePath);\n    } catch (err) {\n        throw new Error(`Source image does not exist`);\n    }\n\n    const newFileName = path.basename(newImagePath);\n\n    if (newFileName.length > MAX_FILENAME_LENGTH) {\n        throw new Error(`File name is too long (max ${MAX_FILENAME_LENGTH} characters)`);\n    }\n\n    if (!VALID_FILENAME_REGEX.test(newFileName)) {\n        throw new Error(\n            'File name can only contain letters, numbers, spaces, hyphens, underscores, and periods',\n        );\n    }\n\n    try {\n        await fs.access(newImagePath);\n        throw new Error(`A file with this name already exists`);\n    } catch (err: any) {\n        if (err.code !== 'ENOENT') {\n            throw err;\n        }\n    }\n}\n\nasync function updateImageReferences(\n    projectRoot: string,\n    oldName: string,\n    newName: string,\n): Promise<void> {\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const oldImageUrl = `/${prefix}/${oldName}`;\n    const newImageUrl = `/${prefix}/${newName}`;\n    const pattern = new RegExp(oldImageUrl.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g');\n\n    const sourceFiles = await findSourceFiles(projectRoot);\n    await Promise.all(\n        sourceFiles.map(async (file) => {\n            const content = await fs.readFile(file, 'utf8');\n            if (!content.includes(oldImageUrl)) {\n                return;\n            }\n            const updatedContent = content.replace(pattern, newImageUrl);\n            await writeFileAtomic(file, updatedContent, { encoding: 'utf8' });\n        }),\n    );\n}\n\nasync function findSourceFiles(\n    dirPath: string,\n    maxDepth: number = 10,\n    currentDepth: number = 0,\n): Promise<string[]> {\n    if (currentDepth >= maxDepth) {\n        console.warn(`Max directory depth (${maxDepth}) reached at: ${dirPath}`);\n        return [];\n    }\n\n    const files: string[] = [];\n    const entries = await fs.readdir(dirPath, { withFileTypes: true });\n\n    for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n            files.push(...(await findSourceFiles(fullPath, maxDepth, currentDepth + 1)));\n        } else if (\n            entry.isFile() &&\n            (entry.name.endsWith('.tsx') ||\n                entry.name.endsWith('.jsx') ||\n                entry.name.endsWith('.ts'))\n        ) {\n            files.push(fullPath);\n        }\n    }\n\n    return files;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/parse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/llmProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/classes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/image.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":32,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'action' is defined but never used.","line":32,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport * as t from '@babel/types';\nimport { type CodeInsertImage, type CodeRemoveImage } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { join } from 'path';\nimport { writeFile } from '../files';\nimport { addClassToNode } from './style';\n\nexport function insertImageToNode(path: NodePath<t.JSXElement>, action: CodeInsertImage): void {\n    const imageName = writeImageToFile(action);\n    if (!imageName) {\n        console.error('Failed to write image to file');\n        return;\n    }\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const backgroundClass = `bg-[url(/${prefix}/${imageName})]`;\n    addClassToNode(path.node, backgroundClass);\n}\n\nfunction writeImageToFile(action: CodeInsertImage): string | null {\n    try {\n        const imageFolder = `${action.folderPath}/${DefaultSettings.IMAGE_FOLDER}`;\n        const imagePath = join(imageFolder, action.image.fileName);\n        writeFile(imagePath, action.image.content, 'base64');\n        return action.image.fileName;\n    } catch (error) {\n        console.error('Failed to write image to file', error);\n        return null;\n    }\n}\n\nexport function removeImageFromNode(path: NodePath<t.JSXElement>, action: CodeRemoveImage): void {}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/move.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/remove.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'element' is defined but never used.","line":6,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport type * as t from '@babel/types';\nimport type { CodeRemove } from '@onlook/models/actions';\nimport { addKeyToElement, jsxFilter } from './helpers';\n\nexport function removeElementFromNode(path: NodePath<t.JSXElement>, element: CodeRemove): void {\n    const parentPath = path.parentPath;\n\n    if (!parentPath) {\n        console.error('No parent path found');\n        return;\n    }\n\n    const siblings = (parentPath.node as t.JSXElement).children?.filter(jsxFilter) || [];\n    path.remove();\n\n    siblings.forEach((sibling) => {\n        addKeyToElement(sibling);\n    });\n\n    path.stop();\n}\n\nexport function removeElementAtIndex(\n    index: number,\n    jsxElements: Array<t.JSXElement | t.JSXFragment>,\n    children: t.Node[],\n) {\n    if (index >= 0 && index < jsxElements.length) {\n        const elementToRemove = jsxElements[index];\n        const indexInChildren = children.indexOf(elementToRemove);\n\n        if (indexInChildren !== -1) {\n            children.splice(indexInChildren, 1);\n        } else {\n            console.error('Element to be removed not found in children');\n        }\n    } else {\n        console.error('Invalid element index for removal');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/transform.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/files.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/props.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/templateNode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/install.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/asset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":10,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":10,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { signIn, signOut } from '../auth';\n\nexport function listenForAuthMessages() {\n    ipcMain.handle(MainChannels.SIGN_IN, (e: Electron.IpcMainInvokeEvent, args) => {\n        signIn(args.provider);\n    });\n\n    ipcMain.handle(MainChannels.SIGN_OUT, (e: Electron.IpcMainInvokeEvent, args) => {\n        signOut();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ChatConversation, ProjectSuggestions, StreamRequestType } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { ipcMain } from 'electron';\nimport Chat from '../chat';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForChatMessages() {\n    ipcMain.handle(\n        MainChannels.SEND_CHAT_MESSAGES_STREAM,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { messages, requestType } = args as {\n                messages: CoreMessage[];\n                requestType: StreamRequestType;\n            };\n            return Chat.stream(messages, requestType);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_STOP_STREAM_REQUEST,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            return Chat.abortStream();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.GET_CONVERSATIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            return PersistentStorage.CONVERSATIONS.getCollection(projectId);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { conversation } = args as { conversation: ChatConversation };\n        return PersistentStorage.CONVERSATIONS.writeItem(conversation);\n    });\n\n    ipcMain.handle(MainChannels.DELETE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return PersistentStorage.CONVERSATIONS.deleteItem(id);\n    });\n\n    ipcMain.handle(MainChannels.GENERATE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { messages } = args as {\n            messages: CoreMessage[];\n        };\n        return Chat.generateSuggestions(messages);\n    });\n\n    ipcMain.handle(\n        MainChannels.GET_SUGGESTIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            const suggestions = PersistentStorage.SUGGESTIONS.getCollection(\n                projectId,\n            ) as ProjectSuggestions[];\n            return suggestions.flatMap((suggestion) => suggestion.suggestions);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { suggestions } = args as { suggestions: ProjectSuggestions };\n        return PersistentStorage.SUGGESTIONS.writeItem(suggestions);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/create.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":48,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateStage, SetupStage, type CreateCallback, type SetupCallback } from '@onlook/models';\nimport type { ImageMessageContext } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { mainWindow } from '..';\nimport projectCreator from '../create';\nimport { createProject } from '../create/install';\nimport { installProjectDependencies } from '../create/setup';\n\nexport function listenForCreateMessages() {\n    ipcMain.handle(MainChannels.CREATE_NEW_PROJECT, (e: Electron.IpcMainInvokeEvent, args) => {\n        const progressCallback: CreateCallback = (stage: CreateStage, message: string) => {\n            mainWindow?.webContents.send(MainChannels.CREATE_NEW_PROJECT_CALLBACK, {\n                stage,\n                message,\n            });\n        };\n\n        const { name, path } = args as { name: string; path: string };\n        return createProject(name, path, progressCallback);\n    });\n\n    ipcMain.handle(\n        MainChannels.INSTALL_PROJECT_DEPENDENCIES,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const progressCallback: SetupCallback = (stage: SetupStage, message: string) => {\n                mainWindow?.webContents.send(MainChannels.SETUP_PROJECT_CALLBACK, {\n                    stage,\n                    message,\n                });\n            };\n            const { folderPath, installCommand } = args;\n            return installProjectDependencies(folderPath, installCommand, progressCallback);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { prompt, images } = args as {\n                prompt: string;\n                images: ImageMessageContext[];\n            };\n            return projectCreator.createProject(prompt, images);\n        },\n    );\n\n    ipcMain.handle(MainChannels.CREATE_NEW_BLANK_PROJECT, (e: Electron.IpcMainInvokeEvent) => {\n        return projectCreator.createBlankProject();\n    });\n\n    ipcMain.handle(\n        MainChannels.CANCEL_CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent) => {\n            return projectCreator.cancel();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/hosting.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCustomDomains' is defined but never used.","line":7,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":44,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { PublishRequest, PublishResponse, UnpublishRequest } from '@onlook/models/hosting';\nimport { ipcMain } from 'electron';\nimport hostingManager from '../hosting';\nimport {\n    createDomainVerification,\n    getCustomDomains,\n    getOwnedDomains,\n    verifyDomain,\n} from '../hosting/domains';\n\nexport function listenForHostingMessages() {\n    ipcMain.handle(\n        MainChannels.PUBLISH_TO_DOMAIN,\n        async (_e: Electron.IpcMainInvokeEvent, args: PublishRequest): Promise<PublishResponse> => {\n            return await hostingManager.publish(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.UNPUBLISH_DOMAIN,\n        async (\n            e: Electron.IpcMainInvokeEvent,\n            args: UnpublishRequest,\n        ): Promise<PublishResponse> => {\n            const { urls } = args;\n            return await hostingManager.unpublish(urls);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_DOMAIN_VERIFICATION,\n        async (_e: Electron.IpcMainInvokeEvent, args) => {\n            const { domain } = args;\n            return await createDomainVerification(domain);\n        },\n    );\n\n    ipcMain.handle(MainChannels.VERIFY_DOMAIN, async (_e: Electron.IpcMainInvokeEvent, args) => {\n        const { domain } = args;\n        return await verifyDomain(domain);\n    });\n\n    ipcMain.handle(MainChannels.GET_OWNED_DOMAINS, async (_e: Electron.IpcMainInvokeEvent) => {\n        return await getOwnedDomains();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":41,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":41,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":61,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { WindowCommand } from '@onlook/models/projects';\nimport { BrowserWindow, ipcMain, shell } from 'electron';\nimport { mainWindow } from '..';\nimport { imageStorage } from '../storage/images';\nimport { updater } from '../update';\nimport { listenForAnalyticsMessages } from './analytics';\nimport { listenForAssetMessages } from './asset';\nimport { listenForAuthMessages } from './auth';\nimport { listenForChatMessages } from './chat';\nimport { listenForCodeMessages } from './code';\nimport { listenForCreateMessages } from './create';\nimport { listenForHostingMessages } from './hosting';\nimport { listenForPageMessages } from './page';\nimport { listenForPaymentMessages } from './payments';\nimport { listenForRunMessages } from './run';\nimport { listenForStorageMessages } from './storage';\n\nexport function listenForIpcMessages() {\n    listenForGeneralMessages();\n    listenForAnalyticsMessages();\n    listenForCodeMessages();\n    listenForStorageMessages();\n    listenForAuthMessages();\n    listenForCreateMessages();\n    listenForChatMessages();\n    listenForRunMessages();\n    listenForHostingMessages();\n    listenForPaymentMessages();\n    listenForPageMessages();\n    listenForAssetMessages();\n}\n\nexport function removeIpcListeners() {\n    Object.values(MainChannels).forEach((channel) => {\n        ipcMain.removeHandler(channel);\n    });\n}\n\nfunction listenForGeneralMessages() {\n    ipcMain.handle(MainChannels.RELOAD_APP, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return mainWindow?.reload();\n    });\n\n    ipcMain.handle(\n        MainChannels.OPEN_IN_EXPLORER,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.showItemInFolder(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.OPEN_EXTERNAL_WINDOW,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.openExternal(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.QUIT_AND_INSTALL,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return updater.quitAndInstall();\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_IMAGE, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return imageStorage.readImage(args);\n    });\n\n    ipcMain.handle(\n        MainChannels.SAVE_IMAGE,\n        (e: Electron.IpcMainInvokeEvent, args: { img: string; name: string }) => {\n            return imageStorage.writeImage(args.name, args.img);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_WINDOW_COMMAND,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            const window = BrowserWindow.getFocusedWindow();\n\n            const command = args as WindowCommand;\n            switch (command) {\n                case WindowCommand.MINIMIZE:\n                    window?.minimize();\n                    break;\n                case WindowCommand.MAXIMIZE:\n                    window?.maximize();\n                    break;\n                case WindowCommand.UNMAXIMIZE:\n                    window?.unmaximize();\n                    break;\n                case WindowCommand.CLOSE:\n                    window?.close();\n                    break;\n            }\n        },\n    );\n\n    ipcMain.handle(MainChannels.DELETE_FOLDER, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return shell.trashItem(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/payments.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":8,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":8,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":15,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":15,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { checkoutWithStripe, checkSubscription, manageSubscription } from '../payment';\n\nexport function listenForPaymentMessages() {\n    ipcMain.handle(\n        MainChannels.CREATE_STRIPE_CHECKOUT,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkoutWithStripe();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.MANAGE_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await manageSubscription();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CHECK_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkSubscription();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/run.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":37,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":37,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DetectedPortResults } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { isPortAvailable, runBunCommand } from '../bun';\nimport run from '../run';\nimport terminal from '../run/terminal';\n\nexport async function listenForRunMessages() {\n    ipcMain.handle(MainChannels.RUN_START, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.start(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.RUN_STOP, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath } = args as { id: string; folderPath: string };\n        return run.stop(id, folderPath);\n    });\n\n    ipcMain.handle(MainChannels.RUN_RESTART, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.restart(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.GET_TEMPLATE_NODE, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return run.getTemplateNode(id);\n    });\n\n    ipcMain.handle(MainChannels.GET_RUN_STATE, (_, args) => {\n        return run.state;\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_INPUT, (_, args) => {\n        const { id, data } = args as { id: string; data: string };\n        return terminal.write(id, data);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_EXECUTE_COMMAND, (_, args) => {\n        const { id, command } = args as { id: string; command: string };\n        return terminal.executeCommand(id, command);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_RESIZE, (_, args) => {\n        const { id, cols, rows } = args as { id: string; cols: number; rows: number };\n        return terminal.resize(id, cols, rows);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_GET_HISTORY, (_, args) => {\n        const { id } = args as { id: string };\n        return terminal.getHistory(id);\n    });\n\n    ipcMain.handle(MainChannels.RUN_COMMAND, async (_, args) => {\n        const { cwd, command } = args as { cwd: string; command: string };\n        return await runBunCommand(command, { cwd });\n    });\n\n    ipcMain.handle(\n        MainChannels.IS_PORT_AVAILABLE,\n        async (e: Electron.IpcMainInvokeEvent, args): Promise<DetectedPortResults> => {\n            const { port } = args as { port: number };\n            return await isPortAvailable(port);\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":9,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":20,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":47,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { AppState, UserMetadata, UserSettings } from '@onlook/models/settings';\nimport { ipcMain } from 'electron';\nimport mixpanel from '../analytics';\nimport { getRefreshedAuthTokens } from '../auth';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForStorageMessages() {\n    ipcMain.handle(MainChannels.GET_USER_SETTINGS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_SETTINGS.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_SETTINGS,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserSettings>) => {\n            PersistentStorage.USER_SETTINGS.update(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_USER_METADATA, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_METADATA.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_METADATA,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserMetadata>) => {\n            PersistentStorage.USER_METADATA.update(args);\n            mixpanel.updateUserMetadata(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_APP_STATE, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.APP_STATE.read();\n    });\n\n    ipcMain.handle(MainChannels.IS_USER_SIGNED_IN, (e: Electron.IpcMainInvokeEvent) => {\n        return getRefreshedAuthTokens();\n    });\n\n    ipcMain.handle(\n        MainChannels.REPLACE_APP_STATE,\n        (e: Electron.IpcMainInvokeEvent, args: AppState) => {\n            PersistentStorage.APP_STATE.replace(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_PROJECTS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.PROJECTS.read();\n    });\n\n    ipcMain.handle(MainChannels.UPDATE_PROJECTS, (e: Electron.IpcMainInvokeEvent, args: any) => {\n        PersistentStorage.PROJECTS.update(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/domains.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'require' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAIN_DIST' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":75,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":123,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":125,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APP_NAME, APP_SCHEMA } from '@onlook/models/constants';\nimport { BrowserWindow, app, shell } from 'electron';\nimport fixPath from 'fix-path';\nimport { createRequire } from 'node:module';\nimport os from 'node:os';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { sendAnalytics } from './analytics';\nimport { handleAuthCallback, setupAuthAutoRefresh } from './auth';\nimport { listenForIpcMessages } from './events';\nimport { updater } from './update';\n\n// Help main inherit $PATH defined in dotfiles (.bashrc/.bash_profile/.zshrc/etc).\nfixPath();\n\nexport let mainWindow: BrowserWindow | null = null;\nconst require = createRequire(import.meta.url);\nexport const __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Constants\nconst MAIN_DIST = path.join(__dirname, '../../dist-electron');\nconst RENDERER_DIST = path.join(__dirname, '../../dist');\nconst PRELOAD_PATH = path.join(__dirname, '../preload/index.js');\nconst INDEX_HTML = path.join(RENDERER_DIST, 'index.html');\nconst VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;\n\n// Environment setup\nconst setupEnvironment = () => {\n    process.env.APP_ROOT = path.join(__dirname, '../..');\n    process.env.WEBVIEW_PRELOAD_PATH = path.join(__dirname, '../preload/webview.js');\n    process.env.APP_VERSION = app.getVersion();\n    process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n        ? path.join(process.env.APP_ROOT, 'public')\n        : RENDERER_DIST;\n};\n\n// Platform-specific configurations\nconst configurePlatformSpecifics = () => {\n    if (os.release().startsWith('6.1')) {\n        app.disableHardwareAcceleration();\n    }\n\n    if (process.platform === 'win32') {\n        app.setAppUserModelId(app.getName());\n    }\n};\n\n// Protocol setup\nconst setupProtocol = () => {\n    if (process.defaultApp && process.argv.length >= 2) {\n        app.setAsDefaultProtocolClient(APP_SCHEMA, process.execPath, [\n            path.resolve(process.argv?.[1]),\n        ]);\n    } else {\n        app.setAsDefaultProtocolClient(APP_SCHEMA);\n    }\n};\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        title: APP_NAME,\n        minWidth: 800,\n        icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n        titleBarStyle: 'hiddenInset',\n        frame: false,\n        webPreferences: {\n            preload: PRELOAD_PATH,\n            webviewTag: true,\n        },\n    });\n    return mainWindow;\n};\n\nconst loadWindowContent = (win: BrowserWindow) => {\n    VITE_DEV_SERVER_URL ? win.loadURL(VITE_DEV_SERVER_URL) : win.loadFile(INDEX_HTML);\n};\n\nconst initMainWindow = () => {\n    const win = createWindow();\n    win.maximize();\n    loadWindowContent(win);\n    win.webContents.setWindowOpenHandler(({ url }) => {\n        if (url.startsWith('https:')) {\n            shell.openExternal(url);\n        }\n        return { action: 'deny' };\n    });\n\n    setupAuthAutoRefresh();\n};\n\nconst setupAppEventListeners = () => {\n    app.whenReady().then(() => {\n        initMainWindow();\n    });\n\n    app.on('ready', () => {\n        updater.listen();\n        sendAnalytics('start app');\n    });\n\n    app.on('window-all-closed', async () => {\n        if (process.platform !== 'darwin') {\n            mainWindow = null;\n            app.quit();\n        }\n    });\n\n    app.on('second-instance', (_, commandLine) => {\n        if (mainWindow) {\n            if (mainWindow.isMinimized()) {\n                mainWindow.restore();\n            }\n            mainWindow.focus();\n        }\n        const url = commandLine.find((arg) => arg.startsWith(`${APP_SCHEMA}://`));\n        if (url && process.platform !== 'darwin') {\n            handleAuthCallback(url);\n        }\n    });\n\n    app.on('activate', () => {\n        BrowserWindow.getAllWindows().length\n            ? BrowserWindow.getAllWindows()?.[0]?.focus()\n            : initMainWindow();\n    });\n\n    app.on('open-url', (event, url) => {\n        event.preventDefault();\n        handleAuthCallback(url);\n    });\n\n    app.on('quit', () => sendAnalytics('quit app'));\n};\n\n// Main function\nconst main = async () => {\n    if (!app.requestSingleInstanceLock()) {\n        app.quit();\n        process.exit(0);\n    }\n\n    setupEnvironment();\n    configurePlatformSpecifics();\n    setupProtocol();\n    setupAppEventListeners();\n    listenForIpcMessages();\n};\n\nmain();\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/delete.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":22,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from 'fs';\nimport * as path from 'path';\nimport { cleanupEmptyFolders, detectRouterType } from './helpers';\n\nexport async function deleteNextJsPage(projectRoot: string, pagePath: string, isDir: boolean) {\n    try {\n        const routerConfig = await detectRouterType(projectRoot);\n\n        if (!routerConfig) {\n            throw new Error('Could not detect Next.js router type');\n        }\n\n        if (routerConfig.type !== 'app') {\n            throw new Error('Page deletion is only supported for App Router projects for now.');\n        }\n\n        const fullPath = path.join(routerConfig.basePath, pagePath);\n\n        // Check if file/folder exists\n        let stats;\n        try {\n            stats = await fs.stat(fullPath);\n        } catch (err) {\n            if (err instanceof Error && 'code' in err && err.code === 'ENOENT') {\n                throw new Error('Selected page not found');\n            }\n            throw err;\n        }\n\n        if (isDir) {\n            await fs.rm(fullPath, { recursive: true, force: true });\n        } else {\n            const selectedFilePath = path.join(fullPath, 'page.tsx');\n            await fs.unlink(selectedFilePath);\n            await cleanupEmptyFolders(path.dirname(fullPath));\n        }\n\n        console.log(`Deleted: ${fullPath}`);\n        return true;\n    } catch (error) {\n        console.error('Error deleting page:', error);\n        throw error;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/duplicate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/rename.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/scan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/terminal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/directory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/file.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/images.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/update/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/browserview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/group.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":56,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ActionTarget, GroupContainer } from '@onlook/models/actions';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement } from '../helpers';\nimport { elementFromDomId } from '/common/helpers';\n\nexport function groupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = createContainerElement(container);\n\n    // Find child elements and their positions\n    const childrenMap = new Set(children.map((c) => c.domId));\n    const childrenWithIndices = Array.from(parentEl.children)\n        .map((child, index) => ({\n            element: child as HTMLElement,\n            index,\n            domId: getOrAssignDomId(child as HTMLElement),\n        }))\n        .filter(({ domId }) => childrenMap.has(domId));\n\n    if (childrenWithIndices.length === 0) {\n        console.warn('No valid children found to group');\n        return null;\n    }\n\n    // Insert container at the position of the first child\n    const insertIndex = Math.min(...childrenWithIndices.map((c) => c.index));\n    parentEl.insertBefore(containerEl, parentEl.children?.[insertIndex]);\n\n    // Move children into container\n    childrenWithIndices.forEach(({ element }) => {\n        const newElement = element.cloneNode(true) as HTMLElement;\n\n        newElement.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        containerEl.appendChild(newElement);\n        element.style.display = 'none';\n        removeIdsFromChildElement(element);\n    });\n\n    return getDomElement(containerEl, true);\n}\n\nexport function ungroupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = Array.from(parentEl.children).find(\n        (child) => child.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID) === container.domId,\n    ) as HTMLElement | undefined;\n    if (!containerEl) {\n        console.warn('Failed to find container element', parent.domId);\n        return null;\n    }\n\n    // Insert container children in order into parent behind container\n    Array.from(containerEl.children).forEach((child) => {\n        child.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        parentEl.insertBefore(child, containerEl);\n    });\n    containerEl.style.display = 'none';\n    return getDomElement(parentEl, true);\n}\n\nfunction createContainerElement(target: GroupContainer): HTMLElement {\n    const containerEl = document.createElement(target.tagName);\n    Object.entries(target.attributes).forEach(([key, value]) => {\n        containerEl.setAttribute(key, value);\n    });\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID, target.domId);\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_ID, target.oid);\n    return containerEl;\n}\n\nfunction removeIdsFromChildElement(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_INSERTED);\n\n    const children = Array.from(el.children);\n    if (children.length === 0) {\n        return;\n    }\n\n    children.forEach((child) => {\n        removeIdsFromChildElement(child as HTMLElement);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/image.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/remove.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/drag.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDragElement' is defined but never used.","line":116,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement, restoreElementStyle } from '../helpers';\nimport { getDisplayDirection } from './helpers';\nimport { createStub, getCurrentStubIndex, moveStub, removeStub } from './stub';\nimport { elementFromDomId, isValidHtmlElement } from '/common/helpers';\n\nexport function startDrag(domId: string): number | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn(`Start drag element not found: ${domId}`);\n        return null;\n    }\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('Start drag parent not found');\n        return null;\n    }\n    const htmlChildren = Array.from(parent.children).filter(isValidHtmlElement);\n    const originalIndex = htmlChildren.indexOf(el);\n    prepareElementForDragging(el);\n    createStub(el);\n    const pos = getAbsolutePosition(el);\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION, JSON.stringify(pos));\n    return originalIndex;\n}\n\nexport function drag(domId: string, dx: number, dy: number, x: number, y: number) {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('Dragging element not found');\n        return;\n    }\n    const styles = window.getComputedStyle(el);\n    const pos = JSON.parse(\n        el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION) || '{}',\n    );\n    const left = pos.left + dx - window.scrollX;\n    const top = pos.top + dy - window.scrollY;\n\n    el.style.left = `${left}px`;\n    el.style.top = `${top}px`;\n    el.style.width = styles.width + 1;\n    el.style.height = styles.height + 1;\n    el.style.position = 'fixed';\n\n    moveStub(el, x, y);\n}\n\nexport function endDrag(domId: string): {\n    newIndex: number;\n    child: DomElement;\n    parent: DomElement;\n} | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('End drag element not found');\n        endAllDrag();\n        return null;\n    }\n\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('End drag parent not found');\n        cleanUpElementAfterDragging(el);\n        return null;\n    }\n\n    const stubIndex = getCurrentStubIndex(parent, el);\n    cleanUpElementAfterDragging(el);\n    removeStub();\n\n    if (stubIndex === -1) {\n        return null;\n    }\n\n    const elementIndex = Array.from(parent.children).indexOf(el);\n    if (stubIndex === elementIndex) {\n        return null;\n    }\n    return {\n        newIndex: stubIndex,\n        child: getDomElement(el, false),\n        parent: getDomElement(parent, false),\n    };\n}\n\nfunction prepareElementForDragging(el: HTMLElement) {\n    const saved = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    if (saved) {\n        return;\n    }\n\n    const style = {\n        position: el.style.position,\n        transform: el.style.transform,\n        width: el.style.width,\n        height: el.style.height,\n        left: el.style.left,\n        top: el.style.top,\n    };\n\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE, JSON.stringify(style));\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING, 'true');\n\n    if (el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION) !== null) {\n        const parent = el.parentElement;\n        if (parent) {\n            const displayDirection = getDisplayDirection(parent);\n            el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION, displayDirection);\n        }\n    }\n}\n\nfunction getDragElement(): HTMLElement | undefined {\n    const el = document.querySelector(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    ) as HTMLElement | null;\n    if (!el) {\n        return;\n    }\n    return el;\n}\n\nfunction cleanUpElementAfterDragging(el: HTMLElement) {\n    restoreElementStyle(el);\n    removeDragAttributes(el);\n    getOrAssignDomId(el);\n}\n\nfunction removeDragAttributes(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION);\n}\n\nfunction getAbsolutePosition(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return {\n        left: rect.left + window.scrollX,\n        top: rect.top + window.scrollY,\n    };\n}\n\nexport function endAllDrag() {\n    const draggingElements = document.querySelectorAll(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    );\n    for (const el of draggingElements) {\n        cleanUpElementAfterDragging(el as HTMLElement);\n    }\n    removeStub();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/stub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/publish.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-plugin-unsafe-accessors/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/no-unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/UpdateButton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/WindowsControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouteManager, useUpdateManager } from '@/components/Context';\nimport { Route } from '@/lib/routes';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport UpdateButton from './UpdateButton';\nimport { WindowsControls } from './WindowsControls';\n\nconst AppBar = observer(() => {\n    const routeManager = useRouteManager();\n    const updateManager = useUpdateManager();\n\n    const className = cn(\n        'opacity-50 hover:opacity-100',\n        updateManager.updateAvailable &&\n            'hover:bg-red-800 hover:text-red-100 dark:hover:text-red-100',\n    );\n\n    return (\n        <div\n            className={cn(\n                'flex flex-row items-center pl-20 h-10 border-b bg-background dark:bg-background-active transition-colors duration-300 ease-in-out',\n                routeManager.route === Route.SIGN_IN && 'bg-transparent border-b-0',\n                updateManager.updateAvailable &&\n                    'bg-red-950 dark:bg-red-950 dark:text-red-300 text-red-300 transition-opacity duration-300 ease-in-out',\n            )}\n        >\n            <div className=\"appbar w-full h-full\"></div>\n            <div className=\"flex mr-2 gap-2\">\n                <UpdateButton />\n            </div>\n            <WindowsControls />\n        </div>\n    );\n});\n\nexport default AppBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/Context/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/dunes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/hotkeys-label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/auth/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":31,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":31,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":36,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { UserMetadata } from '@onlook/models/settings';\nimport supabase from '@onlook/supabase/clients';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class AuthManager {\n    authenticated = false;\n    userMetadata: UserMetadata | null = null;\n    isAuthEnabled = !!supabase && !!supabase.auth;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.fetchUserMetadata();\n        this.listenForAuthEvents();\n    }\n\n    async fetchUserMetadata() {\n        this.userMetadata = (await invokeMainChannel(\n            MainChannels.GET_USER_METADATA,\n        )) as UserMetadata;\n\n        const signedIn = (await invokeMainChannel(MainChannels.IS_USER_SIGNED_IN)) as boolean;\n\n        if (this.userMetadata && signedIn) {\n            this.authenticated = true;\n        }\n    }\n\n    listenForAuthEvents() {\n        window.api.on(MainChannels.USER_SIGNED_IN, async (e, args) => {\n            this.authenticated = true;\n            this.fetchUserMetadata();\n        });\n\n        window.api.on(MainChannels.USER_SIGNED_OUT, async (e, args) => {\n            this.authenticated = false;\n            this.userMetadata = null;\n        });\n    }\n\n    async signIn(provider: 'github' | 'google') {\n        await invokeMainChannel(MainChannels.SIGN_IN, { provider });\n    }\n\n    async signOut() {\n        await invokeMainChannel(MainChannels.SIGN_OUT);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/action/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/layers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/canvas/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/conversation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":78,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatMessageType, type ChatConversation } from '@onlook/models/chat';\nimport { MAX_NAME_LENGTH } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { AssistantChatMessageImpl } from '../message/assistant';\nimport { UserChatMessageImpl } from '../message/user';\n\nexport class ChatConversationImpl implements ChatConversation {\n    id: string;\n    projectId: string;\n    displayName: string | null = null;\n    messages: (UserChatMessageImpl | AssistantChatMessageImpl)[];\n    createdAt: string;\n    updatedAt: string;\n\n    constructor(projectId: string, messages: (UserChatMessageImpl | AssistantChatMessageImpl)[]) {\n        makeAutoObservable(this);\n        this.id = nanoid();\n        this.projectId = projectId;\n        this.messages = messages;\n        this.createdAt = new Date().toISOString();\n        this.updatedAt = new Date().toISOString();\n    }\n\n    getMessageById(id: string) {\n        return this.messages.find((m) => m.id === id);\n    }\n\n    static fromJSON(data: ChatConversation) {\n        const conversation = new ChatConversationImpl(data.projectId, []);\n        conversation.id = data.id;\n        conversation.displayName = data.displayName;\n        conversation.messages = data.messages.map((m) => {\n            if (m.type === ChatMessageType.USER) {\n                return UserChatMessageImpl.fromJSON(m);\n            } else {\n                return AssistantChatMessageImpl.fromJSON(m);\n            }\n        });\n        conversation.createdAt = data.createdAt;\n        conversation.updatedAt = data.updatedAt;\n        return conversation;\n    }\n\n    getMessagesForStream(): CoreMessage[] {\n        return this.messages.map((m) => m.toCoreMessage());\n    }\n\n    appendMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        this.messages = [...this.messages, message];\n        this.updatedAt = new Date().toISOString();\n    }\n\n    removeAllMessagesAfter(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages = this.messages.slice(0, index + 1);\n        this.updatedAt = new Date().toISOString();\n    }\n\n    updateName(name: string, override = false) {\n        if (override || !this.displayName) {\n            this.displayName = name.slice(0, MAX_NAME_LENGTH);\n        }\n    }\n\n    getLastUserMessage() {\n        return this.messages.findLast((message) => message.type === ChatMessageType.USER);\n    }\n\n    updateMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages?.[index] = message;\n        this.updatedAt = new Date().toISOString();\n        this.messages = [...this.messages];\n    }\n\n    updateCodeReverted(id: string) {\n        this.messages = [...this.messages];\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/assistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/stream.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/copy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/element/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/error/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/group/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/history/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/image/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":279,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorMode, EditorTabValue, SettingsTabValue } from '@/lib/models';\nimport type { ProjectsManager } from '@/lib/projects';\nimport type { UserManager } from '@/lib/user';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport type { NativeImage } from 'electron';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { ActionManager } from './action';\nimport { AstManager } from './ast';\nimport { CanvasManager } from './canvas';\nimport { ChatManager } from './chat';\nimport { CodeManager } from './code';\nimport { CopyManager } from './copy';\nimport { ElementManager } from './element';\nimport { ErrorManager } from './error';\nimport { GroupManager } from './group';\nimport { HistoryManager } from './history';\nimport { ImageManager } from './image';\nimport { InsertManager } from './insert';\nimport { MoveManager } from './move';\nimport { OverlayManager } from './overlay';\nimport { PagesManager } from './pages';\nimport { ProjectInfoManager } from './projectinfo';\nimport { StyleManager } from './style';\nimport { TextEditingManager } from './text';\nimport { WebviewManager } from './webview';\n\nexport class EditorEngine {\n    private _editorMode: EditorMode = EditorMode.DESIGN;\n    private _plansOpen: boolean = false;\n    private _settingsOpen: boolean = false;\n    private _hotkeysOpen: boolean = false;\n    private _editorPanelTab: EditorTabValue = EditorTabValue.CHAT;\n    private _settingsTab: SettingsTabValue = SettingsTabValue.DOMAIN;\n\n    private canvasManager: CanvasManager;\n    private chatManager: ChatManager;\n    private webviewManager: WebviewManager;\n    private overlayManager: OverlayManager;\n    private codeManager: CodeManager;\n    private pagesManager: PagesManager;\n    private errorManager: ErrorManager;\n    private imageManager: ImageManager;\n\n    private astManager: AstManager = new AstManager(this);\n    private historyManager: HistoryManager = new HistoryManager(this);\n    private projectInfoManager: ProjectInfoManager = new ProjectInfoManager();\n    private elementManager: ElementManager = new ElementManager(this);\n    private textEditingManager: TextEditingManager = new TextEditingManager(this);\n    private actionManager: ActionManager = new ActionManager(this);\n    private insertManager: InsertManager = new InsertManager(this);\n    private moveManager: MoveManager = new MoveManager(this);\n    private styleManager: StyleManager = new StyleManager(this);\n    private copyManager: CopyManager = new CopyManager(this);\n    private groupManager: GroupManager = new GroupManager(this);\n\n    constructor(\n        private projectsManager: ProjectsManager,\n        private userManager: UserManager,\n    ) {\n        makeAutoObservable(this);\n        this.canvasManager = new CanvasManager(this.projectsManager);\n        this.chatManager = new ChatManager(this, this.projectsManager, this.userManager);\n        this.webviewManager = new WebviewManager(this, this.projectsManager);\n        this.overlayManager = new OverlayManager(this);\n        this.codeManager = new CodeManager(this, this.projectsManager);\n        this.pagesManager = new PagesManager(this, this.projectsManager);\n        this.errorManager = new ErrorManager(this, this.projectsManager);\n        this.imageManager = new ImageManager(this, this.projectsManager);\n    }\n\n    get elements() {\n        return this.elementManager;\n    }\n    get overlay() {\n        return this.overlayManager;\n    }\n    get webviews() {\n        return this.webviewManager;\n    }\n    get code() {\n        return this.codeManager;\n    }\n    get history() {\n        return this.historyManager;\n    }\n    get ast() {\n        return this.astManager;\n    }\n    get action() {\n        return this.actionManager;\n    }\n    get mode() {\n        return this._editorMode;\n    }\n    get insert() {\n        return this.insertManager;\n    }\n    get move() {\n        return this.moveManager;\n    }\n    get projectInfo() {\n        return this.projectInfoManager;\n    }\n    get style() {\n        return this.styleManager;\n    }\n    get canvas() {\n        return this.canvasManager;\n    }\n    get text() {\n        return this.textEditingManager;\n    }\n    get copy() {\n        return this.copyManager;\n    }\n    get group() {\n        return this.groupManager;\n    }\n    get chat() {\n        return this.chatManager;\n    }\n    get image() {\n        return this.imageManager;\n    }\n    get editPanelTab() {\n        return this._editorPanelTab;\n    }\n    get settingsTab() {\n        return this._settingsTab;\n    }\n    get isPlansOpen() {\n        return this._plansOpen;\n    }\n    get isSettingsOpen() {\n        return this._settingsOpen;\n    }\n    get isHotkeysOpen() {\n        return this._hotkeysOpen;\n    }\n    get errors() {\n        return this.errorManager;\n    }\n    get isWindowSelected() {\n        return this.webviews.selected.length > 0 && this.elements.selected.length === 0;\n    }\n\n    set mode(mode: EditorMode) {\n        this._editorMode = mode;\n    }\n\n    set editPanelTab(tab: EditorTabValue) {\n        this._editorPanelTab = tab;\n    }\n\n    set settingsTab(tab: SettingsTabValue) {\n        this._settingsTab = tab;\n    }\n\n    set isPlansOpen(open: boolean) {\n        this._plansOpen = open;\n        if (open) {\n            sendAnalytics('open pro checkout');\n        }\n    }\n\n    set isSettingsOpen(open: boolean) {\n        this._settingsOpen = open;\n    }\n\n    set isHotkeysOpen(value: boolean) {\n        this._hotkeysOpen = value;\n    }\n\n    get pages() {\n        return this.pagesManager;\n    }\n\n    dispose() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deregisterAll();\n        this.errors.clear();\n        this.chatManager?.dispose();\n        this.historyManager?.clear();\n        this.elementManager?.clear();\n        this.actionManager?.dispose();\n        this.overlayManager?.clear();\n        this.astManager?.clear();\n        this.textEditingManager?.clean();\n        this.codeManager?.dispose();\n        this.insertManager?.dispose();\n        this.moveManager?.dispose();\n        this.styleManager?.dispose();\n        this.copyManager?.dispose();\n        this.groupManager?.dispose();\n        this.canvasManager?.clear();\n        this.imageManager?.dispose();\n        this._settingsOpen = false;\n        this._plansOpen = false;\n    }\n\n    clearUI() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deselectAll();\n    }\n\n    inspect() {\n        const selected = this.elements.selected;\n        if (selected.length === 0) {\n            return;\n        }\n        const selectedEl = selected[0];\n        const webviewId = selectedEl.webviewId;\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            return;\n        }\n        webview.openDevTools();\n    }\n\n    async refreshLayers() {\n        const webviews = this.webviews.webviews;\n        if (webviews.size === 0) {\n            return;\n        }\n        const webview = Array.from(webviews.values())?.[0]?.webview;\n        webview.executeJavaScript('window.api?.processDom()');\n    }\n\n    async takeActiveWebviewScreenshot(\n        name: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        if (this.webviews.webviews.size === 0) {\n            console.error('No webviews found');\n            return null;\n        }\n        const webviewId = Array.from(this.webviews.webviews.values())?.[0]?.webview.id;\n        return this.takeWebviewScreenshot(name, webviewId, options);\n    }\n\n    async takeWebviewScreenshot(\n        name: string,\n        webviewId: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            console.error('No webview found');\n            return null;\n        }\n\n        const hasContent = await webview.executeJavaScript(\n            `document.body.innerText.trim().length > 0 || document.body.children.length > 0 `,\n        );\n        if (!hasContent) {\n            console.error('No content found in webview');\n            return null;\n        }\n\n        const image: NativeImage = await webview.capturePage();\n\n        if (options?.save) {\n            const imageName = `${name}-preview.png`;\n            const path: string | null = await invokeMainChannel(MainChannels.SAVE_IMAGE, {\n                img: image.toDataURL(),\n                name: imageName,\n            });\n            return {\n                name: imageName,\n            };\n        }\n        return {\n            image: image.resize({ quality: 'good', height: 100 }).toDataURL({\n                scaleFactor: 0.1,\n            }),\n        };\n    }\n\n    canDeleteWindow() {\n        return this.canvas.frames.length > 1;\n    }\n\n    deleteWindow(id?: string) {\n        if (this.canvas.frames.length === 1) {\n            console.error('Cannot delete the last window');\n            return;\n        }\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n            if (!settings) {\n                console.error('Window not found');\n                return;\n            }\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        this.ast.mappings.remove(settings.id);\n        this.canvas.frames = this.canvas.frames.filter((frame) => frame.id !== settings.id);\n        const webview = this.webviews.getWebview(settings.id);\n        if (webview) {\n            this.webviews.deregister(webview);\n        }\n        sendAnalytics('window delete');\n    }\n\n    duplicateWindow(id?: string) {\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        const currentFrame = settings;\n        const newFrame: FrameSettings = {\n            id: nanoid(),\n            url: currentFrame.url,\n            dimension: {\n                width: currentFrame.dimension.width,\n                height: currentFrame.dimension.height,\n            },\n            position: {\n                x: currentFrame.position.x + currentFrame.dimension.width + 100,\n                y: currentFrame.position.y,\n            },\n            aspectRatioLocked: currentFrame.aspectRatioLocked,\n            orientation: currentFrame.orientation,\n            device: currentFrame.device,\n            theme: currentFrame.theme,\n        };\n\n        this.canvas.frames = [...this.canvas.frames, newFrame];\n        sendAnalytics('window duplicate');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/insert/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/move/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":100,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { MoveElementAction } from '@onlook/models/actions';\nimport type { DomElement, ElementPosition } from '@onlook/models/element';\nimport type React from 'react';\nimport type { EditorEngine } from '..';\n\nexport class MoveManager {\n    dragOrigin: ElementPosition | undefined;\n    dragTarget: DomElement | undefined;\n    originalIndex: number | undefined;\n    MIN_DRAG_DISTANCE = 5;\n    isDraggingAbsolute = false;\n\n    constructor(private editorEngine: EditorEngine) {}\n\n    get isDragging() {\n        return !!this.dragOrigin;\n    }\n\n    async start(el: DomElement, position: ElementPosition, webview: Electron.WebviewTag) {\n        if (this.editorEngine.chat.isWaiting) {\n            return;\n        }\n        if (!this.editorEngine.elements.selected.some((selected) => selected.domId === el.domId)) {\n            console.warn('Element not selected, cannot start drag');\n            return;\n        }\n\n        this.dragOrigin = position;\n        this.dragTarget = el;\n        if (el.styles?.computed?.position === 'absolute') {\n            this.isDraggingAbsolute = true;\n            this.editorEngine.history.startTransaction();\n            return;\n        } else {\n            this.originalIndex = await webview.executeJavaScript(\n                `window.api?.startDrag('${el.domId}')`,\n            );\n        }\n\n        if (this.originalIndex === null || this.originalIndex === -1) {\n            this.clear();\n            console.warn('Start drag failed, original index is null or -1');\n            return;\n        }\n    }\n\n    drag(\n        e: React.MouseEvent<HTMLDivElement>,\n        getRelativeMousePositionToWebview: (e: React.MouseEvent<HTMLDivElement>) => ElementPosition,\n    ) {\n        if (!this.dragOrigin || !this.dragTarget) {\n            console.error('Cannot drag without drag origin or target');\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag');\n            return;\n        }\n\n        const { x, y } = getRelativeMousePositionToWebview(e);\n        const dx = x - this.dragOrigin.x;\n        const dy = y - this.dragOrigin.y;\n\n        if (this.isDraggingAbsolute) {\n            this.handleDragAbsolute(this.dragOrigin, this.dragTarget, x, y);\n            return;\n        }\n\n        if (Math.max(Math.abs(dx), Math.abs(dy)) > this.MIN_DRAG_DISTANCE) {\n            this.editorEngine.overlay.clear();\n            webview.executeJavaScript(\n                `window.api?.drag('${this.dragTarget.domId}', ${dx}, ${dy}, ${x}, ${y})`,\n            );\n        }\n    }\n\n    handleDragAbsolute(dragOrigin: ElementPosition, dragTarget: DomElement, x: number, y: number) {\n        const initialOffset = {\n            x: dragOrigin.x - dragTarget.rect.x,\n            y: dragOrigin.y - dragTarget.rect.y,\n        };\n\n        const parentRect = dragTarget.parent?.rect;\n        if (!parentRect) {\n            return;\n        }\n\n        const newX = Math.round(x - parentRect.x - initialOffset.x);\n        const newY = Math.round(y - parentRect.y - initialOffset.y);\n\n        this.editorEngine.overlay.clear();\n        this.editorEngine.style.updateMultiple({\n            left: `${newX}px`,\n            top: `${newY}px`,\n        });\n    }\n\n    async end(e: React.MouseEvent<HTMLDivElement>) {\n        if (this.isDraggingAbsolute) {\n            this.editorEngine.history.commitTransaction();\n            this.isDraggingAbsolute = false;\n            this.clear();\n        }\n\n        if (this.originalIndex === undefined || !this.dragTarget) {\n            this.clear();\n            this.endAllDrag();\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag end');\n            this.endAllDrag();\n            return;\n        }\n\n        const res: {\n            newIndex: number;\n            child: DomElement;\n            parent: DomElement;\n        } | null = await webview.executeJavaScript(\n            `window.api?.endDrag('${this.dragTarget.domId}')`,\n        );\n\n        if (res) {\n            const { child, parent, newIndex } = res;\n            if (newIndex !== this.originalIndex) {\n                const moveAction = this.createMoveAction(\n                    webview.id,\n                    child,\n                    parent,\n                    newIndex,\n                    this.originalIndex,\n                );\n                this.editorEngine.action.run(moveAction);\n            }\n        }\n        this.clear();\n    }\n\n    endAllDrag() {\n        this.editorEngine.webviews.webviews.forEach((webview) => {\n            webview.webview.executeJavaScript(`window.api?.endAllDrag()`);\n        });\n    }\n\n    moveSelected(direction: 'up' | 'down') {\n        const selected = this.editorEngine.elements.selected;\n        if (selected.length === 1) {\n            this.shiftElement(selected[0], direction);\n        } else {\n            if (selected.length > 1) {\n                console.error('Multiple elements selected, cannot shift');\n            } else {\n                console.error('No elements selected, cannot shift');\n            }\n        }\n    }\n\n    async shiftElement(element: DomElement, direction: 'up' | 'down'): Promise<void> {\n        const webview = this.editorEngine.webviews.getWebview(element.webviewId);\n        if (!webview) {\n            return;\n        }\n\n        // Get current index and parent\n        const currentIndex = await webview.executeJavaScript(\n            `window.api?.getElementIndex('${element.domId}')`,\n        );\n\n        if (currentIndex === -1) {\n            return;\n        }\n\n        const parent: DomElement | null = await webview.executeJavaScript(\n            `window.api?.getParentElement('${element.domId}')`,\n        );\n        if (!parent) {\n            return;\n        }\n\n        // Get filtered children count for accurate index calculation\n        const childrenCount = await webview.executeJavaScript(\n            `window.api?.getChildrenCount('${parent.domId}')`,\n        );\n\n        // Calculate new index based on direction and bounds\n        const newIndex =\n            direction === 'up'\n                ? Math.max(0, currentIndex - 1)\n                : Math.min(childrenCount - 1, currentIndex + 1);\n\n        if (newIndex === currentIndex) {\n            return;\n        }\n\n        // Create and run move action\n        const moveAction = this.createMoveAction(\n            webview.id,\n            element,\n            parent,\n            newIndex,\n            currentIndex,\n        );\n\n        this.editorEngine.action.run(moveAction);\n    }\n\n    createMoveAction(\n        webviewId: string,\n        child: DomElement,\n        parent: DomElement,\n        newIndex: number,\n        originalIndex: number,\n    ): MoveElementAction {\n        return {\n            type: 'move-element',\n            location: {\n                type: 'index',\n                targetDomId: parent.domId,\n                targetOid: parent.instanceId || parent.oid,\n                index: newIndex,\n                originalIndex: originalIndex,\n            },\n            targets: [\n                {\n                    webviewId,\n                    domId: child.domId,\n                    oid: child.instanceId || child.oid,\n                },\n            ],\n        };\n    }\n\n    clear() {\n        this.originalIndex = undefined;\n        this.dragOrigin = undefined;\n        this.dragTarget = undefined;\n    }\n\n    dispose() {\n        // Clear state\n        this.clear();\n\n        // Clear references\n        this.editorEngine = null as any;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/prosemirror/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/rect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/projectinfo/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/text/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/token/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/eventHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/messageBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/autolayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/numberUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/tag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/units.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/hosting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/port.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/run.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/routes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/sizePresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/update/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":14,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":14,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":18,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":18,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class UpdateManager {\n    updateAvailable = false;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.listen();\n    }\n\n    listen() {\n        window.api.on(MainChannels.UPDATE_DOWNLOADED, async (e, args) => {\n            this.updateAvailable = true;\n        });\n\n        window.api.on(MainChannels.UPDATE_NOT_AVAILABLE, async (e, args) => {\n            this.updateAvailable = false;\n        });\n    }\n\n    quitAndInstall() {\n        invokeMainChannel(MainChannels.QUIT_AND_INSTALL);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/Delete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":35,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":35,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { ReactNode } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport DeleteKey from './Delete';\nimport { Hotkey } from '/common/hotkeys';\n\nconst HotkeysArea = ({ children }: { children: ReactNode }) => {\n    const editorEngine = useEditorEngine();\n\n    // Zoom\n    useHotkeys(\n        'mod+0',\n        () => {\n            editorEngine.canvas.scale = DefaultSettings.SCALE;\n            editorEngine.canvas.position = {\n                x: DefaultSettings.PAN_POSITION.x,\n                y: DefaultSettings.PAN_POSITION.y,\n            };\n        },\n        { preventDefault: true },\n    );\n    useHotkeys('mod+equal', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 1.2), {\n        preventDefault: true,\n    });\n    useHotkeys('mod+minus', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 0.8), {\n        preventDefault: true,\n    });\n\n    // Modes\n    useHotkeys(Hotkey.SELECT.command, () => (editorEngine.mode = EditorMode.DESIGN));\n    useHotkeys(Hotkey.ESCAPE.command, () => {\n        editorEngine.mode = EditorMode.DESIGN;\n        !editorEngine.text.isEditing && editorEngine.clearUI();\n    });\n    useHotkeys(Hotkey.PAN.command, () => (editorEngine.mode = EditorMode.PAN));\n    useHotkeys(Hotkey.INTERACT.command, () => (editorEngine.mode = EditorMode.INTERACT));\n    useHotkeys(Hotkey.INSERT_DIV.command, () => (editorEngine.mode = EditorMode.INSERT_DIV));\n    useHotkeys(Hotkey.INSERT_TEXT.command, () => (editorEngine.mode = EditorMode.INSERT_TEXT));\n\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.PAN), { keydown: true });\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.DESIGN), { keyup: true });\n\n    useHotkeys('alt', () => editorEngine.elements.showMeasurement(), { keydown: true });\n    useHotkeys('alt', () => editorEngine.overlay.removeMeasurement(), { keyup: true });\n\n    // Actions\n    useHotkeys(Hotkey.UNDO.command, () => editorEngine.action.undo());\n    useHotkeys(Hotkey.REDO.command, () => editorEngine.action.redo());\n    useHotkeys(Hotkey.ENTER.command, () => editorEngine.text.editSelectedElement());\n    useHotkeys(Hotkey.REFRESH_LAYERS.command, () => editorEngine.refreshLayers());\n    useHotkeys(Hotkey.OPEN_DEV_TOOL.command, () => editorEngine.inspect());\n\n    // Group\n    useHotkeys(Hotkey.GROUP.command, () => editorEngine.group.groupSelectedElements());\n    useHotkeys(Hotkey.UNGROUP.command, () => editorEngine.group.ungroupSelectedElement());\n\n    // Copy\n    useHotkeys(Hotkey.COPY.command, () => editorEngine.copy.copy());\n    useHotkeys(Hotkey.PASTE.command, () => editorEngine.copy.paste());\n    useHotkeys(Hotkey.CUT.command, () => editorEngine.copy.cut());\n    useHotkeys(Hotkey.DUPLICATE.command, () => {\n        if (editorEngine.isWindowSelected) {\n            editorEngine.duplicateWindow();\n        } else {\n            editorEngine.copy.duplicate();\n        }\n    });\n\n    // AI\n    useHotkeys(Hotkey.ADD_AI_CHAT.command, () => (editorEngine.editPanelTab = EditorTabValue.CHAT));\n    useHotkeys(Hotkey.NEW_AI_CHAT.command, () => {\n        editorEngine.editPanelTab = EditorTabValue.CHAT;\n        editorEngine.chat.conversation.startNewConversation();\n    });\n\n    // Move\n    useHotkeys(Hotkey.MOVE_LAYER_UP.command, () => editorEngine.move.moveSelected('up'));\n    useHotkeys(Hotkey.MOVE_LAYER_DOWN.command, () => editorEngine.move.moveSelected('down'));\n\n    useHotkeys(Hotkey.SHOW_HOTKEYS.command, () => {\n        editorEngine.isHotkeysOpen = !editorEngine.isHotkeysOpen;\n    });\n\n    return (\n        <>\n            <DeleteKey />\n            {children}\n        </>\n    );\n};\n\nexport default HotkeysArea;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/BaseRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getOffsets' is assigned a value but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":231,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { ClickRectState } from '@/lib/editor/engine/overlay/state';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\nconst SPACING = {\n    base: 8,\n    padding: 16,\n};\n\nconst DIMENSIONS = {\n    singleLineHeight: 32,\n    minInputWidth: 280,\n    buttonHeight: 36, // Standard button height\n    multiLineRows: 4,\n    minCharsToSubmit: 4,\n};\n\nconst ANIMATION = {\n    DISTANCE_THRESHOLD: 300, // pixels - adjust this value as needed\n    TRANSITION_DURATION: 100, // ms\n};\n\nconst getOffsets = (isMultiline: boolean) => {\n    const chatButtonHeight = DIMENSIONS.buttonHeight + SPACING.padding;\n    const inputHeight = isMultiline\n        ? DIMENSIONS.singleLineHeight * (DIMENSIONS.multiLineRows - 1) + SPACING.padding\n        : DIMENSIONS.singleLineHeight + SPACING.padding;\n\n    return {\n        chatButton: chatButtonHeight,\n        input: chatButtonHeight + inputHeight,\n    };\n};\n\nconst DEFAULT_INPUT_STATE = {\n    value: '',\n    isVisible: false,\n    isMultiline: false,\n    isSubmitting: false,\n};\n\nexport const OverlayChat = observer(\n    ({ selectedEl, elementId }: { selectedEl: ClickRectState | null; elementId: string }) => {\n        const editorEngine = useEditorEngine();\n        const isInteractMode = editorEngine.mode === EditorMode.INTERACT;\n        const [inputState, setInputState] = useState(DEFAULT_INPUT_STATE);\n        const [isComposing, setIsComposing] = useState(false);\n        const textareaRef = useRef<HTMLTextAreaElement>(null);\n        const prevChatPositionRef = useRef<{ x: number; y: number } | null>(null);\n\n        // Add effect to reset input state when elementId changes\n        useEffect(() => {\n            setInputState(DEFAULT_INPUT_STATE);\n        }, [elementId]);\n\n        // Get current chat position\n        const chatPosition = {\n            x: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().left ?? 0)\n                : 0,\n            y: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().bottom ?? 0)\n                : 0,\n        };\n\n        // Calculate distance from previous chat position\n        const distance = prevChatPositionRef.current\n            ? Math.sqrt(\n                  Math.pow(chatPosition.x - prevChatPositionRef.current.x, 2) +\n                      Math.pow(chatPosition.y - prevChatPositionRef.current.y, 2),\n              )\n            : 0;\n\n        useEffect(() => {\n            prevChatPositionRef.current = chatPosition;\n        }, [chatPosition.x, chatPosition.y]);\n\n        const animationClass =\n            distance > ANIMATION.DISTANCE_THRESHOLD\n                ? 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200'\n                : 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200';\n\n        useEffect(() => {\n            if (elementId) {\n                requestAnimationFrame(() => {\n                    const element = document.querySelector(`[data-element-id=\"${elementId}\"]`);\n                    if (element) {\n                        element.classList.remove('scale-[0.2]', 'opacity-0', '-translate-y-2');\n                        element.classList.add('scale-100', 'opacity-100', 'translate-y-0');\n                    }\n                });\n            }\n        }, [elementId]);\n\n        if (\n            !selectedEl ||\n            isInteractMode ||\n            editorEngine.chat.isWaiting ||\n            editorEngine.chat.streamingMessage\n        ) {\n            return null;\n        }\n\n        const handleSubmit = async () => {\n            const messageToSend = inputState.value;\n            editorEngine.editPanelTab = EditorTabValue.CHAT;\n            await editorEngine.chat.sendNewMessage(messageToSend);\n            setInputState(DEFAULT_INPUT_STATE);\n        };\n\n        const containerStyle: React.CSSProperties = {\n            position: 'fixed',\n            top: selectedEl.top - 8,\n            left: selectedEl.left + selectedEl.width / 2,\n            transform: 'translate(-50%, 0)',\n            transformOrigin: 'center center',\n            pointerEvents: 'auto',\n            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n        };\n\n        return (\n            <div\n                style={containerStyle}\n                onClick={(e) => e.stopPropagation()}\n                className={animationClass}\n                data-element-id={elementId}\n            >\n                <div\n                    className={cn(\n                        'rounded-xl backdrop-blur-lg transition-all duration-300',\n                        'shadow-xl shadow-background-secondary/50',\n                        inputState.isVisible\n                            ? 'bg-background/80 border shadow-xl shadow-background-secondary/50 p-1'\n                            : 'bg-background-secondary/85 dark:bg-background/85 border-foreground-secondary/20 hover:border-foreground-secondary/50 p-0.5',\n                        'border flex relative',\n                    )}\n                >\n                    {!inputState.isVisible ? (\n                        // Chat Button\n                        <button\n                            onClick={() => setInputState((prev) => ({ ...prev, isVisible: true }))}\n                            className=\"rounded-lg hover:text-foreground-primary transition-colors px-2.5 py-1.5 flex flex-row items-center gap-2 w-full\"\n                        >\n                            <Icons.Sparkles className=\"w-4 h-4\" />\n                            <span className=\"text-miniPlus whitespace-nowrap\">Chat with AI</span>\n                        </button>\n                    ) : (\n                        // Input Field\n                        <div className=\"flex flex-row items-top gap-1 w-full min-w-[280px] relative\">\n                            <Button\n                                size=\"icon\"\n                                onClick={() =>\n                                    setInputState((prev) => ({\n                                        ...prev,\n                                        isVisible: false,\n                                        value: '',\n                                    }))\n                                }\n                                className={cn(\n                                    'group h-6 w-6 absolute left-1 top-1 z-10 border-none shadow-none bg-transparent hover:bg-transparent',\n                                    'transition-all duration-200',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'opacity-0 -translate-x-2 scale-75 pointer-events-none'\n                                        : 'opacity-100 translate-x-0 scale-100 pointer-events-auto',\n                                )}\n                                disabled={inputState.isSubmitting}\n                            >\n                                <Icons.CrossS className=\"h-4 w-4 text-foreground-secondary group-hover:text-foreground transition-colors\" />\n                            </Button>\n                            <Textarea\n                                aria-label=\"Chat message input\"\n                                ref={textareaRef}\n                                className={cn(\n                                    'w-full text-xs break-words p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px] rounded-lg',\n                                    'transition-all duration-150 ease-in-out',\n                                    'pr-10 backdrop-blur-lg',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'pl-2'\n                                        : 'pl-8',\n                                    'bg-background-secondary/75 text-foreground-primary border-background-secondary/75',\n                                    'max-h-[80px] caret-[#FA003C]',\n                                    'selection:bg-[#FA003C]/30 selection:text-[#FA003C]',\n                                )}\n                                value={inputState.value}\n                                onChange={(e) => {\n                                    setInputState((prev) => ({ ...prev, value: e.target.value }));\n                                    if (textareaRef.current) {\n                                        textareaRef.current.style.height = 'auto';\n                                        const maxHeight = DIMENSIONS.singleLineHeight * 4;\n                                        textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, maxHeight)}px`;\n                                        textareaRef.current.scrollTop =\n                                            textareaRef.current.scrollHeight;\n                                    }\n                                }}\n                                placeholder=\"Type your message...\"\n                                style={{\n                                    resize: 'none',\n                                    minHeight: DIMENSIONS.singleLineHeight,\n                                    height: 'auto',\n                                    overflowY: 'auto',\n                                    overflowX: 'hidden',\n                                    overscrollBehavior: 'contain',\n                                    lineHeight: '1.5',\n                                }}\n                                rows={1}\n                                autoFocus\n                                disabled={inputState.isSubmitting}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n                                        e.preventDefault();\n                                        const charCount = inputState.value.trim().length;\n                                        if (charCount >= DIMENSIONS.minCharsToSubmit) {\n                                            handleSubmit();\n                                        }\n                                    } else if (e.key === 'Escape') {\n                                        e.preventDefault();\n                                        setInputState((prev) => ({\n                                            ...prev,\n                                            isVisible: false,\n                                            value: '',\n                                        }));\n                                    }\n                                }}\n                                onCompositionStart={() => setIsComposing(true)}\n                                onCompositionEnd={(e) => {\n                                    setIsComposing(false);\n                                }}\n                            />\n                            {inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit && (\n                                <Button\n                                    size=\"icon\"\n                                    variant=\"secondary\"\n                                    onClick={handleSubmit}\n                                    className={cn(\n                                        'absolute right-0.5 bottom-0.5 h-7 w-7',\n                                        'bg-foreground-primary text-white hover:bg-foreground-hover',\n                                    )}\n                                    disabled={inputState.isSubmitting}\n                                >\n                                    <Icons.ArrowRight className=\"h-4 w-4 text-background\" />\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ClickRect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shouldShowResizeHandles' is defined but never used.","line":103,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'renderDimensionLabels' is assigned a value but never used.","line":301,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RectDimensions } from '@/lib/editor/engine/overlay/rect';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport { nanoid } from 'nanoid';\nimport { BaseRect } from './BaseRect';\n\nconst parseCssBoxValues = (\n    value: string,\n): {\n    adjusted: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n    original: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n} => {\n    const originalValues = value.split(' ').map((v) => parseInt(v));\n    const adjustedValues = originalValues.map((v) => Math.round(adaptValueToCanvas(v)));\n\n    let original = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    let adjusted = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n\n    switch (originalValues.length) {\n        case 1:\n            original = {\n                top: originalValues[0],\n                right: originalValues[0],\n                bottom: originalValues[0],\n                left: originalValues[0],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[0],\n                bottom: adjustedValues[0],\n                left: adjustedValues[0],\n            };\n            break;\n        case 2:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[0],\n                left: originalValues[1],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[0],\n                left: adjustedValues[1],\n            };\n            break;\n        case 4:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[2],\n                left: originalValues[3],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[2],\n                left: adjustedValues[3],\n            };\n            break;\n        default:\n            original = { top: 0, right: 0, bottom: 0, left: 0 };\n            adjusted = { top: 0, right: 0, bottom: 0, left: 0 };\n            break;\n    }\n    return { adjusted, original };\n};\n\ninterface ClickRectProps extends RectDimensions {\n    isComponent?: boolean;\n    styles: Record<string, string>;\n    shouldShowResizeHandles: boolean;\n}\n\nexport const ClickRect = ({\n    width,\n    height,\n    top,\n    left,\n    isComponent,\n    styles,\n    shouldShowResizeHandles,\n}: ClickRectProps) => {\n    const renderMarginLabels = () => {\n        if (!styles?.margin) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.margin);\n\n        const patternId = `margin-pattern-${nanoid()}`;\n        const maskId = `margin-mask-${nanoid()}`;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.blue?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.blue?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect\n                            x={-adjusted.left}\n                            y={-adjusted.top}\n                            width={width + adjusted.left + adjusted.right}\n                            height={height + adjusted.top + adjusted.bottom}\n                            fill=\"white\"\n                        />\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" />\n                    </mask>\n                </defs>\n                <rect\n                    x={-adjusted.left}\n                    y={-adjusted.top}\n                    width={width + adjusted.left + adjusted.right}\n                    height={height + adjusted.top + adjusted.bottom}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing margin labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={-adjusted.top / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height + adjusted.bottom / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={-adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width + adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderPaddingLabels = () => {\n        if (!styles?.padding) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.padding);\n\n        const patternId = `padding-pattern-${nanoid()}`;\n        const maskId = `padding-mask-${nanoid()}`;\n        const pWidth = width - adjusted.left - adjusted.right;\n        const pHeight = height - adjusted.top - adjusted.bottom;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.green?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.green?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\" />\n                        <rect\n                            x={adjusted.left}\n                            y={adjusted.top}\n                            width={pWidth}\n                            height={pHeight}\n                            fill=\"black\"\n                        />\n                    </mask>\n                </defs>\n                <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width={width}\n                    height={height}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing padding labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={adjusted.top / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height - adjusted.bottom / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width - adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderDimensionLabels = () => {\n        const rectColor = isComponent ? colors.purple?.[500] : colors.red?.[500];\n        const displayWidth = parseFloat(styles?.width || '0').toFixed(0);\n        const displayHeight = parseFloat(styles?.height || '0').toFixed(0);\n        const text = `${displayWidth} Ã— ${displayHeight}`;\n\n        // Constants from showDimensions\n        const padding = { top: 2, bottom: 2, left: 4, right: 4 };\n        const radius = 2;\n\n        // Assuming text width is roughly 80px and height is 16px (you may want to measure this dynamically)\n        const rectWidth = 80 + padding.left + padding.right;\n        const rectHeight = 16 + padding.top + padding.bottom;\n        const rectX = (width - rectWidth) / 2;\n        const rectY = height;\n\n        // Path for rounded rectangle\n        const path =\n            rectWidth > width\n                ? `M${rectX + radius},${rectY} q-${radius},0 -${radius},${radius} v${rectHeight - 2 * radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - 2 * radius} q0,-${radius} -${radius},-${radius} z`\n                : `M${rectX},${rectY} v${rectHeight - radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - radius} z`;\n\n        return (\n            <g>\n                <path d={path} fill={rectColor} />\n                <text\n                    x={width / 2}\n                    y={rectY + rectHeight / 2}\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                >\n                    {text}\n                </text>\n            </g>\n        );\n    };\n\n    return (\n        <BaseRect\n            width={width}\n            height={height}\n            top={top}\n            left={left}\n            isComponent={isComponent}\n            strokeWidth={2}\n        >\n            {renderMarginLabels()}\n            {renderPaddingLabels()}\n            {/* {renderDimensionLabels()} */}\n            {/* {shouldShowResizeHandles && (\n                <ResizeHandles\n                    width={width}\n                    height={height}\n                    left={left}\n                    top={top}\n                    borderRadius={parseInt(styles?.['borderRadius'] || '0')}\n                    isComponent={isComponent}\n                    styles={styles}\n                />\n            )} */}\n        </BaseRect>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/HoverRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/InsertRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/MeasurementOverlay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditorAttributes' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { colors } from '@onlook/ui/tokens';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { RectDimensions } from '../../../../lib/editor/engine/overlay/rect';\nimport React, { memo, useMemo } from 'react';\nimport { BaseRect } from './BaseRect';\nimport { useEditorEngine } from '@/components/Context';\nimport { adaptRectToCanvas, adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\ninterface Distance {\n    value: number;\n    start: Point;\n    end: Point;\n    supportLine?: {\n        start: Point;\n        end: Point;\n    };\n}\n\ninterface RectPoint extends RectDimensions {\n    right: number;\n    bottom: number;\n}\n\ninterface MeasurementProps {\n    fromRect: RectDimensions;\n    toRect: RectDimensions;\n}\n\nconst toRectPoint = (rect: RectDimensions): RectPoint => ({\n    ...rect,\n    right: rect.left + rect.width,\n    bottom: rect.top + rect.height,\n    width: rect.width,\n    height: rect.height,\n    left: rect.left,\n    top: rect.top,\n});\n\nconst isBetween = (x: number, start: number, end: number): boolean => {\n    return (start <= x && x <= end) || (end <= x && x <= start);\n};\n\nconst isIntersect = (rectA: RectPoint, rectB: RectPoint): boolean => {\n    if (rectA.left > rectB.right || rectB.left > rectA.right) {\n        return false;\n    }\n    if (rectA.top > rectB.bottom || rectB.top > rectA.bottom) {\n        return false;\n    }\n    return true;\n};\n\nconst getInsideRect = (rectA: RectPoint, rectB: RectPoint): RectPoint | null => {\n    if (\n        rectA.left >= rectB.left &&\n        rectA.right <= rectB.right &&\n        rectA.top >= rectB.top &&\n        rectA.bottom <= rectB.bottom\n    ) {\n        return rectA;\n    } else if (\n        rectB.left >= rectA.left &&\n        rectB.right <= rectA.right &&\n        rectB.top >= rectA.top &&\n        rectB.bottom <= rectA.bottom\n    ) {\n        return rectB;\n    }\n    return null;\n};\n\nexport const MeasurementOverlay: React.FC<MeasurementProps> = memo(({ fromRect, toRect }) => {\n    const editorEngine = useEditorEngine();\n    const webview = editorEngine.webviews.getWebview(editorEngine.elements.selected?.[0]?.webviewId);\n\n    const fromRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(fromRect, webview) : fromRect),\n        [fromRect, webview],\n    );\n    const toRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(toRect, webview) : toRect),\n        [toRect, webview],\n    );\n\n    const fromRectPoint = useMemo(() => toRectPoint(fromRect), [fromRect]);\n    const toRectPointResult = useMemo(() => toRectPoint(toRect), [toRect]);\n\n    type DistanceWithoutSupportLine = Omit<Distance, 'supportLine'>;\n\n    const createDistance = (\n        distance: DistanceWithoutSupportLine,\n        toRect: RectPoint,\n        isHorizontal: boolean,\n    ): Distance => {\n        const result: Distance = { ...distance };\n        const { start, end } = distance;\n\n        if (isHorizontal && !isBetween(start.y, toRect.top, toRect.bottom)) {\n            result.supportLine = {\n                start: { x: end.x, y: toRect.top },\n                end: { x: end.x, y: end.y },\n            };\n        } else if (!isHorizontal && !isBetween(start.x, toRect.left, toRect.right)) {\n            result.supportLine = {\n                start: { x: toRect.left, y: end.y },\n                end: { x: end.x, y: end.y },\n            };\n        }\n\n        return result;\n    };\n\n    const distances = useMemo(() => {\n        if (!webview) {\n            return [];\n        }\n        const result: Distance[] = [];\n\n        // Scale values for display\n        const scaleValue = (value: number) => adaptValueToCanvas(Math.abs(value), true);\n\n        // Calculate horizontal distances\n        let y = fromRectPoint.top + fromRectPoint.height / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                y = insideRect.top + insideRect.height / 2;\n            } else if (fromRectPoint.bottom > toRectPointResult.bottom) {\n                y = fromRectPoint.top + (toRectPointResult.bottom - fromRectPoint.top) / 2;\n            } else {\n                y = fromRectPoint.bottom - (fromRectPoint.bottom - toRectPointResult.top) / 2;\n            }\n\n            const leftDistance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                leftDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(leftDistance);\n\n            const rightDistance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                rightDistance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(rightDistance);\n        } else if (fromRectPoint.left > toRectPointResult.right) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.right),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.right < toRectPointResult.left) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.left),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.left, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.right >= toRectPointResult.left\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.right, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.left <= toRectPointResult.left\n        ) {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        } else {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                        start: { x: fromRectPoint.left, y },\n                        end: { x: toRectPointResult.left, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        }\n\n        // Calculate vertical distances\n        let x = fromRectPoint.left + fromRectPoint.width / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                x = insideRect.left + insideRect.width / 2;\n            } else if (fromRectPoint.right > toRectPointResult.right) {\n                x = fromRectPoint.left + (toRectPointResult.right - fromRectPoint.left) / 2;\n            } else {\n                x = fromRectPoint.right - (fromRectPoint.right - toRectPointResult.left) / 2;\n            }\n\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        } else if (fromRectPoint.top > toRectPointResult.bottom) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.bottom < toRectPointResult.top) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.top),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (isBetween(fromRectPoint.top, toRectPointResult.top, toRectPointResult.bottom)) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.bottom, toRectPointResult.top, toRectPointResult.bottom)\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else {\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        }\n\n        return result;\n    }, [fromRectPoint, toRectPointResult]);\n\n    const viewBox = useMemo(\n        () => ({\n            minX: Math.min(fromRectAdjusted.left, toRectAdjusted.left) - 100,\n            minY: Math.min(fromRectAdjusted.top, toRectAdjusted.top) - 100,\n            width:\n                Math.abs(toRectAdjusted.left - fromRectAdjusted.left) +\n                Math.max(fromRectAdjusted.width, toRectAdjusted.width) +\n                200,\n            height:\n                Math.abs(toRectAdjusted.top - fromRectAdjusted.top) +\n                Math.max(fromRectAdjusted.height, toRectAdjusted.height) +\n                200,\n        }),\n        [fromRectAdjusted, toRectAdjusted],\n    );\n\n    const svgContent = (\n        <g transform={`translate(${-viewBox.minX},${-viewBox.minY})`}>\n            <rect\n                x={fromRect.left}\n                y={fromRect.top}\n                width={fromRect.width}\n                height={fromRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <rect\n                x={toRect.left}\n                y={toRect.top}\n                width={toRect.width}\n                height={toRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            {/* Distance lines and labels */}\n\n            {/* Distance lines and labels */}\n            {distances.map((distance, index) => {\n                const isHorizontal = distance.start.y === distance.end.y;\n                const midX = (distance.start.x + distance.end.x) / 2 + (isHorizontal ? 24 : 0);\n                const midY = (distance.start.y + distance.end.y) / 2 + (isHorizontal ? 0 : 16);\n\n                return (\n                    <g key={index}>\n                        <line\n                            x1={distance.start.x}\n                            y1={distance.start.y}\n                            x2={distance.end.x}\n                            y2={distance.end.y}\n                            stroke={colors.red?.[500]}\n                            strokeWidth={1}\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                        />\n                        {distance.supportLine && (\n                            <line\n                                x1={distance.supportLine.start.x}\n                                y1={distance.supportLine.start.y}\n                                x2={distance.supportLine.end.x}\n                                y2={distance.supportLine.end.y}\n                                stroke={colors.red?.[500]}\n                                strokeWidth={1}\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeDasharray=\"10 6\"\n                            />\n                        )}\n                        <g transform={`translate(${midX},${midY})`}>\n                            <rect\n                                x={-20}\n                                y={-10}\n                                width={40}\n                                height={20}\n                                fill={colors.red?.[500]}\n                                rx={2}\n                            />\n                            <text\n                                x={0}\n                                y={0}\n                                fill=\"white\"\n                                fontSize={12}\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                            >\n                                {Math.round(distance.value)}\n                            </text>\n                        </g>\n                    </g>\n                );\n            })}\n        </g>\n    );\n\n    return (\n        <BaseRect\n            width={viewBox.width}\n            height={viewBox.height}\n            top={viewBox.minY}\n            left={viewBox.minX}\n            strokeWidth={0}\n        >\n            {svgContent}\n        </BaseRect>\n    );\n});\n\nMeasurementOverlay.displayName = 'MeasurementOverlay';\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":379,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'styles' is defined but never used.","line":380,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":380,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport React from 'react';\n\nenum ResizeHandlePosition {\n    TOP = 'top',\n    RIGHT = 'right',\n    BOTTOM = 'bottom',\n    LEFT = 'left',\n    TOP_LEFT = 'top-left',\n    TOP_RIGHT = 'top-right',\n    BOTTOM_RIGHT = 'bottom-right',\n    BOTTOM_LEFT = 'bottom-left',\n}\n\ninterface HandleProps {\n    x: number;\n    y: number;\n    color: string;\n    position: ResizeHandlePosition;\n    styles: Record<string, string>;\n    handleMouseDown: (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => void;\n}\n\nconst getCursorStyle = (position: ResizeHandlePosition): string => {\n    switch (position) {\n        case 'top':\n        case 'bottom':\n            return 'ns-resize';\n        case 'left':\n        case 'right':\n            return 'ew-resize';\n        case 'top-left':\n        case 'bottom-right':\n            return 'nwse-resize';\n        case 'top-right':\n        case 'bottom-left':\n            return 'nesw-resize';\n        default:\n            return 'pointer';\n    }\n};\n\nconst createCaptureOverlay = (startEvent: React.MouseEvent) => {\n    const captureOverlay = document.createElement('div');\n    captureOverlay.style.position = 'fixed';\n    captureOverlay.style.top = '0';\n    captureOverlay.style.left = '0';\n    captureOverlay.style.width = '100%';\n    captureOverlay.style.height = '100%';\n    captureOverlay.style.cursor = window.getComputedStyle(startEvent.currentTarget).cursor;\n    captureOverlay.style.zIndex = '9999';\n    document.body.appendChild(captureOverlay);\n    return captureOverlay;\n};\n\ninterface ResizeDimensions {\n    width: number;\n    height: number;\n}\n\nconst calculateNewElementDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.round(Math.max(startWidth - adjustedDeltaX, 0));\n    } else if (position.includes('right')) {\n        newWidth = Math.round(Math.max(startWidth + adjustedDeltaX, 0));\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.round(Math.max(startHeight - adjustedDeltaY, 0));\n    } else if (position.includes('bottom')) {\n        newHeight = Math.round(Math.max(startHeight + adjustedDeltaY, 0));\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\nconst calculateNewOverlayDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.max(startWidth - adjustedDeltaX, 0);\n    } else if (position.includes('right')) {\n        newWidth = Math.max(startWidth + adjustedDeltaX, 0);\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.max(startHeight - adjustedDeltaY, 0);\n    } else if (position.includes('bottom')) {\n        newHeight = Math.max(startHeight + adjustedDeltaY, 0);\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\ninterface EdgeHandleProps extends HandleProps {\n    handleDoubleClick: (e: React.MouseEvent, position: ResizeHandlePosition) => void;\n}\n\nconst EdgeHandle: React.FC<EdgeHandleProps> = ({\n    x,\n    y,\n    position,\n    styles,\n    handleMouseDown,\n    handleDoubleClick,\n}) => {\n    const size = 4;\n    const halfSize = size / 2;\n    const isVertical =\n        position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n\n    const lastClickRef = React.useRef<number>(0);\n    const DOUBLE_CLICK_TIMEOUT = 300;\n\n    const handleMouseDownRect = (e: React.MouseEvent) => {\n        const currentTime = Date.now();\n        const timeSinceLastClick = currentTime - lastClickRef.current;\n        const doubleClick = timeSinceLastClick < DOUBLE_CLICK_TIMEOUT;\n\n        if (doubleClick) {\n            handleDoubleClick(e, position);\n            lastClickRef.current = 0;\n        } else {\n            handleMouseDown(e, position, styles);\n            lastClickRef.current = currentTime;\n        }\n    };\n\n    return (\n        <rect\n            x={isVertical ? x - halfSize : 0}\n            y={isVertical ? 0 : y - halfSize}\n            width={isVertical ? size : '100%'}\n            height={isVertical ? '100%' : size}\n            fill=\"transparent\"\n            style={{ cursor: getCursorStyle(position), pointerEvents: 'auto' }}\n            onMouseDown={handleMouseDownRect}\n        />\n    );\n};\n\nconst CornerHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: getCursorStyle(position),\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            {/* Invisible larger circle for hit area */}\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n        </g>\n    );\n};\n\nconst RadiusHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: 'nwse-resize',\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n            <circle cx={halfSize} cy={halfSize} r={1.5} fill={color} />\n        </g>\n    );\n};\n\ninterface ResizeHandlesProps {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n    borderRadius: number;\n    isComponent?: boolean;\n    styles: Record<string, string>;\n}\n\nexport const ResizeHandles: React.FC<ResizeHandlesProps> = ({\n    width,\n    height,\n    borderRadius,\n    isComponent,\n    styles,\n}) => {\n    const editorEngine = useEditorEngine();\n    const color = isComponent ? colors.purple?.[500] : colors.red?.[500];\n\n    // Calculate radius handle position (20px or 25% of width/height, whichever is smaller)\n    const radiusOffset = Math.min(20, width * 0.25, height * 0.25);\n    const showRadius = width >= 10 && height >= 10;\n\n    const updateWidth = (newWidth: string) => {\n        editorEngine.style.update('width', newWidth);\n    };\n\n    const updateHeight = (newHeight: string) => {\n        editorEngine.style.update('height', newHeight);\n    };\n\n    const updateWidthHeight = (newWidth: string, newHeight: string) => {\n        editorEngine.style.updateMultiple({\n            width: newWidth,\n            height: newHeight,\n        });\n    };\n\n    const updateRadius = (newRadius: string) => {\n        editorEngine.style.update('border-radius', newRadius);\n    };\n\n    const handleDoubleClick = (e: React.MouseEvent, position: ResizeHandlePosition) => {\n        const isVertical =\n            position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n        const targetValue = e.altKey ? '100%' : 'fit-content';\n        if (isVertical) {\n            editorEngine.style.update('width', targetValue);\n        } else {\n            editorEngine.style.update('height', targetValue);\n        }\n    };\n\n    const handleMouseDownDimensions = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startDimensions = {\n            width: parseFloat(styles.width),\n            height: parseFloat(styles.height),\n        };\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n            const adjustedDelta = {\n                x: adaptValueToCanvas(deltaX, true),\n                y: adaptValueToCanvas(deltaY, true),\n            };\n\n            const newElementDimensions = calculateNewElementDimensions(\n                position,\n                startDimensions,\n                adjustedDelta,\n            );\n            const newOverlayDimensions = calculateNewOverlayDimensions(\n                position,\n                { width, height },\n                {\n                    x: deltaX,\n                    y: deltaY,\n                },\n            );\n\n            const widthChanged = newElementDimensions.width !== startDimensions.width;\n            const heightChanged = newElementDimensions.height !== startDimensions.height;\n\n            if (widthChanged && heightChanged) {\n                updateWidthHeight(\n                    `${newElementDimensions.width}px`,\n                    `${newElementDimensions.height}px`,\n                );\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                    height: newOverlayDimensions.height,\n                });\n            } else if (widthChanged) {\n                updateWidth(`${newElementDimensions.width}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                });\n            } else if (heightChanged) {\n                updateHeight(`${newElementDimensions.height}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    height: newOverlayDimensions.height,\n                });\n            }\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    const handleMouseDownRadius = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startRadius = borderRadius;\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n\n            // Use the larger of the two deltas for a more natural radius adjustment\n            const delta = Math.max(Math.abs(deltaX), Math.abs(deltaY)) * Math.sign(deltaX + deltaY);\n            const adjustedDelta = adaptValueToCanvas(delta, true);\n\n            const newRadius = Math.max(0, startRadius + adjustedDelta);\n            updateRadius(`${Math.round(newRadius)}px`);\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <>\n            {/* Edge handles */}\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={0}\n                position={ResizeHandlePosition.TOP}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width}\n                y={height / 2}\n                position={ResizeHandlePosition.RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={0}\n                y={height / 2}\n                position={ResizeHandlePosition.LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n\n            {/* Corner handles */}\n            <CornerHandle\n                color={color}\n                x={0}\n                y={0}\n                position={ResizeHandlePosition.TOP_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={0}\n                position={ResizeHandlePosition.TOP_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={0}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n\n            {showRadius && (\n                <RadiusHandle\n                    color={color}\n                    x={radiusOffset}\n                    y={radiusOffset}\n                    position={ResizeHandlePosition.TOP_LEFT}\n                    styles={styles}\n                    handleMouseDown={handleMouseDownRadius}\n                />\n            )}\n        </>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/TextEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/PanOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/ChatHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":270,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":317,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { FOCUS_CHAT_INPUT_EVENT } from '@/lib/editor/engine/chat';\nimport { EditorTabValue } from '@/lib/models';\nimport { compressImage } from '@/lib/utils';\nimport type { ChatMessageContext, ImageMessageContext } from '@onlook/models/chat';\nimport { MessageContextType } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { AnimatePresence } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { DraftContextPill } from './ContextPills/DraftContextPill';\nimport { DraftImagePill } from './ContextPills/DraftingImagePill';\nimport type { SuggestionsRef } from './Suggestions';\nimport Suggestions from './Suggestions';\n\nexport const ChatInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const [inputValue, setInputValue] = useState('');\n    const [isComposing, setIsComposing] = useState(false);\n    const [actionTooltipOpen, setActionTooltipOpen] = useState(false);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const focusInput = () => {\n        requestAnimationFrame(() => {\n            textareaRef.current?.focus();\n        });\n    };\n\n    useEffect(() => {\n        if (textareaRef.current && !editorEngine.chat.isWaiting) {\n            focusInput();\n        }\n    }, [editorEngine.chat.conversation.current?.messages.length]);\n\n    useEffect(() => {\n        if (editorEngine.editPanelTab === EditorTabValue.CHAT) {\n            focusInput();\n        }\n    }, [editorEngine.editPanelTab]);\n\n    useEffect(() => {\n        const focusHandler = () => {\n            if (textareaRef.current && !editorEngine.chat.isWaiting) {\n                focusInput();\n            }\n        };\n\n        window.addEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n        return () => window.removeEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n    }, []);\n\n    useEffect(() => {\n        const handleGlobalKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && suggestionRef.current?.handleEnterSelection()) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Stop the event from bubbling to the canvas\n                e.stopImmediatePropagation();\n                // Handle the suggestion selection\n                suggestionRef.current.handleEnterSelection();\n            }\n        };\n\n        // Capture phase to intercept before it reaches the canvas\n        window.addEventListener('keydown', handleGlobalKeyDown, true);\n        return () => window.removeEventListener('keydown', handleGlobalKeyDown, true);\n    }, []);\n\n    const disabled = editorEngine.chat.isWaiting || editorEngine.chat.context.context.length === 0;\n    const inputEmpty = !inputValue || inputValue.trim().length === 0;\n\n    function handleInput(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        if (isComposing) {\n            return;\n        }\n        e.currentTarget.style.height = 'auto';\n        e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Tab') {\n            // Always prevent default tab behavior\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Only let natural tab order continue if handleTabNavigation returns false\n            const handled = suggestionRef.current?.handleTabNavigation();\n            if (!handled) {\n                // Focus the textarea\n                textareaRef.current?.focus();\n            }\n        } else if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (suggestionRef.current?.handleEnterSelection()) {\n                setTimeout(() => textareaRef.current?.focus(), 0);\n                return;\n            }\n\n            if (!inputEmpty) {\n                sendMessage();\n            }\n        }\n    };\n\n    function sendMessage() {\n        if (inputEmpty) {\n            console.warn('Empty message');\n            return;\n        }\n        if (editorEngine.chat.isWaiting) {\n            console.warn('Already waiting for response');\n            return;\n        }\n        editorEngine.chat.sendNewMessage(inputValue);\n        setInputValue('');\n    }\n\n    const handleRemoveContext = (contextToRemove: ChatMessageContext) => {\n        const newContext = [...editorEngine.chat.context.context].filter(\n            (context) => context !== contextToRemove,\n        );\n\n        editorEngine.chat.context.context = newContext;\n    };\n\n    const handleOpenFileDialog = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.currentTarget.blur(); // Removes focus from the button to prevent tooltip from showing\n        const inputElement = document.createElement('input');\n        inputElement.type = 'file';\n        inputElement.accept = 'image/*';\n        inputElement.onchange = () => {\n            if (inputElement.files && inputElement.files.length > 0) {\n                const file = inputElement.files?.[0];\n                const fileName = file.name;\n                handleImageEvent(file, fileName);\n            }\n        };\n        inputElement.click();\n    };\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n        const items = e.clipboardData.items;\n\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                e.preventDefault();\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Pasted image');\n                break;\n            }\n        }\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.removeAttribute('data-dragging-image');\n\n        const items = e.dataTransfer.items;\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Dropped image');\n                break;\n            }\n        }\n    };\n\n    const handleImageEvent = async (file: File, displayName?: string) => {\n        const reader = new FileReader();\n        reader.onload = async (event) => {\n            const compressedImage = await compressImage(file);\n            const base64URL = compressedImage || (event.target?.result as string);\n            const contextImage: ImageMessageContext = {\n                type: MessageContextType.IMAGE,\n                content: base64URL,\n                mimeType: file.type,\n                displayName: displayName || file.name,\n            };\n            editorEngine.chat.context.context.push(contextImage);\n        };\n        reader.readAsDataURL(file);\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            e.currentTarget.setAttribute('data-dragging-image', isDragging.toString());\n        }\n    };\n\n    const suggestionRef = useRef<SuggestionsRef>(null);\n\n    return (\n        <div\n            className={cn(\n                'flex flex-col w-full text-foreground-tertiary border-t text-small transition-colors duration-200',\n                '[&[data-dragging-image=true]]:bg-teal-500/40',\n                isDragging && 'cursor-copy',\n            )}\n            onDrop={(e) => {\n                handleDrop(e);\n                setIsDragging(false);\n            }}\n            onDragOver={handleDragOver}\n            onDragEnter={(e) => {\n                e.preventDefault();\n                handleDragStateChange(true, e);\n            }}\n            onDragLeave={(e) => {\n                if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                    handleDragStateChange(false, e);\n                }\n            }}\n        >\n            <Suggestions\n                ref={suggestionRef}\n                disabled={disabled}\n                inputValue={inputValue}\n                setInput={(suggestion) => {\n                    setInputValue(suggestion);\n                    textareaRef.current?.focus();\n                    setTimeout(() => {\n                        if (textareaRef.current) {\n                            textareaRef.current.scrollTop = textareaRef.current.scrollHeight;\n                        }\n                    }, 100);\n                }}\n                onSuggestionFocus={(isFocused) => {\n                    if (!isFocused) {\n                        textareaRef.current?.focus();\n                    }\n                }}\n            />\n\n            <div className=\"flex flex-col w-full p-4\">\n                <div\n                    className={cn(\n                        'flex flex-row flex-wrap w-full gap-1.5 text-micro mb-1 text-foreground-secondary',\n                        editorEngine.chat.context.context.length > 0 ? 'min-h-6' : 'h-0',\n                    )}\n                >\n                    <AnimatePresence mode=\"popLayout\">\n                        {editorEngine.chat.context.context.map(\n                            (context: ChatMessageContext, index: number) => {\n                                if (context.type === MessageContextType.IMAGE) {\n                                    return (\n                                        <DraftImagePill\n                                            key={`image-${context.content}`}\n                                            context={context}\n                                            onRemove={() => handleRemoveContext(context)}\n                                        />\n                                    );\n                                }\n                                return (\n                                    <DraftContextPill\n                                        key={`${context.type}-${context.content}`}\n                                        context={context}\n                                        onRemove={() => handleRemoveContext(context)}\n                                    />\n                                );\n                            },\n                        )}\n                    </AnimatePresence>\n                </div>\n                <Textarea\n                    ref={textareaRef}\n                    disabled={disabled}\n                    placeholder={\n                        disabled\n                            ? projectsManager.runner?.isRunning ||\n                              projectsManager.runner?.isStarting\n                                ? 'Select an element to chat'\n                                : 'Start the project to chat'\n                            : 'Ask follow up questions or provide more context...'\n                    }\n                    className={cn(\n                        'mt-2 overflow-auto max-h-32 text-small p-0 border-0 shadow-none rounded-none caret-[#FA003C]',\n                        'selection:bg-[#FA003C]/30 selection:text-[#FA003C] text-foreground-primary',\n                        'placeholder:text-foreground-primary/50',\n                        'cursor-text',\n                        isDragging ? 'pointer-events-none' : 'pointer-events-auto',\n                    )}\n                    rows={3}\n                    style={{ resize: 'none' }}\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onInput={handleInput}\n                    onKeyDown={handleKeyDown}\n                    onPaste={handlePaste}\n                    onCompositionStart={() => setIsComposing(true)}\n                    onCompositionEnd={(e) => {\n                        setIsComposing(false);\n                    }}\n                    onDragEnter={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragenter', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragOver={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragover', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragLeave={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                            e.currentTarget.parentElement?.dispatchEvent(\n                                new DragEvent('dragleave', {\n                                    bubbles: true,\n                                    cancelable: true,\n                                    dataTransfer: e.dataTransfer,\n                                }),\n                            );\n                        }\n                    }}\n                    onDrop={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('drop', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                />\n            </div>\n            <div className=\"flex flex-row w-full justify-between pt-2 pb-2 px-2\">\n                <div className=\"flex flex-row justify-start gap-1.5\">\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={handleOpenFileDialog}\n                                disabled={disabled}\n                            >\n                                <Icons.Image\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled ? 'Select an element to start' : 'Upload Image Reference'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={() => {\n                                    editorEngine.chat.context.addScreenshotContext();\n                                }}\n                                disabled={disabled}\n                            >\n                                <Icons.Laptop\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled\n                                    ? 'Select an element to start'\n                                    : 'Add screenshot of the current page'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Button\n                        variant={'outline'}\n                        className=\"w-fit h-fit py-0.5 px-2.5 text-foreground-tertiary hidden\"\n                    >\n                        <Icons.FilePlus className=\"mr-2\" />\n                        <span className=\"text-smallPlus\">File Reference</span>\n                    </Button>\n                </div>\n                {editorEngine.chat.isWaiting ? (\n                    <Tooltip open={actionTooltipOpen} onOpenChange={setActionTooltipOpen}>\n                        <TooltipTrigger asChild>\n                            <Button\n                                size={'icon'}\n                                variant={'secondary'}\n                                className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                                onClick={() => {\n                                    setActionTooltipOpen(false);\n                                    editorEngine.chat.stopStream();\n                                }}\n                            >\n                                <Icons.Stop />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>{'Stop response'}</TooltipContent>\n                    </Tooltip>\n                ) : (\n                    <Button\n                        size={'icon'}\n                        variant={'secondary'}\n                        className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                        disabled={inputEmpty || editorEngine.chat.isWaiting}\n                        onClick={sendMessage}\n                    >\n                        <Icons.ArrowRight />\n                    </Button>\n                )}\n            </div>\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/AssistantMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/MarkdownRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":35,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":41,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@onlook/ui/utils';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport CodeChangeDisplay from '../CodeChangeDisplay';\nimport BashCodeDisplay from '../CodeChangeDisplay/BashCodeDisplay';\n\nconst MarkdownRenderer = ({\n    messageId,\n    content,\n    className = '',\n    applied,\n    isStream = false,\n}: {\n    messageId: string;\n    content: string;\n    className?: string;\n    applied: boolean;\n    isStream?: boolean;\n}) => {\n    const transformedContent = content.replace(\n        /^(.*?)\\n```(\\w+)\\n/gm,\n        (_, filePath, language) => `\\`\\`\\`${language}:${filePath}\\n`,\n    );\n\n    return (\n        <div\n            className={cn(\n                'prose prose-stone dark:prose-invert prose-compact text-small break-words',\n                className,\n            )}\n        >\n            <ReactMarkdown\n                remarkPlugins={[remarkGfm]}\n                components={{\n                    pre: ({ node, ...props }) => (\n                        <pre\n                            className=\"m-0 p-0 mb-2 rounded-lg bg-none border-0.5 border-border-primary\"\n                            {...props}\n                        />\n                    ),\n                    code({ node, className, children, ...props }) {\n                        const match = /language-(\\w+)(:?.+)?/.exec(className || '');\n                        const language = match?.[1];\n                        const filePath = match?.[2]?.substring(1);\n                        const codeContent = String(children).replace(/\\n$/, '');\n\n                        if (language === 'bash') {\n                            return <BashCodeDisplay content={codeContent} isStream={isStream} />;\n                        }\n\n                        if (match && filePath) {\n                            return (\n                                <CodeChangeDisplay\n                                    path={filePath}\n                                    content={codeContent}\n                                    messageId={messageId}\n                                    applied={applied}\n                                    isStream={isStream}\n                                />\n                            );\n                        }\n\n                        return (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        );\n                    },\n                }}\n            >\n                {transformedContent}\n            </ReactMarkdown>\n        </div>\n    );\n};\n\nexport default MarkdownRenderer;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/StreamMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/UserMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/BashCodeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeDiff.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CollapsibleCodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftingImagePill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/SentContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ErrorView/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/Suggestions/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/BooleanProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/CodeProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/TextProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":135,"column":49,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":140,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":163,"column":53,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":170,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { PropsType, type DomElement, type PropsParsingResult } from '@onlook/models/element';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\nimport BooleanProp from './BooleanProp';\nimport CodeProp from './CodeProp';\nimport TextProp from './TextProp';\n\nexport interface Prop {\n    type: PropsType;\n    displayType?: string;\n    value: string | boolean;\n    icon?: React.ReactNode;\n}\n\nconst PropsTab = () => {\n    const [props, setProps] = useState<{ [key: string]: Prop } | null>({});\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n\n    const editorEngine = useEditorEngine();\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            getRootProps(selectedEl);\n        }\n    }, [editorEngine.elements.selected]);\n\n    async function getRootProps(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootProps: PropsParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_PROPS,\n                newRoot,\n            );\n\n            if (rootProps.type === 'props' && rootProps.props.length > 0) {\n                const elementProps: Record<string, Prop> = {};\n                rootProps.props.forEach((prop) => {\n                    const newProp: Prop = {\n                        type: prop.type,\n                        value: prop.value,\n                    };\n                    elementProps[prop.key] = newProp;\n                });\n                setProps(elementProps);\n            } else {\n                setProps(null);\n            }\n        }\n    }\n\n    const createCodeDiffRequest = async (\n        oid: string | undefined,\n        value: string | number | boolean,\n        name: string,\n    ) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n\n        request.push({\n            oid,\n            attributes: { [name]: value },\n            textContent: null,\n            overrideClasses: false,\n            structureChanges: [],\n        });\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('attributes action');\n        }\n    };\n\n    function viewSource() {\n        if (selectedEl?.oid) {\n            editorEngine.code.viewSource(selectedEl?.oid);\n        }\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2 px-3 w-full\">\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs\">Detected Properties</span>\n                <Button size={'icon'} variant={'ghost'}>\n                    <Icons.Plus />\n                </Button>\n            </div>\n            <div className=\"flex flex-col gap-4 mb-5\">\n                {props !== null &&\n                    Object.keys(props).map((key) => {\n                        const prop = props[key];\n                        return (\n                            <div className=\"flex flex-row items-center\" key={key}>\n                                <div className=\"flex flex-row gap-2 items-center\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"text-sm\">{key}</span>\n                                        <span className=\"text-xs text-foreground-secondary\">\n                                            {prop.displayType ? prop.displayType : prop.type}\n                                        </span>\n                                    </div>\n                                </div>\n                                <div className=\"text-end ml-auto\">\n                                    {prop.type === 'code' ? (\n                                        <CodeProp onClick={viewSource} />\n                                    ) : prop.type === 'boolean' ? (\n                                        <BooleanProp\n                                            value={prop.value as boolean}\n                                            change={(value) => {\n                                                setProps((prev) =>\n                                                    prev !== null\n                                                        ? {\n                                                              ...prev,\n                                                              [key]: {\n                                                                  ...prev[key],\n                                                                  value,\n                                                              },\n                                                          }\n                                                        : null,\n                                                );\n                                                selectedEl?.oid &&\n                                                    createCodeDiffRequest(\n                                                        selectedEl?.oid,\n                                                        value,\n                                                        key,\n                                                    );\n                                            }}\n                                        />\n                                    ) : (\n                                        (prop.type === PropsType.String ||\n                                            prop.type === PropsType.Number) && (\n                                            <TextProp\n                                                prop={prop}\n                                                type={prop.type}\n                                                onChange={(value) => {\n                                                    setProps((prev) =>\n                                                        prev !== null\n                                                            ? {\n                                                                  ...prev,\n                                                                  [key]: {\n                                                                      ...prev[key],\n                                                                      value,\n                                                                  },\n                                                              }\n                                                            : null,\n                                                    );\n                                                }}\n                                                onBlur={(val) => {\n                                                    selectedEl?.oid &&\n                                                        createCodeDiffRequest(\n                                                            selectedEl?.oid,\n                                                            prop.type === PropsType.Number\n                                                                ? parseInt(val)\n                                                                : val,\n                                                            key,\n                                                        );\n                                                }}\n                                            />\n                                        )\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n        </div>\n    );\n};\n\nexport default PropsTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/BorderInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/DisplayInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/FillInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/GridRowColInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/NestedInputs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/PositionInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { CompoundStyleImpl } from '@/lib/editor/styles';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport TextInput from '../single/TextInput';\nimport { cn } from '@onlook/ui/utils';\nimport SelectInput from '../single/SelectInput';\nimport { Icons } from '@onlook/ui/icons/index';\nimport type { DomElement } from '@onlook/models/element';\n\ntype Position = 'top' | 'bottom' | 'left' | 'right';\ntype PositionState = Record<Position, boolean>;\n\ninterface LineProps {\n    position: Position;\n    isActive: boolean;\n    onClick: (position: Position) => void;\n}\n\nconst PositionLine = ({ position, isActive, onClick }: LineProps) => {\n    const positionStyles = {\n        top: 'top-0.5 w-[calc(100%-16px)] left-[8px]',\n        right: 'right-0.5 h-[calc(100%-16px)] top-[8px]',\n        bottom: 'bottom-0.5 w-[calc(100%-16px)] left-[8px]',\n        left: 'left-0.5 h-[calc(100%-16px)] top-[8px]',\n    };\n\n    const lineStyles = {\n        top: 'w-1 h-3',\n        right: 'h-1 w-3',\n        bottom: 'w-1 h-3',\n        left: 'h-1 w-3',\n    };\n\n    return (\n        <div\n            className={cn(\n                'absolute cursor-pointer transition-colors flex items-center justify-center ',\n                positionStyles[position],\n            )}\n            onClick={() => onClick(position)}\n        >\n            <div\n                className={cn(\n                    'rounded-full',\n                    lineStyles[position],\n                    isActive\n                        ? 'bg-red-500 hover:bg-red-600'\n                        : 'bg-background-active hover:bg-primary',\n                )}\n            />\n        </div>\n    );\n};\n\nconst CenterButton = ({ isCenter, onClick }: { isCenter: boolean; onClick: () => void }) => (\n    <div\n        className=\"bg-background-onlook rounded relative flex items-center justify-center px-2 py-2 border border-background-active\"\n        onClick={onClick}\n    >\n        <Icons.Plus\n            className={cn(\n                'w-4 h-4 hover:text-red-500 transition-colors hover:cursor-pointer hover:scale-110',\n                isCenter ? 'text-red-500' : 'text-gray-400',\n            )}\n        />\n    </div>\n);\n\nconst PositionInput = observer(({ compoundStyle }: { compoundStyle: CompoundStyleImpl }) => {\n    const editorEngine = useEditorEngine();\n    const [lines, setLines] = useState<PositionState>({\n        top: false,\n        bottom: false,\n        left: false,\n        right: false,\n    });\n    const [isCentered, setIsCentered] = useState(false);\n\n    const resetPositionState = () => {\n        setLines({\n            top: false,\n            bottom: false,\n            left: false,\n            right: false,\n        });\n    };\n\n    const onLineClicked = (position: Position) => {\n        setLines((prev) => {\n            const newState = { ...prev, [position]: !prev[position], center: false };\n            if (!newState[position]) {\n                editorEngine.style.update(position, 'auto');\n            }\n            return newState;\n        });\n    };\n\n    const onMainValueChanged = (key: string, value: string) => {\n        if (value === 'absolute') {\n            centerElement();\n        } else {\n            editorEngine.style.updateStyleNoAction(\n                Object.fromEntries(\n                    compoundStyle.children.map((elementStyle) => [elementStyle.key, 'auto']),\n                ),\n            );\n            resetPositionState();\n        }\n    };\n\n    const getElementAndParent = async () => {\n        const elements = editorEngine.elements.selected;\n        if (elements.length === 0) {\n            return null;\n        }\n\n        const results = [];\n        for (const element of elements) {\n            if (!element?.domId) {\n                continue;\n            }\n\n            const webview = editorEngine.webviews.getWebview(element.webviewId);\n            if (!webview) {\n                continue;\n            }\n\n            const parent: DomElement | null = await webview.executeJavaScript(\n                `window.api?.getParentElement('${element.domId}')`,\n            );\n            if (!parent) {\n                continue;\n            }\n\n            results.push({ element, parent });\n        }\n\n        return results.length > 0 ? results : null;\n    };\n\n    const centerElement = async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return;\n        }\n        if (isCentered) {\n            return;\n        }\n\n        const updates: Record<string, string> = {};\n        for (const { element, parent } of elementPairs) {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n\n            updates.left = `${Math.round(centerX)}px`;\n            updates.top = `${Math.round(centerY)}px`;\n        }\n\n        editorEngine.style.updateMultiple(updates);\n    };\n\n    const checkIfCentered = useCallback(async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return false;\n        }\n\n        const allCentered = elementPairs.every(({ element, parent }) => {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n            const currentLeft = element.rect.x - parent.rect.x;\n            const currentTop = element.rect.y - parent.rect.y;\n\n            return Math.abs(currentLeft - centerX) < 1 && Math.abs(currentTop - centerY) < 1;\n        });\n\n        setIsCentered(allCentered);\n        return allCentered;\n    }, [editorEngine.style.selectedStyle]);\n\n    const renderMainControl = () => (\n        <div className=\"flex flex-row items-center justify-between w-full\">\n            <p className=\"text-xs text-foreground-onlook\">{compoundStyle.head.displayName}</p>\n            <div className=\"flex flex-row space-x-1\">\n                <SelectInput elementStyle={compoundStyle.head} onValueChange={onMainValueChanged} />\n            </div>\n        </div>\n    );\n\n    const renderLines = useCallback(() => {\n        return (\n            <div className=\"w-16 h-16 bg-background-onlook rounded relative flex items-center justify-center px-4 py-4\">\n                <CenterButton isCenter={isCentered} onClick={centerElement} />\n                {(['top', 'right', 'bottom', 'left'] as Position[]).map((position) => (\n                    <PositionLine\n                        key={position}\n                        position={position}\n                        isActive={lines[position]}\n                        onClick={onLineClicked}\n                    />\n                ))}\n            </div>\n        );\n    }, [lines, centerElement, isCentered]);\n\n    const renderPositionInputs = useCallback(() => {\n        const elementStyles = compoundStyle.children;\n        const currentPosition = compoundStyle.head.getValue(\n            editorEngine.style.selectedStyle?.styles || {},\n        );\n\n        if (currentPosition !== 'absolute') {\n            return null;\n        }\n\n        const positionStyles = {\n            top: 'top-0 left-1/2 -translate-x-1/2',\n            bottom: 'bottom-0 left-1/2 -translate-x-1/2',\n            left: 'left-0 top-1/2 -translate-y-1/2',\n            right: 'right-0 top-1/2 -translate-y-1/2',\n        };\n\n        return (\n            <div className=\"relative h-36 w-52 flex items-center justify-center mb-4 mx-auto\">\n                {elementStyles.map((elementStyle) => {\n                    const position = elementStyle.key.toLowerCase() as Position;\n                    const isActive = lines[position];\n\n                    return (\n                        <TextInput\n                            key={elementStyle.key}\n                            elementStyle={elementStyle}\n                            disabled={!isActive}\n                            className={cn(\n                                'absolute w-16 bg-background-onlook text-foreground-onlook text-center rounded p-2',\n                                positionStyles[position],\n                                !isActive && 'opacity-50 cursor-not-allowed',\n                            )}\n                        />\n                    );\n                })}\n                {renderLines()}\n            </div>\n        );\n    }, [compoundStyle.children, editorEngine.style.selectedStyle, lines, renderLines]);\n\n    useEffect(() => {\n        const updatePosition = async () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n\n            const position = selectedStyle.styles?.['position'];\n\n            if (position === 'absolute') {\n                setLines({\n                    top: selectedStyle.styles?.['top'] !== 'auto',\n                    bottom: selectedStyle.styles?.['bottom'] !== 'auto',\n                    left: selectedStyle.styles?.['left'] !== 'auto',\n                    right: selectedStyle.styles?.['right'] !== 'auto',\n                });\n            }\n        };\n\n        checkIfCentered();\n        updatePosition();\n    }, [editorEngine.style.selectedStyle]);\n\n    return (\n        <div className=\"space-y-2\">\n            {renderMainControl()}\n            {renderPositionInputs()}\n        </div>\n    );\n});\n\nexport default PositionInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/AutoLayoutInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ImagePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/Popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/NumberUnitInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":42,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":42,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":124,"column":25,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":124,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { observer } from 'mobx-react-lite';\nimport { type ChangeEvent, useEffect, useState } from 'react';\n\nconst NumberUnitInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [numberValue, setNumberValue] = useState<string>('');\n        const [unitValue, setUnitValue] = useState<string>('');\n        const [prevNumberValue, setPrevNumberValue] = useState<string>('');\n\n        useEffect(() => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(selectedStyle.styles);\n            const { numberVal, unitVal } = stringToParsedValue(\n                newValue,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        }, [editorEngine.style.selectedStyle]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const handleNumberInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n            setNumberValue(e.currentTarget.value);\n\n            const newNumber = e.currentTarget.value;\n            const parsedNewNumber = Number.parseFloat(newNumber);\n            const { min, max } = elementStyle.params || {};\n\n            if (min !== undefined && parsedNewNumber < min) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            if (max !== undefined && parsedNewNumber > max) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be more than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            const { unitVal } = stringToParsedValue(\n                e.currentTarget.value,\n                elementStyle.key === 'opacity',\n            );\n            const newUnit = unitVal === '' ? 'px' : unitVal;\n            setUnitValue(newUnit);\n        };\n\n        const handleUnitInputChange = (e: ChangeEvent<HTMLSelectElement>) => {\n            const newUnit = e.currentTarget.value;\n            const newValue = parsedValueToString(numberValue, newUnit);\n            setUnitValue(newUnit);\n            sendStyleUpdate(newValue);\n        };\n\n        const setValueCallback = (value: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(\n                value,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            if (e.currentTarget.value !== prevNumberValue) {\n                const value = parsedValueToString(\n                    Number.parseFloat(numberValue).toString(),\n                    unitValue,\n                );\n                sendStyleUpdate(value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n\n        const renderNumberInput = () => {\n            return (\n                <input\n                    type=\"text\"\n                    placeholder=\"--\"\n                    value={numberValue}\n                    onKeyDown={(e) =>\n                        handleNumberInputKeyDown(\n                            e,\n                            elementStyle,\n                            parsedValueToString(numberValue, unitValue),\n                            setValueCallback,\n                            sendStyleUpdate,\n                        )\n                    }\n                    onChange={handleNumberInputChange}\n                    className=\"w-full p-[6px] px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                    onFocus={() => {\n                        setPrevNumberValue(numberValue);\n                        editorEngine.history.startTransaction;\n                    }}\n                    onBlur={handleBlur}\n                />\n            );\n        };\n\n        const renderUnitInput = () => {\n            return (\n                <div className=\"relative w-full group\">\n                    <select\n                        value={unitValue}\n                        className=\"p-[6px] w-full px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start appearance-none focus:outline-none focus:ring-0\"\n                        onChange={handleUnitInputChange}\n                    >\n                        {elementStyle.params?.units?.map((option) => (\n                            <option key={option} value={option}>\n                                {option}\n                            </option>\n                        ))}\n                    </select>\n                    <div className=\"text-foreground-onlook group-hover:text-foreground-hover absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                        <Icons.ChevronDown />\n                    </div>\n                </div>\n            );\n        };\n\n        return (\n            <div className=\"flex flex-row gap-1 justify-end text-xs w-32\">\n                {renderNumberInput()}\n                {renderUnitInput()}\n            </div>\n        );\n    },\n);\n\nexport default NumberUnitInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/SelectInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":80,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":80,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport { Icons } from '@onlook/ui/icons';\nimport { ToggleGroup, ToggleGroupItem } from '@onlook/ui/toggle-group';\nimport { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\n\nconst OVERRIDE_OPTIONS: Record<string, string | undefined> = {\n    'flex-start': 'start',\n    'flex-end': 'end',\n    'space-between': 'stretch',\n    'space-around': 'around',\n    'space-evenly': 'evenly',\n    'flex-start flex-end': 'between',\n    'flex-start flex-start': 'around',\n    'flex-end flex-end': 'evenly',\n};\n\nconst OVERRIDE_ICONS: Record<string, JSX.Element | string | Record<string, JSX.Element>> = {\n    'flex-start': <Icons.ArrowRight />,\n    'flex-end': <Icons.ArrowDown />,\n    'space-between': <Icons.ArrowRight />,\n    'space-around': <Icons.ArrowRight />,\n    'space-evenly': <Icons.ArrowRight />,\n    'flex-start flex-end': <Icons.ArrowRight />,\n    'flex-start flex-start': <Icons.ArrowRight />,\n    'flex-end flex-end': <Icons.ArrowRight />,\n    start: <Icons.TextAlignLeft />,\n    center: <Icons.TextAlignCenter />,\n    end: <Icons.TextAlignRight />,\n    solid: <Icons.BorderSolid />,\n    dashed: <Icons.BorderDashed />,\n    dotted: <Icons.BorderDotted />,\n    row: <Icons.ArrowRight />,\n    column: <Icons.ArrowDown />,\n    block: '--',\n    justifyContent: {\n        'flex-start': <Icons.AlignLeft />,\n        center: <Icons.AlignCenterHorizontally />,\n        'flex-end': <Icons.AlignRight />,\n        'space-between': <Icons.SpaceBetweenHorizontally />,\n        stretch: <Icons.SpaceBetweenHorizontally />,\n    },\n    alignItems: {\n        'flex-start': <Icons.AlignTop />,\n        center: <Icons.AlignCenterVertically />,\n        'flex-end': <Icons.AlignBottom />,\n        'space-between': <Icons.SpaceBetweenVertically />,\n        stretch: <Icons.SpaceBetweenVertically />,\n    },\n};\n\nconst ICON_SELECTION = ['justifyContent', 'alignItems'];\n\nconst SelectInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n\n        useEffect(() => {\n            if (!editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle]);\n\n        const handleValueChange = (newValue: string) => {\n            if (!newValue) {\n                return;\n            }\n            setValue(newValue);\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const getFlexDirection = () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return 'row'; // default to row\n            }\n            return selectedStyle.styles?.['flexDirection'] ?? 'row'; // fallback to row if undefined\n        };\n\n        const getIcon = (option: string) => {\n            const flexDirection = getFlexDirection();\n            if (elementStyle.key === 'justifyContent') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option];\n            } else if (elementStyle.key === 'alignItems') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option];\n            }\n            const icon = OVERRIDE_ICONS[option];\n            if (typeof icon === 'object' && !React.isValidElement(icon)) {\n                return null;\n            }\n            return icon || option;\n        };\n\n        if (!elementStyle.params?.options) {\n            return null;\n        }\n\n        if (elementStyle.params.options.length <= 3 || ICON_SELECTION.includes(elementStyle.key)) {\n            return (\n                <ToggleGroup\n                    className={`w-32 overflow-hidden ${\n                        ICON_SELECTION.includes(elementStyle.key) ? 'gap-0.75' : ''\n                    }`}\n                    size=\"sm\"\n                    type=\"single\"\n                    value={value}\n                    onValueChange={handleValueChange}\n                >\n                    {elementStyle.params?.options.map((option) => (\n                        <ToggleGroupItem\n                            className=\"capitalize text-xs data-[state=on]:bg-background-onlook/75 data-[state=on]:text-foreground-active hover:text-foreground-hover\"\n                            value={option}\n                            key={option}\n                        >\n                            {getIcon(option)}\n                        </ToggleGroupItem>\n                    ))}\n                </ToggleGroup>\n            );\n        }\n\n        return (\n            <div className=\"relative w-32\">\n                <select\n                    name={elementStyle.displayName}\n                    value={value}\n                    className=\"p-[6px] w-full px-2 text-start rounded border-none text-xs text-active bg-background-onlook/75 appearance-none focus:outline-none focus:ring-0 capitalize\"\n                    onChange={(event) => handleValueChange(event.currentTarget.value)}\n                >\n                    {!elementStyle.params.options.includes(value) && (\n                        <option value={value}>{value}</option>\n                    )}\n                    {elementStyle.params.options.map((option) => (\n                        <option value={option} key={option}>\n                            {OVERRIDE_OPTIONS[option] ?? option}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"text-foreground-onlook absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                    <Icons.ChevronDown />\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default SelectInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TagDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/AutoComplete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":435,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":437,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":458,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":460,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":535,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":537,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":558,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":560,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { StyleMode } from '@/lib/editor/engine/style';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models/code';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { ClassParsingResult, DomElement } from '@onlook/models/element';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport { AutoComplete, type SuggestionsListRef } from './AutoComplete';\n\ninterface History {\n    past: string[];\n    present: string;\n    future: string[];\n    error?: string;\n}\n\nconst TailwindInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const suggestionRef = useRef<SuggestionsListRef>(null);\n    const [showSuggestions, setShowSuggestions] = useState(true);\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n    let resizeObserver: ResizeObserver | undefined;\n\n    const instanceRef = useRef<HTMLTextAreaElement>(null);\n    const [instanceHistory, setInstanceHistory] = useState<History>({\n        past: [],\n        present: '',\n        future: [],\n    });\n    const [isInstanceFocused, setIsInstanceFocused] = useState(false);\n\n    const rootRef = useRef<HTMLTextAreaElement>(null);\n    const [rootHistory, setRootHistory] = useState<History>({\n        past: [],\n        present: '',\n        future: [],\n    });\n    const [isRootFocused, setIsRootFocused] = useState(false);\n\n    const updateHistory = (\n        value: string,\n        { past, present }: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        setHistory({\n            past: [...past, present],\n            present: value,\n            future: [],\n        });\n    };\n\n    const didChangeFromOriginal = (history: History, value: string) => {\n        if (history.past.length === 0) {\n            return false;\n        }\n        return history.past?.[0] !== value;\n    };\n\n    const undo = (history: History, setHistory: React.Dispatch<React.SetStateAction<History>>) => {\n        const { past, present, future } = history;\n        if (past.length === 0) {\n            return;\n        }\n\n        const previous = past[past.length - 1];\n        const newPast = past.slice(0, past.length - 1);\n\n        setHistory({\n            past: newPast,\n            present: previous,\n            future: [present, ...future],\n        });\n    };\n\n    const redo = (history: History, setHistory: React.Dispatch<React.SetStateAction<History>>) => {\n        const { past, present, future } = history;\n        if (future.length === 0) {\n            return;\n        }\n\n        const next = future[0];\n        const newFuture = future.slice(1);\n\n        setHistory({\n            past: [...past, present],\n            present: next,\n            future: newFuture,\n        });\n    };\n\n    const handleKeyDown = (\n        e: React.KeyboardEvent<HTMLTextAreaElement>,\n        history: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        if (showSuggestions) {\n            suggestionRef.current?.handleKeyDown(e);\n            return;\n        }\n\n        if (e.key === 'Enter' || e.key === 'Tab' || e.key === 'Escape') {\n            e.currentTarget.blur();\n            e.preventDefault();\n            return;\n        }\n\n        if ((e.metaKey || e.ctrlKey) && e.key === 'z') {\n            e.preventDefault();\n            if (e.shiftKey) {\n                redo(history, setHistory);\n            } else {\n                undo(history, setHistory);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            if (!isInstanceFocused) {\n                getInstanceClasses(selectedEl);\n            }\n            if (!isRootFocused) {\n                getRootClasses(selectedEl);\n            }\n        } else {\n            setSelectedEl(undefined);\n            setInstanceHistory({ past: [], present: '', future: [] });\n            setRootHistory({ past: [], present: '', future: [] });\n        }\n    }, [\n        editorEngine.elements.selected,\n        editorEngine.ast.mappings.layers,\n        editorEngine.history.length,\n    ]);\n\n    async function getInstanceClasses(domEl: DomElement) {\n        const newInstance = await editorEngine.ast.getTemplateNodeById(domEl.instanceId);\n\n        if (newInstance) {\n            const instanceClasses: ClassParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_CLASS,\n                newInstance,\n            );\n\n            if (instanceClasses.type === 'error') {\n                console.warn(instanceClasses.reason);\n            }\n\n            setInstanceHistory({\n                past: [],\n                present:\n                    instanceClasses.type === 'classes'\n                        ? instanceClasses.value.join(' ')\n                        : instanceClasses.type,\n                future: [],\n                error: instanceClasses.type === 'error' ? instanceClasses.reason : undefined,\n            });\n        }\n    }\n\n    async function getRootClasses(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootClasses: ClassParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_CLASS,\n                newRoot,\n            );\n\n            if (rootClasses.type === 'error') {\n                console.warn(rootClasses.reason);\n            }\n\n            setRootHistory({\n                past: [],\n                present:\n                    rootClasses.type === 'classes' ? rootClasses.value.join(' ') : rootClasses.type,\n                future: [],\n                error: rootClasses.type === 'error' ? rootClasses.reason : undefined,\n            });\n        }\n    }\n\n    async function getPrevRootClasses(domEl: DomElement): Promise<string[]> {\n        try {\n            const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n            if (newRoot) {\n                const rootClasses: ClassParsingResult = await invokeMainChannel(\n                    MainChannels.GET_TEMPLATE_NODE_CLASS,\n                    newRoot,\n                );\n\n                if (rootClasses.type === 'error') {\n                    console.warn(rootClasses.reason);\n                }\n\n                return rootClasses.type === 'classes' ? rootClasses.value : [];\n            }\n            return [];\n        } catch (err) {\n            console.log('erpr ', err);\n            return [];\n        }\n    }\n\n    const createCodeDiffRequest = async (oid: string | undefined, className: string) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n        const selectedElements = editorEngine.elements.selected;\n        const selectedElprevClasses = await getPrevRootClasses(selectedElements[0]);\n        const computedClass = compareClassNames(selectedElprevClasses, className.split(' '));\n\n        for (const ele of selectedElements) {\n            let computedClassName: string = '';\n            const isNonSelectedElement = ele.oid !== oid;\n\n            if (isNonSelectedElement) {\n                const prevClasses = await getPrevRootClasses(ele);\n                computedClassName = computeClassForNonSelectedElement(\n                    computedClass.added,\n                    computedClass.removed,\n                    prevClasses,\n                );\n            } else {\n                computedClassName = className;\n            }\n\n            request.push({\n                oid: ele.oid || '',\n                attributes: { className: computedClassName },\n                textContent: null,\n                overrideClasses: true,\n                structureChanges: [],\n            });\n        }\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('tailwind action');\n        }\n    };\n\n    function computeClassForNonSelectedElement(\n        addedClasses: string[],\n        removedClasses: string[],\n        originalClasses: string[],\n    ): string {\n        const finalClasses: string[] = [...originalClasses];\n        let classRemoved: boolean = false;\n\n        if (removedClasses.length > 0) {\n            removedClasses.forEach((cls) => {\n                const index = finalClasses.indexOf(cls);\n                if (index !== -1) {\n                    finalClasses.splice(index, 1);\n                    classRemoved = true;\n                }\n            });\n        }\n\n        if (removedClasses.length > 0 && classRemoved) {\n            addedClasses.forEach((cls) => {\n                if (!finalClasses.includes(cls)) {\n                    finalClasses.push(cls);\n                }\n            });\n        } else {\n            if (removedClasses.length === 0) {\n                addedClasses.forEach((cls) => {\n                    if (!finalClasses.includes(cls)) {\n                        finalClasses.push(cls);\n                    }\n                });\n            }\n        }\n\n        return finalClasses.join(' ');\n    }\n\n    function compareClassNames(\n        oldClasses: string[],\n        newClasses: string[],\n    ): {\n        added: string[];\n        removed: string[];\n    } {\n        const addedClasses = newClasses.filter((cls) => !oldClasses.includes(cls));\n\n        const removedClasses = oldClasses.filter((cls) => !newClasses.includes(cls));\n\n        return {\n            added: addedClasses,\n            removed: removedClasses,\n        };\n    }\n\n    const handleInput = (\n        e: React.FormEvent<HTMLTextAreaElement>,\n        history: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        const { value, selectionStart } = e.currentTarget;\n        updateHistory(value, history, setHistory);\n        suggestionRef.current?.handleInput(value, selectionStart);\n    };\n\n    const adjustHeight = (textarea: HTMLTextAreaElement) => {\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight + 20}px`;\n    };\n\n    const navigateToTemplateNode = async (oid: string | null) => {\n        if (!oid) {\n            console.error('No templateNode ID provided for navigation.');\n            return;\n        }\n\n        try {\n            await window.api.invoke(MainChannels.VIEW_SOURCE_CODE, oid);\n        } catch (error) {\n            console.error('Error opening TemplateNode in IDE:', error);\n        }\n    };\n\n    useEffect(() => {\n        if (instanceRef.current) {\n            adjustHeight(instanceRef.current);\n        }\n    }, [instanceHistory.present]);\n\n    useEffect(() => {\n        if (rootRef.current) {\n            adjustHeight(rootRef.current);\n        }\n\n        if (rootRef.current) {\n            resizeObserver?.disconnect();\n            resizeObserver = new ResizeObserver(() => {\n                adjustHeight(rootRef.current!);\n            });\n            resizeObserver.observe(rootRef.current);\n\n            return () => {\n                resizeObserver?.disconnect();\n            };\n        }\n    }, [rootHistory.present]);\n\n    const EnterIndicator = ({ isInstance = false }: { isInstance?: boolean }) => {\n        return (\n            <div\n                className={cn(\n                    'absolute bottom-1 right-2 text-xs flex items-center',\n                    isInstance\n                        ? 'text-purple-300 dark:text-purple-300 selection:text-purple-50 selection:bg-purple-500/50 dark:selection:text-purple-50 dark:selection:bg-purple-500/50'\n                        : 'text-gray-500 selection:bg-gray-200 dark:selection:bg-gray-700',\n                )}\n            >\n                <span>enter to apply</span>\n                <Icons.Return className=\"ml-0.5\" />\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2 text-xs text-foreground-onlook shadow-none\">\n            {selectedEl?.oid && (\n                <div className=\"relative\">\n                    <div className=\"group cursor-pointer\">\n                        {selectedEl.instanceId && (\n                            <Tooltip>\n                                <TooltipTrigger asChild>\n                                    <button\n                                        className={cn(\n                                            'w-full flex items-center rounded-t h-6 px-1.5 gap-1 transition-colors border-[0.5px]',\n                                            editorEngine.style.mode === StyleMode.Root\n                                                ? 'bg-background-primary text-foreground-active border-background-tertiary'\n                                                : 'bg-background-secondary text-foreground-muted border-background-secondary group-hover:bg-background-primary/20 group-hover:text-foreground-active group-hover:border-background-tertiary/90 cursor-pointer',\n                                        )}\n                                        onClick={() => {\n                                            editorEngine.style.mode = StyleMode.Root;\n                                            rootRef.current?.focus();\n                                        }}\n                                    >\n                                        <Icons.Component className=\"h-3 w-3\" />{' '}\n                                        {'Main Component Classes'}\n                                    </button>\n                                </TooltipTrigger>\n                                <TooltipPortal container={document.getElementById('style-tab-id')}>\n                                    <TooltipContent>\n                                        {'Changes apply to component code. This is the default.'}\n                                    </TooltipContent>\n                                </TooltipPortal>\n                            </Tooltip>\n                        )}\n                        <Textarea\n                            ref={rootRef}\n                            className={cn(\n                                'w-full text-xs break-normal p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px]',\n                                'transition-colors duration-150',\n                                editorEngine.style.mode === StyleMode.Root\n                                    ? 'bg-background-tertiary text-foreground-active border-background-tertiary cursor-text'\n                                    : 'bg-background-secondary/75 text-foreground-muted border-background-secondary/75 group-hover:bg-background-tertiary/50 group-hover:text-foreground-active group-hover:border-background-tertiary/50 cursor-pointer',\n                                selectedEl.instanceId\n                                    ? 'rounded-t-none'\n                                    : 'bg-background-secondary/75 focus:bg-background-tertiary',\n                            )}\n                            placeholder=\"Add tailwind classes here\"\n                            value={\n                                rootHistory.error\n                                    ? 'Warning: ' + rootHistory.error + ' Open the code to edit.'\n                                    : rootHistory.present\n                            }\n                            readOnly={!!rootHistory.error}\n                            onInput={(e) => handleInput(e, rootHistory, setRootHistory)}\n                            onKeyDown={(e) => handleKeyDown(e, rootHistory, setRootHistory)}\n                            onBlur={(e) => {\n                                setShowSuggestions(false);\n                                setIsRootFocused(false);\n                                selectedEl.oid &&\n                                    didChangeFromOriginal(rootHistory, e.target.value) &&\n                                    createCodeDiffRequest(selectedEl.oid, e.target.value);\n                            }}\n                            onFocus={() => {\n                                editorEngine.style.mode = StyleMode.Root;\n                                setIsRootFocused(true);\n                            }}\n                            onClick={() => {\n                                if (editorEngine.style.mode !== StyleMode.Root) {\n                                    editorEngine.style.mode = StyleMode.Root;\n                                    rootRef.current?.focus();\n                                }\n                            }}\n                        />\n                        {isRootFocused && (\n                            <AutoComplete\n                                ref={suggestionRef}\n                                showSuggestions={showSuggestions}\n                                currentInput={rootHistory.present}\n                                setShowSuggestions={setShowSuggestions}\n                                setCurrentInput={(newValue: string) => {\n                                    updateHistory(newValue, rootHistory, setRootHistory);\n                                    selectedEl.oid &&\n                                        didChangeFromOriginal(rootHistory, newValue) &&\n                                        createCodeDiffRequest(selectedEl.oid, newValue);\n                                }}\n                            />\n                        )}\n                    </div>\n                    {rootHistory.error ? (\n                        <div className=\"absolute bottom-1 right-2 text-xs flex items-center text-blue-500 cursor-pointer\">\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation(); // Prevents unfocusing the textarea\n                                    navigateToTemplateNode(selectedEl?.oid);\n                                }}\n                                className=\"underline\"\n                            >\n                                Go to source\n                            </button>\n                        </div>\n                    ) : (\n                        isRootFocused && <EnterIndicator />\n                    )}\n                </div>\n            )}\n\n            {selectedEl?.instanceId && (\n                <div className=\"relative\">\n                    <div\n                        className={cn(\n                            'group',\n                            editorEngine.style.mode !== StyleMode.Instance && 'cursor-pointer',\n                        )}\n                    >\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <button\n                                    className={cn(\n                                        'w-full flex items-center rounded-t h-6 px-1.5 gap-1 transition-colors border-[0.5px]',\n                                        editorEngine.style.mode === StyleMode.Instance\n                                            ? 'bg-purple-600 text-purple-50 border-purple-600 dark:bg-purple-700 dark:text-purple-50 dark:border-purple-700'\n                                            : 'bg-background-secondary text-foreground-muted border-background-secondary/90 group-hover:bg-purple-200 group-hover:text-purple-900 group-hover:border-purple-200 dark:group-hover:bg-purple-900/50 dark:group-hover:text-purple-100 dark:group-hover:border-purple-900/50',\n                                    )}\n                                    onClick={() => {\n                                        editorEngine.style.mode = StyleMode.Instance;\n                                        instanceRef.current?.focus();\n                                    }}\n                                >\n                                    <Icons.ComponentInstance className=\"h-3 w-3\" /> Instance Classes\n                                </button>\n                            </TooltipTrigger>\n                            <TooltipPortal container={document.getElementById('style-tab-id')}>\n                                <TooltipContent>{'Changes apply to instance code.'}</TooltipContent>\n                            </TooltipPortal>\n                        </Tooltip>\n                        <Textarea\n                            ref={instanceRef}\n                            className={cn(\n                                'w-full text-xs break-normal p-1.5 focus-visible:ring-0 resize-none shadow-none rounded-t-none border-[0.5px]',\n                                'transition-colors duration-150',\n                                editorEngine.style.mode === StyleMode.Instance\n                                    ? 'bg-purple-100 text-purple-900 border-purple-300 dark:bg-purple-900/75 dark:text-purple-100 dark:border-purple-600'\n                                    : 'bg-background-secondary/75 text-foreground-muted border-background-secondary/75 group-hover:bg-purple-100/50 group-hover:text-purple-900 group-hover:border-purple-200 dark:group-hover:bg-purple-900/30 dark:group-hover:text-purple-100 dark:group-hover:border-purple-900/30 cursor-pointer',\n                            )}\n                            placeholder=\"Add tailwind classes here\"\n                            value={\n                                instanceHistory.error\n                                    ? 'Warning: ' +\n                                      instanceHistory.error +\n                                      ' Open the code to edit.'\n                                    : instanceHistory.present\n                            }\n                            readOnly={!!instanceHistory.error}\n                            onInput={(e) => handleInput(e, instanceHistory, setInstanceHistory)}\n                            onKeyDown={(e) => handleKeyDown(e, instanceHistory, setInstanceHistory)}\n                            onBlur={(e) => {\n                                setShowSuggestions(false);\n                                setIsInstanceFocused(false);\n                                selectedEl?.instanceId &&\n                                    didChangeFromOriginal(instanceHistory, e.target.value) &&\n                                    createCodeDiffRequest(selectedEl.instanceId, e.target.value);\n                            }}\n                            onFocus={() => {\n                                editorEngine.style.mode = StyleMode.Instance;\n                                setIsInstanceFocused(true);\n                            }}\n                            onClick={() => {\n                                if (editorEngine.style.mode !== StyleMode.Instance) {\n                                    editorEngine.style.mode = StyleMode.Instance;\n                                    instanceRef.current?.focus();\n                                }\n                            }}\n                        />\n                        {isInstanceFocused && (\n                            <AutoComplete\n                                ref={suggestionRef}\n                                showSuggestions={showSuggestions}\n                                currentInput={instanceHistory.present}\n                                setShowSuggestions={setShowSuggestions}\n                                setCurrentInput={(newValue: string) => {\n                                    updateHistory(newValue, instanceHistory, setInstanceHistory);\n                                    selectedEl?.instanceId &&\n                                        didChangeFromOriginal(instanceHistory, newValue) &&\n                                        createCodeDiffRequest(selectedEl?.instanceId, newValue);\n                                }}\n                            />\n                        )}\n                    </div>\n                    {instanceHistory.error ? (\n                        <div className=\"absolute bottom-1 right-2 text-xs flex items-center text-blue-500 cursor-pointer\">\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation(); // Prevents unfocusing the textarea\n                                    navigateToTemplateNode(selectedEl?.oid);\n                                }}\n                                className=\"underline\"\n                            >\n                                Go to source\n                            </button>\n                        </div>\n                    ) : (\n                        isInstanceFocused && <EnterIndicator />\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default TailwindInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/twClassGen.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TextInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":41,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":41,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    getDefaultUnit,\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { toast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\n\nconst TextInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n        className,\n        disabled,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n        className?: string;\n        disabled?: boolean;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n        const [isFocused, setIsFocused] = useState(false);\n        const [prevValue, setPrevValue] = useState(elementStyle.defaultValue);\n        useEffect(() => {\n            if (isFocused || !editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle, isFocused]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const emitValue = (newValue: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(newValue);\n            const parsedNum = parseFloat(numberVal);\n            const newUnit = getDefaultUnit(unitVal);\n\n            newValue = parsedValueToString(parsedNum.toString(), newUnit);\n\n            const { min, max } = elementStyle.params || {};\n            if (min !== undefined && parsedNum < min) {\n                toast({\n                    title: 'Invalid Input',\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n            if (max !== undefined && parsedNum > max) {\n                toast({\n                    title: 'Invalid Input',\n                    description: `Value for ${elementStyle.displayName} cannot be greater than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            setValue(newValue);\n            sendStyleUpdate(newValue);\n        };\n\n        const handleFocus = () => {\n            setPrevValue(value);\n            setIsFocused(true);\n            editorEngine.history.startTransaction();\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            setIsFocused(false);\n            if (prevValue !== e.currentTarget.value) {\n                emitValue(e.currentTarget.value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n        return (\n            <input\n                type=\"text\"\n                className={cn(\n                    'w-full p-[6px] text-xs px-2 rounded border-none text-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 appearance-none',\n                    className,\n                )}\n                placeholder=\"--\"\n                value={value}\n                onChange={(e) => setValue(e.currentTarget.value)}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                onKeyDown={(e) =>\n                    handleNumberInputKeyDown(e, elementStyle, value, setValue, sendStyleUpdate)\n                }\n                disabled={disabled}\n            />\n        );\n    },\n);\n\nexport default TextInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/HotkeysModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/BrandTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ComponentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/HelpDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/DeleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/RenameModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/LayersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/OpenCodeMini/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/PageTab/PageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/PageTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/NodeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/PageTreeNode.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { PageNode } from '@onlook/models/pages';\nimport {\n    ContextMenu,\n    ContextMenuContent,\n    ContextMenuItem,\n    ContextMenuTrigger,\n} from '@onlook/ui/context-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { motion } from 'motion/react';\nimport { useState } from 'react';\nimport type { NodeApi } from 'react-arborist';\nimport { PageModal } from '../PageTab/PageModal';\ninterface PageTreeNodeProps {\n    node: NodeApi<PageNode>;\n    style: React.CSSProperties;\n}\n\nconst PageTreeNode: React.FC<PageTreeNodeProps> = ({ node, style }) => {\n    const hasChildren = node.data.children && node.data.children.length > 0;\n    const editorEngine = useEditorEngine();\n    const isActive = !hasChildren && editorEngine.pages.isNodeActive(node.data);\n    const [showModal, setShowModal] = useState(false);\n    const [modalMode, setModalMode] = useState<'create' | 'rename'>('create');\n\n    const getBaseName = (fullPath: string) => {\n        return fullPath.split('/').pop() || '';\n    };\n\n    const handleClick = async (e: React.MouseEvent) => {\n        if (hasChildren) {\n            node.toggle();\n            return;\n        }\n\n        const webviewId = editorEngine.webviews.selected?.[0]?.id;\n        if (webviewId) {\n            editorEngine.pages.setActivePath(webviewId, node.data.path);\n        }\n\n        editorEngine.pages.setCurrentPath(node.data.path);\n        node.select();\n\n        await editorEngine.pages.navigateTo(node.data.path);\n    };\n\n    const handleRename = () => {\n        setModalMode('rename');\n        setShowModal(true);\n    };\n\n    const handleCreate = () => {\n        setModalMode('create');\n        setShowModal(true);\n    };\n\n    const handleDelete = async () => {\n        try {\n            await editorEngine.pages.deletePage(\n                node.data.path,\n                node.data.children && node.data.children?.length > 0 ? true : false,\n            );\n        } catch (error) {\n            console.error('Failed to delete page:', error);\n            toast({\n                title: 'Failed to delete page',\n                description: error instanceof Error ? error.message : String(error),\n                variant: 'destructive',\n            });\n        }\n    };\n\n    const handleDuplicate = async () => {\n        try {\n            await editorEngine.pages.duplicatePage(node.data.path, node.data.path);\n\n            toast({\n                title: 'Page duplicated',\n                description: 'Page has been successfully duplicated.',\n                variant: 'default',\n            });\n        } catch (error) {\n            console.error('Failed to duplicate page:', error);\n            toast({\n                title: 'Failed to duplicate page',\n                description: error instanceof Error ? error.message : String(error),\n                variant: 'destructive',\n            });\n        }\n    };\n\n    const menuItems = [\n        {\n            label: 'Create New Page',\n            action: handleCreate,\n            icon: <Icons.File className=\"mr-2 h-4 w-4\" />,\n        },\n        {\n            label: 'Duplicate Page',\n            action: () => {\n                handleDuplicate();\n            },\n            icon: <Icons.Copy className=\"mr-2 h-4 w-4\" />,\n            disabled: node.data.isRoot,\n        },\n        {\n            label: 'Rename',\n            action: handleRename,\n            icon: <Icons.Pencil className=\"mr-2 h-4 w-4\" />,\n            disabled: node.data.isRoot,\n        },\n        {\n            label: 'Delete',\n            action: handleDelete,\n            icon: <Icons.Trash className=\"mr-2 h-4 w-4\" />,\n            destructive: true,\n            disabled: node.data.isRoot,\n        },\n    ];\n\n    return (\n        <>\n            <ContextMenu>\n                <ContextMenuTrigger>\n                    <div\n                        style={style}\n                        className={cn(\n                            'flex items-center h-6 cursor-pointer hover:bg-background-hover rounded',\n                            !hasChildren && isActive && 'bg-red-500 text-white',\n                            isActive && 'hover:bg-red-500',\n                        )}\n                        onClick={handleClick}\n                    >\n                        <span className=\"w-4 h-4 flex-none relative\">\n                            {hasChildren && (\n                                <div className=\"w-4 h-4 flex items-center justify-center absolute z-50\">\n                                    <motion.div\n                                        initial={false}\n                                        animate={{ rotate: node.isOpen ? 90 : 0 }}\n                                    >\n                                        <Icons.ChevronRight className=\"h-2.5 w-2.5\" />\n                                    </motion.div>\n                                </div>\n                            )}\n                        </span>\n                        {!node.data.isRoot &&\n                            (hasChildren ? (\n                                <Icons.Directory className=\"w-4 h-4 mr-2\" />\n                            ) : (\n                                <Icons.File className=\"w-4 h-4 mr-2\" />\n                            ))}\n                        <span>{node.data.name}</span>\n                    </div>\n                </ContextMenuTrigger>\n                <ContextMenuContent>\n                    {menuItems.map((item) => (\n                        <ContextMenuItem\n                            key={item.label}\n                            onClick={item.action}\n                            className=\"cursor-pointer\"\n                            disabled={item.disabled}\n                        >\n                            <span\n                                className={cn(\n                                    'flex w-full items-center gap-1',\n                                    item.destructive && 'text-red',\n                                )}\n                            >\n                                {item.icon}\n\n                                {item.label}\n                            </span>\n                        </ContextMenuItem>\n                    ))}\n                </ContextMenuContent>\n            </ContextMenu>\n\n            <PageModal\n                open={showModal}\n                onOpenChange={setShowModal}\n                mode={modalMode}\n                baseRoute={node.data.path}\n                initialName={modalMode === 'rename' ? getBaseName(node.data.path) : ''}\n            />\n        </>\n    );\n};\n\nexport default observer(PageTreeNode);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/PageTreeRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/TreeNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/TreeRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/DeviceSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":37,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { Theme } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\n\nconst DeviceSettings = ({ settings }: { settings: FrameSettings }) => {\n    const editorEngine = useEditorEngine();\n    const [deviceTheme, setDeviceTheme] = useState(settings.theme);\n\n    useEffect(() => {\n        setDeviceTheme(settings.theme);\n    }, [settings.id]);\n\n    useEffect(() => {\n        const observer = (newSettings: FrameSettings) => {\n            if (newSettings.theme !== deviceTheme) {\n                setDeviceTheme(newSettings.theme);\n            }\n        };\n\n        editorEngine.canvas.observeSettings(settings.id, observer);\n\n        return editorEngine.canvas.unobserveSettings(settings.id, observer);\n    }, []);\n\n    async function changeTheme(theme: Theme) {\n        const webview = editorEngine.webviews.getWebview(settings.id);\n        if (!webview) {\n            return;\n        }\n\n        const themeValue =\n            theme === Theme.System ? 'device' : theme === Theme.Dark ? 'dark' : 'light';\n\n        webview.executeJavaScript(`window.api?.setTheme(\"${themeValue}\")`).then((res) => {\n            setDeviceTheme(theme);\n        });\n\n        editorEngine.canvas.saveFrame(settings.id, {\n            theme: theme,\n        });\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-smallPlus text-foreground-primary\">Device Settings</p>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Theme</span>\n                <div className=\"flex flex-row p-0.5 w-3/5 bg-background-secondary rounded\">\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.System\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.System)}\n                    >\n                        <Icons.Laptop />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.Dark\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.Dark)}\n                    >\n                        <Icons.Moon />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.Light\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.Light)}\n                    >\n                        <Icons.Sun />\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DeviceSettings;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/FrameDimensions.tsx","messages":[{"ruleId":"no-unsafe-optional-chaining","severity":2,"message":"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.","line":128,"column":45,"nodeType":"ChainExpression","messageId":"unsafeOptionalChain","endLine":128,"endColumn":101},{"ruleId":"no-unsafe-optional-chaining","severity":2,"message":"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.","line":146,"column":45,"nodeType":"ChainExpression","messageId":"unsafeOptionalChain","endLine":146,"endColumn":101}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { DefaultSettings, Orientation } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Input } from '@onlook/ui/input';\nimport {\n    Select,\n    SelectContent,\n    SelectGroup,\n    SelectItem,\n    SelectLabel,\n    SelectTrigger,\n    SelectValue,\n} from '@onlook/ui/select';\nimport { Separator } from '@onlook/ui/separator';\nimport { Fragment, useEffect, useState } from 'react';\n\ntype DeviceOptions = {\n    [category: string]: {\n        [deviceName: string]: string;\n    };\n};\n\nconst deviceOptions: DeviceOptions = {\n    Custom: {\n        Custom: 'Custom',\n    },\n    Phone: {\n        'Android Compact': '412x917',\n        'Android Medium': '700x840',\n        'Android Small': '360x640',\n        'Android Large': '360x800',\n        'iPhone 16': '393x852',\n        'iPhone 16 Pro': '402x874',\n        'iPhone 16 Pro Max': '440x956',\n        'iPhone 16 Plus': '430x932',\n        'iPhone 14 & 15 Pro': '430x932',\n        'iPhone 14 & 15': '393x852',\n        'iPhone 13 & 14': '390x844',\n        'iPhone 13 Pro Max': '428x926',\n        'iPhone 13 / 13 Pro': '390x844',\n        'iPhone 11 Pro Max': '414x896',\n        'iPhone 11 Pro / X': '375x812',\n        'iPhone 8 Plus': '414x736',\n        'iPhone 8': '375x667',\n        'iPhone SE': '320x568',\n    },\n    Tablet: {\n        'Android Expanded': '1280x800',\n        'Surface Pro 8': '1440x960',\n        'Surface Pro 4': '1368x912',\n        'iPad Mini 8.3': '744x1133',\n        'iPad Mini 5': '768x1024',\n        'iPad Pro 11': '834x1194',\n        'iPad Pro 12.9': '1024x1366',\n    },\n    Laptop: {\n        'MacBook Air': '1280x832',\n        MacBook: '1152x700',\n        'MacBook Pro 14': '1512x982',\n        'MacBook Pro 16': '1728x1117',\n        'MacBook Pro': '1440x900',\n        'Surface Book': '1500x1000',\n    },\n    Desktop: {\n        Desktop: '1440x1024',\n        Wireframe: '1440x1024',\n        TV: '1280x720',\n        iMac: '1280x720',\n    },\n};\n\nconst FrameDimensions = ({ settings }: { settings: FrameSettings }) => {\n    const editorEngine = useEditorEngine();\n    const [device, setDevice] = useState(settings.device || DefaultSettings.DEVICE);\n    const [orientation, setOrientation] = useState(\n        settings.orientation || DefaultSettings.ORIENTATION,\n    );\n    const [width, setWidth] = useState(\n        settings.dimension.width || DefaultSettings.FRAME_DIMENSION.width,\n    );\n    const [height, setHeight] = useState(\n        settings.dimension.height || DefaultSettings.FRAME_DIMENSION.height,\n    );\n    // const [responsive, setResponsive] = useState('Closest Size');\n    const [aspectRatioLocked, setAspectRatioLocked] = useState(\n        settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n    );\n    const [aspectRatio, setAspectRatio] = useState(width / height);\n    const [step, setStep] = useState(1);\n    const [minDimensionsAspectRatio, setMinDimensionsAspectRatio] = useState({\n        height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n        width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n    });\n\n    useEffect(() => {\n        const observer = (newSettings: FrameSettings) => {\n            if (newSettings.dimension.width !== width) {\n                setWidth(newSettings.dimension.width);\n            }\n            if (newSettings.dimension.height !== height) {\n                setHeight(newSettings.dimension.height);\n            }\n        };\n\n        editorEngine.canvas.observeSettings(settings.id, observer);\n\n        return editorEngine.canvas.unobserveSettings(settings.id, observer);\n    }, []);\n\n    useEffect(() => {\n        setDevice(settings.device || DefaultSettings.DEVICE);\n        setOrientation(settings.orientation || DefaultSettings.ORIENTATION);\n        setWidth(settings.dimension.width || DefaultSettings.FRAME_DIMENSION.width);\n        setHeight(settings.dimension.height || DefaultSettings.FRAME_DIMENSION.height);\n        setAspectRatioLocked(settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED);\n    }, [settings.id]);\n\n    useEffect(() => {\n        const [deviceCategory, deviceName] = device.split(':');\n        if (deviceName === 'Custom') {\n            editorEngine.canvas.saveFrame(settings.id, {\n                device: device,\n            });\n            return;\n        }\n        const [deviceWidth, deviceHeight] = deviceOptions?.[deviceCategory]?.[deviceName].split('x');\n        if (width === parseInt(deviceHeight) && height === parseInt(deviceWidth)) {\n            return;\n        } else {\n            setWidth(parseInt(deviceWidth));\n            setHeight(parseInt(deviceHeight));\n            editorEngine.canvas.saveFrame(settings.id, {\n                dimension: { width: parseInt(deviceWidth), height: parseInt(deviceHeight) },\n                device: device,\n            });\n            if (aspectRatioLocked) {\n                setAspectRatio(parseInt(deviceWidth) / parseInt(deviceHeight));\n            }\n        }\n    }, [device]);\n\n    useEffect(() => {\n        const [deviceCategory, deviceName] = device.split(':');\n        const [deviceWidth, deviceHeight] = deviceOptions?.[deviceCategory]?.[deviceName].split('x');\n\n        if (\n            deviceName !== 'Custom' &&\n            ((width !== parseInt(deviceWidth) && width !== parseInt(deviceHeight)) ||\n                (height !== parseInt(deviceHeight) && height !== parseInt(deviceWidth)))\n        ) {\n            setDevice('Custom:Custom');\n        }\n        if (height > width && orientation !== Orientation.Potrait && !aspectRatioLocked) {\n            setOrientation(Orientation.Potrait);\n        }\n        if (width > height && orientation !== Orientation.Landscape && !aspectRatioLocked) {\n            setOrientation(Orientation.Landscape);\n        }\n\n        editorEngine.canvas.saveFrame(settings.id, {\n            dimension: { width: width, height: height },\n        });\n    }, [height, width]);\n\n    useEffect(() => {\n        setAspectRatio(width / height);\n        if (aspectRatioLocked) {\n            setMinDimensionsAspectRatio({\n                height: Math.max(\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                    Math.floor(parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio),\n                ),\n                width: Math.max(\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                    Math.floor(parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio),\n                ),\n            });\n        } else {\n            setMinDimensionsAspectRatio({\n                height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n            });\n        }\n        editorEngine.canvas.saveFrame(settings.id, {\n            aspectRatioLocked: aspectRatioLocked,\n        });\n    }, [aspectRatioLocked]);\n\n    useEffect(() => {\n        editorEngine.canvas.saveFrame(settings.id, {\n            orientation: orientation,\n        });\n    }, [orientation]);\n\n    const handleOrientationChange = () => {\n        if (\n            width >= parseInt(DefaultSettings.MIN_DIMENSIONS.width) &&\n            height >= parseInt(DefaultSettings.MIN_DIMENSIONS.height)\n        ) {\n            setHeight(width);\n            setWidth(height);\n            setOrientation(\n                orientation === Orientation.Landscape ? Orientation.Potrait : Orientation.Landscape,\n            );\n        }\n    };\n\n    const handleDimensionInput = (\n        event: React.ChangeEvent<HTMLInputElement>,\n        dimension: string,\n    ) => {\n        const value = event.target.value;\n        if (dimension === 'width') {\n            setWidth(parseInt(value));\n            if (aspectRatioLocked) {\n                setHeight(Math.floor(parseInt(value) / aspectRatio));\n            }\n        } else if (dimension === 'height') {\n            setHeight(parseInt(value));\n            if (aspectRatioLocked) {\n                setWidth(Math.floor(parseInt(value) * aspectRatio));\n            }\n        }\n    };\n\n    const handleDimensionKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.shiftKey) {\n            setStep(10);\n        }\n    };\n\n    const handleDimensionKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.shiftKey) {\n            setStep(1);\n        }\n    };\n\n    const handleDimensionInputBlur = (\n        event: React.FocusEvent<HTMLInputElement>,\n        dimension: string,\n    ) => {\n        const value = event.target.value;\n        if (dimension === 'width') {\n            if (aspectRatioLocked) {\n                if (\n                    parseInt(value) / aspectRatio <\n                        parseInt(DefaultSettings.MIN_DIMENSIONS.height) ||\n                    parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.width)\n                ) {\n                    const dimensionsAspectRatio =\n                        aspectRatio >= 1\n                            ? {\n                                  height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                                  width: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio,\n                                  ),\n                              }\n                            : {\n                                  height: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio,\n                                  ),\n                                  width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                              };\n                    setHeight(dimensionsAspectRatio.height);\n                    setWidth(dimensionsAspectRatio.width);\n                }\n            } else if (parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                event.target.value = parseInt(DefaultSettings.MIN_DIMENSIONS.width).toString();\n                setWidth(parseInt(DefaultSettings.MIN_DIMENSIONS.width));\n            }\n        } else if (dimension === 'height') {\n            if (aspectRatioLocked) {\n                if (\n                    parseInt(value) * aspectRatio <\n                        parseInt(DefaultSettings.MIN_DIMENSIONS.width) ||\n                    parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.height)\n                ) {\n                    const dimensionsAspectRatio =\n                        aspectRatio >= 1\n                            ? {\n                                  height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                                  width: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio,\n                                  ),\n                              }\n                            : {\n                                  height: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio,\n                                  ),\n                                  width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                              };\n                    setHeight(dimensionsAspectRatio.height);\n                    setWidth(dimensionsAspectRatio.width);\n                }\n            } else if (parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                event.target.value = parseInt(DefaultSettings.MIN_DIMENSIONS.height).toString();\n                setHeight(parseInt(DefaultSettings.MIN_DIMENSIONS.height));\n            }\n        }\n    };\n\n    const handleAspectRatioLock = () => {\n        setAspectRatioLocked((prev) => !prev);\n        editorEngine.canvas.saveFrame(settings.id, {\n            aspectRatioLocked: !aspectRatioLocked,\n        });\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-smallPlus text-foreground-primary\">Frame Dimensions</p>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Device</span>\n                <Select value={device} onValueChange={setDevice}>\n                    <SelectTrigger className=\"w-3/5 bg-background-secondary border-background-secondary py-1.5 px-2 h-fit text-xs rounded focus:outline-none focus:ring-0\">\n                        <SelectValue placeholder=\"Select device\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"rounded-md bg-background-secondary\">\n                        {Object.entries(deviceOptions).map(([category, devices], index) =>\n                            category !== 'Custom' ? (\n                                <Fragment key={index}>\n                                    <SelectGroup key={index}>\n                                        <SelectLabel>{category}</SelectLabel>\n                                        {Object.entries(devices).map(([deviceName], index) => (\n                                            <SelectItem\n                                                key={index}\n                                                value={category + ':' + deviceName}\n                                                className=\"focus:bg-background-tertiary rounded-md text-xs cursor-pointer\"\n                                            >\n                                                {deviceName}\n                                            </SelectItem>\n                                        ))}\n                                    </SelectGroup>\n                                    {index < Object.entries(deviceOptions).length - 1 && (\n                                        <Separator className=\"text-white\" />\n                                    )}\n                                </Fragment>\n                            ) : (\n                                <SelectItem\n                                    key={'Custom'}\n                                    value={'Custom:Custom'}\n                                    className=\"focus:bg-background-tertiary rounded-md text-xs cursor-pointer\"\n                                >\n                                    {'Custom'}\n                                </SelectItem>\n                            ),\n                        )}\n                    </SelectContent>\n                </Select>\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Orientation</span>\n                <div className=\"flex flex-row p-0.5 w-3/5 bg-background-secondary rounded\">\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${orientation === Orientation.Potrait ? 'bg-background-tertiary hover:bg-background-tertiary' : 'hover:bg-background-tertiary/50'}`}\n                        variant={'ghost'}\n                        onClick={handleOrientationChange}\n                    >\n                        <Icons.Potrait\n                            className={`h-4 w-4 ${orientation !== Orientation.Potrait ? 'text-foreground-secondary hover:text-foreground-onlook' : ''}`}\n                        />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${orientation === 'Landscape' ? 'bg-background-tertiary hover:bg-background-tertiary' : 'hover:bg-background-tertiary/50'}`}\n                        variant={'ghost'}\n                        onClick={handleOrientationChange}\n                    >\n                        <Icons.Landscape\n                            className={`h-4 w-4 ${orientation !== Orientation.Landscape ? 'text-foreground-secondary hover:text-foreground-onlook' : ''}`}\n                        />\n                    </Button>\n                </div>\n            </div>\n            <div className=\"flex flex-row justify-between items-center relative\">\n                <span className=\"text-xs text-foreground-secondary\">Width</span>\n                <Icons.CornerTopLeft\n                    className=\"absolute h-4 w-4 text-foreground-quadranary top-3 left-16 cursor-pointer z-50\"\n                    onClick={handleAspectRatioLock}\n                />\n                {aspectRatioLocked ? (\n                    <Icons.LockClosed\n                        className=\"absolute h-3 w-3 text-foreground-primary top-[30px] left-[61.5px] cursor-pointer z-50\"\n                        onClick={handleAspectRatioLock}\n                    />\n                ) : (\n                    <Icons.LockOpen\n                        className=\"absolute h-3 w-3 text-foreground-primary top-[30px] left-[61.5px] cursor-pointer z-50\"\n                        onClick={handleAspectRatioLock}\n                    />\n                )}\n\n                <div className=\"relative w-3/5\">\n                    <Input\n                        className=\"w-full px-2 h-8 text-xs rounded border-none text-foreground-active bg-background-secondary text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                        value={width}\n                        min={minDimensionsAspectRatio.width}\n                        type=\"number\"\n                        step={step}\n                        onChange={(event) => handleDimensionInput(event, 'width')}\n                        onKeyDown={(event) => handleDimensionKeyDown(event)}\n                        onKeyUp={(event) => handleDimensionKeyUp(event)}\n                        onBlur={(event) => handleDimensionInputBlur(event, 'width')}\n                    />\n                    <p className=\"p-0 h-fit w-fit absolute right-2 top-1/2 transform -translate-y-1/2 text-foreground-secondary text-xs\">\n                        px\n                    </p>\n                </div>\n            </div>\n            <div className=\"flex flex-row justify-between items-center relative\">\n                <span className=\"text-xs text-foreground-secondary\">Height</span>\n                <Icons.CornerBottomLeft\n                    className=\"absolute h-4 w-4 text-foreground-quadranary bottom-3 left-16 cursor-pointer z-50\"\n                    onClick={() => setAspectRatioLocked((prev) => !prev)}\n                />\n                <div className=\"relative w-3/5\">\n                    <Input\n                        className=\"w-full px-2 h-8 text-xs rounded border-none text-foreground-active bg-background-secondary text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                        value={height}\n                        min={minDimensionsAspectRatio.height}\n                        type=\"number\"\n                        step={step}\n                        onChange={(event) => handleDimensionInput(event, 'height')}\n                        onKeyDown={(event) => handleDimensionKeyDown(event)}\n                        onKeyUp={(event) => handleDimensionKeyUp(event)}\n                        onBlur={(event) => handleDimensionInputBlur(event, 'height')}\n                    />\n                    <p className=\"p-0 h-fit w-fit absolute right-2 top-1/2 transform -translate-y-1/2 text-foreground-secondary text-xs\">\n                        px\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FrameDimensions;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ZoomControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/RightClickMenu/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Base.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/Verification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":88,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { invokeMainChannel } from '@/lib/utils';\nimport {\n    FREESTYLE_IP_ADDRESS,\n    FRESTYLE_CUSTOM_HOSTNAME,\n    MainChannels,\n} from '@onlook/models/constants';\nimport type {\n    CreateDomainVerificationResponse,\n    VerifyDomainResponse,\n} from '@onlook/models/hosting';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { getValidUrl } from '@onlook/utility';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\n\nenum VerificationStatus {\n    NO_DOMAIN = 'no_domain',\n    VERIFYING = 'verifying',\n    VERIFIED = 'verified',\n    LOADING = 'loading',\n}\n\ninterface DNSRecord {\n    type: 'A' | 'CNAME' | 'TXT';\n    host: string;\n    value: string;\n}\n\nexport const Verification = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const domainsManager = projectsManager.domains;\n\n    const [status, setStatus] = useState(VerificationStatus.NO_DOMAIN);\n    const [domain, setDomain] = useState('');\n    const [records, setRecords] = useState<DNSRecord[]>([]);\n    const [error, setError] = useState<string | null>();\n    const [ownedDomains, setOwnedDomains] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (domainsManager) {\n            domainsManager.getOwnedDomains().then((domains) => {\n                setOwnedDomains(domains);\n            });\n        }\n    }, [editorEngine.isSettingsOpen]);\n\n    function editDomain() {\n        setStatus(VerificationStatus.NO_DOMAIN);\n        setRecords([]);\n    }\n\n    function validateDomain(): string | false {\n        if (!domain) {\n            setError('Domain is required');\n            return false;\n        }\n\n        try {\n            const url = new URL(getValidUrl(domain.trim()));\n            const hostname = url.hostname.toLowerCase();\n\n            // Split hostname into parts and ensure only two parts (domain + TLD)\n            const parts = hostname.split('.');\n            if (parts.length !== 2) {\n                setError('Please enter a domain without subdomains (e.g., example.com)');\n                return false;\n            }\n\n            // Basic domain validation regex for the final format\n            const domainRegex = /^[a-z0-9]+(-[a-z0-9]+)*\\.[a-z]{2,}$/;\n            if (!domainRegex.test(hostname)) {\n                setError('Please enter a valid domain name (e.g., example.com)');\n                return false;\n            }\n\n            setError(null);\n            return hostname;\n        } catch (err) {\n            setError('Invalid domain format');\n            return false;\n        }\n    }\n\n    async function setupDomain() {\n        const validDomain = validateDomain();\n        if (!validDomain) {\n            return;\n        }\n\n        setDomain(validDomain);\n        setStatus(VerificationStatus.LOADING);\n\n        // Send verification request to server\n        const response: CreateDomainVerificationResponse = await invokeMainChannel(\n            MainChannels.CREATE_DOMAIN_VERIFICATION,\n            {\n                domain: validDomain,\n            },\n        );\n\n        if (!response.success || !response.verificationCode) {\n            setError(response.message ?? 'Failed to create domain verification');\n            setStatus(VerificationStatus.NO_DOMAIN);\n            return;\n        }\n\n        setStatus(VerificationStatus.VERIFYING);\n        const verificationRecord = getVerificationRecord(validDomain, response.verificationCode);\n        const aRecords = getARecords();\n        setRecords([verificationRecord, ...aRecords]);\n        setError(null);\n    }\n\n    async function verifyDomain() {\n        setStatus(VerificationStatus.LOADING);\n        const response: VerifyDomainResponse = await invokeMainChannel(MainChannels.VERIFY_DOMAIN, {\n            domain: domain,\n        });\n\n        if (!response.success) {\n            setError(response.message ?? 'Failed to verify domain');\n            setStatus(VerificationStatus.VERIFYING);\n            return;\n        }\n\n        setStatus(VerificationStatus.VERIFIED);\n        setError(null);\n        addCustomDomain(domain);\n    }\n\n    const addCustomDomain = (url: string) => {\n        if (!domainsManager) {\n            setError('Failed to add custom domain');\n            return;\n        }\n        domainsManager.addCustomDomainToProject(url);\n        setStatus(VerificationStatus.VERIFIED);\n        setDomain(url);\n        setError(null);\n    };\n\n    function removeDomain() {\n        setStatus(VerificationStatus.NO_DOMAIN);\n        setDomain('');\n        setRecords([]);\n    }\n\n    function getVerificationRecord(domain: string, verificationCode: string) {\n        const verificationRecord: DNSRecord = {\n            type: 'TXT',\n            host: `${FRESTYLE_CUSTOM_HOSTNAME}.${domain}`,\n            value: verificationCode,\n        };\n        return verificationRecord;\n    }\n\n    function getARecords() {\n        const aRecords: DNSRecord[] = [];\n        const apexRecord: DNSRecord = {\n            type: 'A',\n            host: '@',\n            value: FREESTYLE_IP_ADDRESS,\n        };\n\n        const wwwRecord: DNSRecord = {\n            type: 'A',\n            host: 'www',\n            value: FREESTYLE_IP_ADDRESS,\n        };\n\n        aRecords.push(apexRecord, wwwRecord);\n        return aRecords;\n    }\n\n    function renderExistingDomains() {\n        if (ownedDomains.length === 0 || status !== VerificationStatus.NO_DOMAIN) {\n            return null;\n        }\n        return (\n            <div className=\"flex flex-col gap-2 flex-1\">\n                {ownedDomains.map((domain) => (\n                    <div\n                        key={domain}\n                        className=\"flex items-center text-small text-muted-foreground\"\n                    >\n                        <p>{domain}</p>\n                        <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"ml-auto\"\n                            onClick={() => {\n                                addCustomDomain(domain);\n                            }}\n                        >\n                            Use Domain\n                        </Button>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    function renderNoDomainInput() {\n        return (\n            <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-start gap-2\">\n                    <div className=\"w-1/3\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Custom URL</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Input your domain{' '}\n                            {status === VerificationStatus.NO_DOMAIN && ownedDomains.length > 0\n                                ? 'or reuse previous'\n                                : ''}\n                        </p>\n                    </div>\n                    <div className=\"flex flex-col gap-4 flex-1\">\n                        <div className=\"flex gap-2\">\n                            <Input\n                                disabled={status !== VerificationStatus.NO_DOMAIN}\n                                value={domain}\n                                onChange={(e) => setDomain(e.target.value)}\n                                placeholder=\"example.com\"\n                                className=\"bg-background placeholder:text-muted-foreground\"\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        setupDomain();\n                                    }\n                                }}\n                            />\n                            <Button\n                                onClick={() => {\n                                    if (status === VerificationStatus.NO_DOMAIN) {\n                                        setupDomain();\n                                    } else {\n                                        editDomain();\n                                    }\n                                }}\n                                variant=\"secondary\"\n                                size=\"sm\"\n                                className=\"h-8 text-sm\"\n                                disabled={status === VerificationStatus.LOADING}\n                            >\n                                {status === VerificationStatus.LOADING && (\n                                    <Icons.Shadow className=\"h-4 w-4 animate-spin mr-2\" />\n                                )}\n                                {status === VerificationStatus.NO_DOMAIN ? 'Setup' : 'Edit'}\n                            </Button>\n                        </div>\n                        {renderExistingDomains()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    function renderConfigureHeader() {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Configure</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Your DNS records must be set up with these values.\n                        </p>\n                    </div>\n                    <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        className=\"h-8 px-3 text-sm\"\n                        onClick={verifyDomain}\n                        disabled={status === VerificationStatus.LOADING}\n                    >\n                        {status === VerificationStatus.LOADING && (\n                            <Icons.Shadow className=\"h-4 w-4 animate-spin mr-2\" />\n                        )}\n                        Verify Setup\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    function renderVerifiedHeader() {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Verified</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Your domain is verified and ready to use.\n                        </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <div className=\"flex items-center gap-1\">\n                            <Icons.CheckCircled className=\"h-4 w-4 text-green-500\" />\n                            <span className=\"text-xs text-muted-foreground\">Verified</span>\n                        </div>\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                    <Icons.DotsVertical className=\"h-4 w-4\" />\n                                </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem className=\"hover:bg-muted focus:bg-muted cursor-pointer hidden\">\n                                    <Icons.Reset className=\"mr-2 h-4 w-4\" />\n                                    Reconfigure DNS\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                    onClick={removeDomain}\n                                    className=\"hover:bg-destructive/10 focus:bg-destructive/10 text-red-500 cursor-pointer\"\n                                >\n                                    <Icons.Trash className=\"mr-2 h-4 w-4\" />\n                                    Remove Domain\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    function renderRecords() {\n        if (records.length === 0) {\n            return null;\n        }\n        return (\n            <div className=\"grid grid-cols-7 gap-4 rounded-lg border p-4\">\n                <div className=\"text-sm font-medium col-span-1\">Type</div>\n                <div className=\"text-sm font-medium col-span-3\">Host</div>\n                <div className=\"text-sm font-medium col-span-3\">Value</div>\n\n                {records.map((record) => (\n                    <>\n                        <p className=\"text-sm col-span-1 overflow-auto\">{record.type}</p>\n                        <p className=\"text-sm col-span-3 overflow-auto\">{record.host}</p>\n                        <p className=\"text-sm col-span-3 overflow-auto\">{record.value}</p>\n                    </>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            {renderNoDomainInput()}\n            {status === VerificationStatus.VERIFYING && renderConfigureHeader()}\n            {status === VerificationStatus.VERIFIED && renderVerifiedHeader()}\n            {(status === VerificationStatus.VERIFYING || status === VerificationStatus.VERIFIED) &&\n                renderRecords()}\n            {error && <p className=\"text-sm text-red-500\">{error}</p>}\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/Verified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/DangerZone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/UpgradePrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/PreferencesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nextTheme' is assigned a value but never used.","line":22,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleBackButtonClick' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager, useUserManager } from '@/components/Context';\nimport { useTheme } from '@/components/ThemeProvider';\nimport { ProjectTabs } from '@/lib/projects';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { MainChannels, Theme } from '@onlook/models/constants';\nimport { DEFAULT_IDE } from '@onlook/models/ide';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { IDE } from '/common/ide';\n\nconst PreferencesTab = observer(() => {\n    const userManager = useUserManager();\n    const projectsManager = useProjectsManager();\n    const { theme, nextTheme, setTheme } = useTheme();\n    const [isAnalyticsEnabled, setIsAnalyticsEnabled] = useState(false);\n    const [ide, setIde] = useState<IDE>(IDE.fromType(DEFAULT_IDE));\n    const [shouldWarnDelete, setShouldWarnDelete] = useState(true);\n\n    const IDEIcon = Icons[ide.icon];\n\n    useEffect(() => {\n        setIde(IDE.fromType(userManager.settings.settings?.editor?.ideType || DEFAULT_IDE));\n        setIsAnalyticsEnabled(userManager.settings.settings?.enableAnalytics || false);\n        setShouldWarnDelete(userManager.settings.settings?.editor?.shouldWarnDelete ?? true);\n    }, []);\n\n    function updateIde(ide: IDE) {\n        userManager.settings.updateEditor({ ideType: ide.type });\n        setIde(ide);\n    }\n\n    function updateAnalytics(enabled: boolean) {\n        userManager.settings.update({ enableAnalytics: enabled });\n        invokeMainChannel(MainChannels.UPDATE_ANALYTICS_PREFERENCE, enabled);\n        setIsAnalyticsEnabled(enabled);\n    }\n\n    function updateDeleteWarning(enabled: boolean) {\n        userManager.settings.updateEditor({ shouldWarnDelete: enabled });\n        setShouldWarnDelete(enabled);\n    }\n\n    function handleBackButtonClick() {\n        projectsManager.projectsTab = ProjectTabs.PROJECTS;\n    }\n\n    return (\n        <div className=\"flex flex-col gap-8\">\n            <div className=\"flex justify-between items-center\">\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">Theme</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        Choose your preferred appearance\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {theme === Theme.Dark && <Icons.Moon className=\"mr-2 h-4 w-4\" />}\n                            {theme === Theme.Light && <Icons.Sun className=\"mr-2 h-4 w-4\" />}\n                            {theme === Theme.System && <Icons.Laptop className=\"mr-2 h-4 w-4\" />}\n                            <span className=\"capitalize\">{theme}</span>\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => setTheme(Theme.Light)}>\n                            <Icons.Sun className=\"mr-2 h-4 w-4\" />\n                            <span>Light</span>\n                            {theme === Theme.Light && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setTheme(Theme.Dark)}>\n                            <Icons.Moon className=\"mr-2 h-4 w-4\" />\n                            <span>Dark</span>\n                            {theme === Theme.Dark && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setTheme(Theme.System)}>\n                            <Icons.Laptop className=\"mr-2 h-4 w-4\" />\n                            <span>System</span>\n                            {theme === Theme.System && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"flex justify-between items-center\">\n                <p className=\"text-foreground-onlook text-largePlus\">Default Code Editor</p>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"min-w-[150px]\">\n                            <IDEIcon className=\"text-default h-3 w-3 mr-2\" />\n                            <span className=\"smallPlus\">{ide.displayName}</span>\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                        {IDE.getAll().map((item) => {\n                            const ItemIcon = Icons[item.icon];\n                            return (\n                                <DropdownMenuItem\n                                    key={item.displayName}\n                                    className=\"text-smallPlus min-w-[140px]\"\n                                    onSelect={() => {\n                                        updateIde(item);\n                                    }}\n                                >\n                                    <ItemIcon className=\"text-default h-3 w-3 mr-2\" />\n                                    <span>{item.displayName}</span>\n                                    {ide === item && <Icons.CheckCircled className=\"ml-auto\" />}\n                                </DropdownMenuItem>\n                            );\n                        })}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\" flex justify-between items-center gap-4\">\n                <div className=\" flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">{'Warn before delete'}</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        {'This adds a warning before deleting elements in the editor'}\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {shouldWarnDelete ? 'On' : 'Off'}\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"text-smallPlus min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => updateDeleteWarning(true)}>\n                            {'Warning On'}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateDeleteWarning(false)}>\n                            {'Warning Off'}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"flex justify-between items-center gap-4\">\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">Analytics</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        This helps our small team of two know what we need to improve with the\n                        product.\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {isAnalyticsEnabled ? 'On' : 'Off'}\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"text-smallPlus min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => updateAnalytics(true)}>\n                            {'Analytics On'}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateAnalytics(false)}>\n                            {'Analytics Off'}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n        </div>\n    );\n});\n\nexport default PreferencesTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/ProjectTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":13,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'controlledOpen' is defined but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'controlledOnOpenChange' is defined but never used.","line":16,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { DefaultSettings, MainChannels } from '@onlook/models/constants';\nimport type { Project } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { observer } from 'mobx-react-lite';\nimport { useState } from 'react';\n\nconst ProjectTab = observer(\n    ({\n        children,\n        project,\n        open: controlledOpen,\n        onOpenChange: controlledOnOpenChange,\n    }: {\n        children?: React.ReactNode;\n        project?: Project | null;\n        open?: boolean;\n        onOpenChange?: (open: boolean) => void;\n    }) => {\n        const projectsManager = useProjectsManager();\n        const projectToUpdate = project || projectsManager.project;\n        const [formValues, setFormValues] = useState({\n            name: projectToUpdate?.name || '',\n            url: projectToUpdate?.url || '',\n            folderPath: projectToUpdate?.folderPath || '',\n            commands: projectToUpdate?.commands || DefaultSettings.COMMANDS,\n        });\n        const [canSave, setCanSave] = useState(false);\n\n        const handleUpdatePath = async () => {\n            const path = (await invokeMainChannel(MainChannels.PICK_COMPONENTS_DIRECTORY)) as\n                | string\n                | null;\n            if (path) {\n                setFormValues((prev) => ({ ...prev, folderPath: path }));\n                setCanSave(true);\n            }\n        };\n\n        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            const { id, value } = e.target;\n            setFormValues((prev) => {\n                if (id === 'run' || id === 'build' || id === 'install') {\n                    return {\n                        ...prev,\n                        commands: {\n                            ...prev.commands,\n                            [id]: value,\n                        },\n                    };\n                }\n                return {\n                    ...prev,\n                    [id]: value,\n                };\n            });\n            setCanSave(true);\n        };\n\n        const handleSave = () => {\n            if (projectToUpdate) {\n                projectsManager.updateProject({\n                    ...projectToUpdate,\n                    ...formValues,\n                });\n                setCanSave(false);\n            }\n        };\n\n        return (\n            <div className=\"space-y-8\">\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-medium\">Metadata</h2>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Name</p>\n                            <Input\n                                id=\"name\"\n                                value={formValues.name}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">URL</p>\n                            <Input\n                                id=\"url\"\n                                value={formValues.url}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Path</p>\n                            <div className=\"flex items-center gap-2 w-2/3\">\n                                <Input\n                                    id=\"folderPath\"\n                                    value={formValues.folderPath}\n                                    onChange={handleChange}\n                                />\n                                <Button\n                                    size={'icon'}\n                                    variant={'outline'}\n                                    onClick={handleUpdatePath}\n                                >\n                                    <Icons.Directory />\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Add divider */}\n                <div className=\"border-t border-border\" />\n\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-medium\">Commands</h2>\n                    <p className=\"text-small text-foreground-secondary\">\n                        {\" Only update these if you know what you're doing!\"}\n                    </p>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Install</p>\n                            <Input\n                                id=\"install\"\n                                value={\n                                    formValues.commands.install || DefaultSettings.COMMANDS.install\n                                }\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Run</p>\n                            <Input\n                                id=\"run\"\n                                value={formValues.commands.run || DefaultSettings.COMMANDS.run}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Build</p>\n                            <Input\n                                id=\"build\"\n                                value={formValues.commands.build || DefaultSettings.COMMANDS.build}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                    <Button size={'sm'} onClick={handleSave} disabled={!canSave}>\n                        {canSave ? 'Save' : 'Saved'}\n                    </Button>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default ProjectTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/PortWarningModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/RunButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":113,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { useTheme } from '@/components/ThemeProvider';\nimport type { RunManager, TerminalMessage } from '@/lib/projects/run';\nimport { MainChannels } from '@onlook/models/constants';\nimport { RunState } from '@onlook/models/run';\nimport { cn } from '@onlook/ui/utils';\nimport { Terminal as XTerm, type ITheme } from '@xterm/xterm';\nimport '@xterm/xterm/css/xterm.css';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface TerminalProps {\n    hidden?: boolean;\n}\n\nconst TERMINAL_THEME: Record<'LIGHT' | 'DARK', ITheme> = {\n    LIGHT: {\n        background: '#ffffff',\n        foreground: '#2d2d2d',\n        cursor: '#333333',\n        cursorAccent: '#ffffff',\n        black: '#2d2d2d',\n        red: '#d64646',\n        green: '#4e9a06',\n        yellow: '#c4a000',\n        blue: '#3465a4',\n        magenta: '#75507b',\n        cyan: '#06989a',\n        white: '#d3d7cf',\n        brightBlack: '#555753',\n        brightRed: '#ef2929',\n        brightGreen: '#8ae234',\n        brightYellow: '#fce94f',\n        brightBlue: '#729fcf',\n        brightMagenta: '#ad7fa8',\n        brightCyan: '#34e2e2',\n        brightWhite: '#eeeeec',\n        selectionBackground: '#bfbfbf',\n    },\n    DARK: {}, // Use default dark theme\n};\n\nconst Terminal = observer(({ hidden = false }: TerminalProps) => {\n    const terminalRef = useRef<HTMLDivElement>(null);\n    const [terminal, setTerminal] = useState<XTerm | null>(null);\n    const projectsManager = useProjectsManager();\n    const runner = projectsManager.runner;\n    const { theme } = useTheme();\n\n    useEffect(() => {\n        if (terminal) {\n            terminal.options.theme = theme === 'light' ? TERMINAL_THEME.LIGHT : TERMINAL_THEME.DARK;\n        }\n    }, [theme]);\n\n    useEffect(() => {\n        if (!terminalRef.current || !runner || terminal) {\n            return;\n        }\n\n        const { term, terminalDataListener, stateListener } = initTerminal(\n            runner,\n            terminalRef.current,\n        );\n        setTerminal(term);\n\n        return () => {\n            term.dispose();\n            setTerminal(null);\n            window.api.removeListener(MainChannels.TERMINAL_ON_DATA, terminalDataListener);\n            window.api.removeListener(MainChannels.RUN_STATE_CHANGED, stateListener);\n        };\n    }, []);\n\n    function initTerminal(runner: RunManager, container: HTMLDivElement) {\n        const term = new XTerm({\n            cursorBlink: true,\n            fontSize: 12,\n            fontFamily: 'monospace',\n            theme: theme === 'light' ? TERMINAL_THEME.LIGHT : TERMINAL_THEME.DARK,\n            convertEol: true,\n            allowTransparency: true,\n            disableStdin: false,\n            allowProposedApi: true,\n            macOptionIsMeta: true,\n        });\n\n        term.open(container);\n        const { cols, rows } = term;\n        runner.resizeTerminal(cols, rows);\n\n        runner.getHistory().then((history) => {\n            if (history) {\n                term.write(history);\n            }\n        });\n\n        // Set up event listeners\n        term.onData((data) => {\n            runner.handleTerminalInput(data);\n        });\n\n        term.onResize(({ cols, rows }) => {\n            runner.resizeTerminal(cols, rows);\n        });\n\n        const terminalDataListener = (message: TerminalMessage) => {\n            if (message.id === projectsManager.project?.id) {\n                term.write(message.data);\n            }\n        };\n\n        const stateListener = ({ state, message }: { state: RunState; message: string }) => {\n            term.write('\\x1b[96m' + message + '\\x1b[0m\\n');\n        };\n\n        window.api.on(MainChannels.TERMINAL_ON_DATA, terminalDataListener);\n        window.api.on(MainChannels.RUN_STATE_CHANGED, stateListener);\n        return { term, terminalDataListener, stateListener };\n    }\n\n    return (\n        <div\n            className={cn(\n                'bg-background rounded-lg overflow-auto transition-all duration-300',\n                hidden ? 'h-0 w-0 invisible' : 'h-[22rem] w-[37rem]',\n            )}\n        >\n            <div\n                ref={terminalRef}\n                className={cn(\n                    'h-full w-full p-2 transition-opacity duration-200',\n                    hidden ? 'opacity-0' : 'opacity-100 delay-300',\n                )}\n            />\n        </div>\n    );\n});\n\nexport default Terminal;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ModeToggle/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/OpenCode/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ProjectSelect/ProjectNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ProjectSelect/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSubscriptionOpen' is assigned a value but never used.","line":27,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsSubscriptionOpen' is assigned a value but never used.","line":27,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager, useRouteManager } from '@/components/Context';\nimport { ProjectTabs } from '@/lib/projects';\nimport { Route } from '@/lib/routes';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuSub,\n    DropdownMenuSubContent,\n    DropdownMenuSubTrigger,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useRef, useState } from 'react';\n\nconst ProjectBreadcrumb = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const routeManager = useRouteManager();\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const [isSubscriptionOpen, setIsSubscriptionOpen] = useState(false);\n    const closeTimeoutRef = useRef<Timer>();\n\n    async function handleNavigateToProject(tab?: ProjectTabs) {\n        try {\n            await saveScreenshot();\n        } catch (error) {\n            console.error('Failed to take screenshot:', error);\n        }\n        setTimeout(() => {\n            projectsManager.project = null;\n            if (tab) {\n                projectsManager.projectsTab = tab;\n            }\n            routeManager.route = Route.PROJECTS;\n        }, 100);\n    }\n\n    async function handleReturn() {\n        handleNavigateToProject();\n    }\n\n    const handleOpenProjectFolder = () => {\n        const project = projectsManager.project;\n        if (project && project.folderPath) {\n            invokeMainChannel(MainChannels.OPEN_IN_EXPLORER, project.folderPath);\n        }\n    };\n\n    async function saveScreenshot() {\n        const project = projectsManager.project;\n        if (!project) {\n            console.error('No project selected');\n            return;\n        }\n        const projectId = project.id;\n        const result = await editorEngine.takeActiveWebviewScreenshot(projectId, {\n            save: true,\n        });\n        if (!result || !result.name) {\n            console.error('Failed to take screenshot');\n            return;\n        }\n        project.previewImg = result.name;\n        project.updatedAt = new Date().toISOString();\n        projectsManager.updateProject(project);\n    }\n\n    return (\n        <div className=\"mx-2 flex flex-row items-center text-small gap-2\">\n            <DropdownMenu open={isDropdownOpen} onOpenChange={setIsDropdownOpen}>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        variant={'ghost'}\n                        className=\"mx-0 px-0 gap-2 text-foreground-onlook text-small hover:text-foreground-active hover:bg-transparent\"\n                    >\n                        <Icons.OnlookLogo className=\"w-6 h-6 hidden md:block\" />\n                        <span className=\"mx-0 max-w-[60px] md:max-w-[100px] lg:max-w-[200px] px-0 text-foreground-onlook text-small truncate cursor-pointer\">\n                            {projectsManager.project?.name}\n                        </span>\n                        <Icons.ChevronDown className=\"transition-all rotate-0 group-data-[state=open]:-rotate-180 duration-200 ease-in-out text-foreground-onlook \" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                    align=\"start\"\n                    className=\"w-48\"\n                    onMouseEnter={() => {\n                        if (closeTimeoutRef.current) {\n                            clearTimeout(closeTimeoutRef.current);\n                        }\n                    }}\n                    onMouseLeave={() => {\n                        closeTimeoutRef.current = setTimeout(() => {\n                            setIsDropdownOpen(false);\n                        }, 300);\n                    }}\n                >\n                    <DropdownMenuItem onClick={handleReturn}>\n                        <div className=\"flex row center items-center group\">\n                            <Icons.Tokens className=\"mr-2 group-hover:rotate-12 transition-transform\" />\n                            {'Go to all Projects'}\n                        </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuSub>\n                        <DropdownMenuSubTrigger>New Project</DropdownMenuSubTrigger>\n                        <DropdownMenuSubContent>\n                            <DropdownMenuItem\n                                onClick={() => handleNavigateToProject(ProjectTabs.PROMPT_CREATE)}\n                                className={cn(\n                                    'focus:bg-blue-100 focus:text-blue-900',\n                                    'hover:bg-blue-100 hover:text-blue-900',\n                                    'dark:focus:bg-blue-900 dark:focus:text-blue-100',\n                                    'dark:hover:bg-blue-900 dark:hover:text-blue-100',\n                                )}\n                            >\n                                <Icons.FilePlus className=\"mr-2 h-4 w-4\" />\n                                Start from scratch\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                                onClick={() => handleNavigateToProject(ProjectTabs.IMPORT_PROJECT)}\n                                className={cn(\n                                    'focus:bg-teal-100 focus:text-teal-900',\n                                    'hover:bg-teal-100 hover:text-teal-900',\n                                    'dark:focus:bg-teal-900 dark:focus:text-teal-100',\n                                    'dark:hover:bg-teal-900 dark:hover:text-teal-100',\n                                )}\n                            >\n                                <Icons.Download className=\"mr-2 h-4 w-4\" />\n                                Import a project\n                            </DropdownMenuItem>\n                        </DropdownMenuSubContent>\n                    </DropdownMenuSub>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleOpenProjectFolder}>\n                        {'Show in Explorer'}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                        onClick={() => {\n                            editorEngine.isPlansOpen = true;\n                        }}\n                    >\n                        Subscriptions\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                        onClick={() => {\n                            editorEngine.isSettingsOpen = true;\n                        }}\n                    >\n                        Settings\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n    );\n});\n\nexport default ProjectBreadcrumb;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/AdvancedSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/Domain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/Url.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customDomain' is assigned a value but never used.","line":17,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customDomainState' is assigned a value but never used.","line":23,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { PublishStatus } from '@onlook/models/hosting';\nimport { DomainType } from '@onlook/models/projects';\nimport { Separator } from '@onlook/ui/separator';\nimport { observer } from 'mobx-react-lite';\nimport { AdvancedSettingsSection } from './AdvancedSettings';\nimport { DomainSection } from './Domain';\n\nexport const PublishDropdown = observer(\n    ({ setIsOpen }: { setIsOpen: (isOpen: boolean) => void }) => {\n        const projectsManager = useProjectsManager();\n        if (!projectsManager.project) {\n            return null;\n        }\n\n        const baseDomain = projectsManager.project?.domains?.base || null;\n        const customDomain = projectsManager.project?.domains?.custom || null;\n\n        const baseDomainState = projectsManager.domains?.base?.state || {\n            status: PublishStatus.UNPUBLISHED,\n            message: null,\n        };\n        const customDomainState = projectsManager.domains?.custom?.state || {\n            status: PublishStatus.UNPUBLISHED,\n            message: null,\n        };\n\n        return (\n            <div className=\"rounded-md flex flex-col text-foreground-secondary\">\n                <DomainSection\n                    setIsOpen={setIsOpen}\n                    domain={baseDomain}\n                    type={DomainType.BASE}\n                    state={baseDomainState}\n                />\n\n                {/* TODO: Uncomment after freestyle bug is fixed */}\n                {/* <Separator />\n                <DomainSection\n                    setIsOpen={setIsOpen}\n                    domain={customDomain}\n                    type={DomainType.CUSTOM}\n                    state={customDomainState}\n                /> */}\n                <Separator />\n                <AdvancedSettingsSection setIsOpen={setIsOpen} />\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/TriggerButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Subscription/PricingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used.","line":44,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { MotionCard } from '@onlook/ui/motion-card';\nimport { motion } from 'framer-motion';\nimport { useTranslation } from 'react-i18next';\n\nexport const PricingCard = ({\n    plan,\n    price,\n    description,\n    features,\n    buttonText,\n    buttonProps,\n    delay,\n    isLoading,\n}: {\n    plan: string;\n    price: string;\n    description: string;\n    features: string[];\n    buttonText: string;\n    buttonProps: React.ButtonHTMLAttributes<HTMLButtonElement>;\n    delay: number;\n    isLoading?: boolean;\n}) => {\n    const { t } = useTranslation();\n\n    return (\n        <MotionCard\n            className=\"w-[360px]\"\n            initial={{ opacity: 0, y: 40 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay }}\n        >\n            <motion.div className=\"p-6 flex flex-col h-full\">\n                <div className=\"space-y-1\">\n                    <h2 className=\"text-title2\">{plan}</h2>\n                    <p className=\"text-foreground-onlook text-largePlus\">{price}</p>\n                </div>\n                <div className=\"border-[0.5px] border-border-primary -mx-6 my-6\" />\n                <p className=\"text-foreground-primary text-title3 text-balance\">{description}</p>\n                <div className=\"border-[0.5px] border-border-primary -mx-6 my-6\" />\n                <div className=\"space-y-4 mb-6\">\n                    {features.map((feature, i) => (\n                        <div\n                            key={feature}\n                            className=\"flex items-center gap-3 text-sm text-foreground-secondary/80\"\n                        >\n                            <Icons.Check className=\"w-5 h-5 text-foreground-secondary/80\" />\n                            <span>{feature}</span>\n                        </div>\n                    ))}\n                </div>\n                <Button\n                    className=\"mt-auto w-full\"\n                    {...buttonProps}\n                    disabled={isLoading || buttonProps.disabled}\n                >\n                    {isLoading ? (\n                        <div className=\"flex items-center gap-2\">\n                            <Icons.Shadow className=\"w-4 h-4 animate-spin\" />\n                            <span>{t('pricing.loading.checkingPayment')}</span>\n                        </div>\n                    ) : (\n                        buttonText\n                    )}\n                </Button>\n            </motion.div>\n        </MotionCard>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Subscription/PricingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/BrowserControl/EnabledButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assertNever' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Popover, PopoverContent, PopoverTrigger } from '@onlook/ui/popover';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { assertNever } from '/common/helpers';\n\nconst EnabledButton = observer(({ webviewId }: { webviewId: string }) => {\n    const editorEngine = useEditorEngine();\n    const selected = editorEngine.webviews.isSelected(webviewId);\n    const state = editorEngine.webviews.getState(webviewId);\n\n    // Only show button for error states\n    if (state !== WebviewState.DOM_NO_ONLOOK) {\n        return null;\n    }\n\n    const button = (\n        <Button\n            variant=\"ghost\"\n            className=\"group px-1 text-amber-300 hover:text-amber-100 hover:bg-amber-400/10\"\n            size={'icon'}\n        >\n            <Icons.ExclamationTriangle\n                className={cn('fill-inherit', selected && 'group-hover:text-amber-100')}\n            />\n        </Button>\n    );\n\n    return (\n        <Popover>\n            <PopoverTrigger asChild>{button}</PopoverTrigger>\n            <PopoverContent>\n                <div className=\"space-y-2 flex flex-col w-80 items-center\">\n                    <div className=\"flex gap-2 justify-center\">\n                        <p className=\"text-active text-regularPlus\">\n                            {\"Onlook won't work on this page\"}\n                        </p>\n                        <Icons.CircleBackslash className=\"mt-[3px] text-red-500\" />\n                    </div>\n                    <p className=\"text-foreground-onlook text-small text-left\">\n                        {\n                            \"This url is not linked to Onlook's editor. Please navigate to a url that is linked to Onlook's editor.\"\n                        }\n                    </p>\n                </div>\n            </PopoverContent>\n        </Popover>\n    );\n});\n\nexport default EnabledButton;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/BrowserControl/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":162,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":170,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport { EditorMode } from '@/lib/models';\nimport { DefaultSettings, Theme } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { cn } from '@onlook/ui/utils';\nimport { getValidUrl } from '@onlook/utility';\nimport clsx from 'clsx';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport EnabledButton from './EnabledButton';\n\ninterface BrowserControlsProps {\n    webviewRef: React.RefObject<Electron.WebviewTag> | null;\n    webviewSrc: string;\n    setWebviewSrc: React.Dispatch<React.SetStateAction<string>>;\n    selected: boolean;\n    hovered: boolean;\n    setHovered: React.Dispatch<React.SetStateAction<boolean>>;\n    setDarkmode: React.Dispatch<React.SetStateAction<boolean>>;\n    settings: FrameSettings;\n    startMove: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n    domState: WebviewState;\n    webviewSize: {\n        width: number;\n        height: number;\n    };\n}\n\nconst BrowserControls = observer(\n    ({\n        webviewRef,\n        webviewSrc,\n        setWebviewSrc,\n        selected,\n        hovered,\n        setHovered,\n        setDarkmode,\n        settings,\n        startMove,\n        domState,\n        webviewSize,\n    }: BrowserControlsProps) => {\n        const editorEngine = useEditorEngine();\n        const [urlInputValue, setUrlInputValue] = useState(webviewSrc);\n        const [editingURL, setEditingURL] = useState(false);\n        const [theme, setTheme] = useState(Theme.System);\n        const [state, setState] = useState<WebviewState>(WebviewState.NOT_RUNNING);\n        const [editorMode, setEditorMode] = useState(EditorMode.DESIGN);\n        const inputRef = useRef<HTMLInputElement>(null);\n\n        useEffect(() => {\n            const observer = (state: WebviewState) => {\n                setState(state);\n            };\n\n            editorEngine.webviews.observeState(settings.id, observer);\n\n            return editorEngine.webviews.unobserveState(settings.id, observer);\n        });\n\n        useEffect(() => {\n            const observer = (newSettings: FrameSettings) => {\n                if (newSettings.theme !== theme) {\n                    setTheme(newSettings.theme || DefaultSettings.THEME);\n                }\n            };\n\n            editorEngine.canvas.observeSettings(settings.id, observer);\n\n            return editorEngine.canvas.unobserveSettings(settings.id, observer);\n        }, []);\n\n        useEffect(() => {\n            setEditorMode(editorEngine.mode);\n        }, [editorEngine.mode]);\n\n        useEffect(() => {\n            setUrlInputValue(webviewSrc);\n        }, [webviewSrc]);\n\n        useEffect(() => {\n            if (editingURL) {\n                inputRef.current?.focus();\n            }\n        }, [editingURL]);\n\n        function goForward() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            if (webview.canGoForward()) {\n                webview.goForward();\n            }\n        }\n\n        function reload() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.errors.clear();\n            webview.reload();\n        }\n\n        function goBack() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            if (webview.canGoBack()) {\n                webview.goBack();\n            }\n        }\n\n        function handleKeydown(e: React.KeyboardEvent<HTMLInputElement>) {\n            if (e.key === 'Enter') {\n                e.currentTarget.blur();\n                setEditingURL(false);\n                return;\n            }\n        }\n\n        function handleBlur(e: React.FocusEvent<HTMLInputElement>) {\n            const validUrl = getValidUrl(e.currentTarget.value);\n            setWebviewSrc(validUrl);\n            setEditingURL(false);\n        }\n\n        async function changeTheme(theme: Theme) {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n\n            const themeValue =\n                theme === Theme.System ? 'device' : theme === Theme.Dark ? 'dark' : 'light';\n\n            webview.executeJavaScript(`window.api?.setTheme(\"${themeValue}\")`).then((res) => {\n                setDarkmode(res);\n                setTheme(theme);\n            });\n\n            editorEngine.canvas.saveFrame(settings.id, {\n                theme: theme,\n            });\n        }\n\n        function canGoBack() {\n            try {\n                return webviewRef?.current?.canGoBack();\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function canGoForward() {\n            try {\n                return webviewRef?.current?.canGoForward();\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function getCleanURL(url: string) {\n            try {\n                const urlWithScheme = url.includes('://') ? url : 'http://' + url;\n                const urlObject = new URL(urlWithScheme);\n                const hostname = urlObject.hostname.replace(/^www\\./, '');\n                const port = urlObject.port ? ':' + urlObject.port : '';\n                const path = urlObject.pathname + urlObject.search;\n                return hostname + port + path;\n            } catch (error) {\n                console.error(error);\n                return url;\n            }\n        }\n\n        function handleSelect() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webview);\n            editorEngine.elements.clear();\n        }\n\n        function getSelectedColor() {\n            if (editorEngine.mode === EditorMode.INTERACT) {\n                return 'text-blue-400 fill-blue-400';\n            }\n            if (domState === WebviewState.DOM_ONLOOK_ENABLED) {\n                return 'text-teal-400 fill-teal-400';\n            }\n            if (domState === WebviewState.DOM_NO_ONLOOK) {\n                return 'text-amber-400 fill-amber-400';\n            }\n            if (domState === WebviewState.NOT_RUNNING && editorEngine.mode === EditorMode.DESIGN) {\n                return 'text-foreground-secondary fill-foreground-secondary';\n            }\n            return '';\n        }\n\n        return (\n            <div\n                className={clsx(\n                    'm-auto flex flex-row items-center backdrop-blur-sm overflow-hidden relative shadow-sm rounded-md border-input text-foreground',\n                    selected ? ' bg-active/60 ' : '',\n                    hovered ? ' bg-hover/20 ' : '',\n                    selected\n                        ? getSelectedColor()\n                        : editorMode === EditorMode.INTERACT\n                          ? 'text-foreground-secondary fill-foreground-secondary'\n                          : 'fill-[#f7f7f7]',\n                )}\n                onMouseOver={() => setHovered(true)}\n                onMouseOut={() => setHovered(false)}\n                onClick={handleSelect}\n                style={{\n                    transform: `scale(${1 / editorEngine.canvas.scale})`,\n                    width: `${webviewSize.width * editorEngine.canvas.scale}px`,\n                    marginBottom: `${10 / editorEngine.canvas.scale}px`,\n                }}\n            >\n                {/* Making sure the dropdown arrow is visible */}\n                <div className=\"absolute right-0 bottom-0 top-0 bg-gradient-to-r from-transparent dark:via-background-primary via-background-tertiary dark:to-background-primary to-background-tertiary w-20 z-50\"></div>\n                <div\n                    className={`absolute left-0 flex flex-row z-50`}\n                    style={{\n                        transition: 'opacity 0.5s, transform 0.5s',\n                        transform: editingURL\n                            ? 'translateX(-100%)'\n                            : selected\n                              ? 'translateX(0)'\n                              : 'translateX(-100%)',\n                        opacity: editingURL ? 0 : selected ? 1 : 0,\n                    }}\n                >\n                    <Button\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={goBack}\n                        disabled={!canGoBack()}\n                    >\n                        <Icons.ArrowLeft className=\"text-inherit h-4 w-4 transition-none\" />\n                    </Button>\n\n                    <Button\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={goForward}\n                        style={{\n                            transition: 'display 0.5s',\n                            display: canGoForward() ? 'flex' : 'none',\n                        }}\n                    >\n                        <Icons.ArrowRight className=\"text-inherit h-4 w-4\" />\n                    </Button>\n                    <Button size={'icon'} variant={'ghost'} onClick={reload}>\n                        {webviewRef?.current?.isLoading() ? (\n                            <Icons.CrossL className=\"text-inherit\" />\n                        ) : (\n                            <Icons.Reload className=\"text-inherit h-4 w-4\" />\n                        )}\n                    </Button>\n                </div>\n\n                <div\n                    className={`relative w-full items-center flex flex-row min-h-9 cursor-pointer`}\n                    style={{\n                        transition: 'padding 0.5s',\n                        paddingLeft:\n                            selected && canGoForward()\n                                ? '7.25rem'\n                                : selected && editingURL\n                                  ? '0'\n                                  : selected\n                                    ? '5rem'\n                                    : '0',\n                        paddingRight: editingURL ? '0' : '5.625rem',\n                    }}\n                    onMouseDown={(e) => {\n                        if (e.target instanceof HTMLInputElement) {\n                            return;\n                        }\n                        if (editingURL) {\n                            setEditingURL(false);\n                            const validUrl = getValidUrl(urlInputValue);\n                            setWebviewSrc(validUrl);\n                        }\n                        startMove(e);\n                    }}\n                    onDoubleClick={(e) => {\n                        if (\n                            e.target instanceof HTMLInputElement ||\n                            e.target instanceof HTMLButtonElement ||\n                            (e.target as HTMLElement).closest('button')\n                        ) {\n                            return;\n                        }\n                        setEditingURL(true);\n                    }}\n                >\n                    <Input\n                        ref={inputRef}\n                        className=\"text-small text-foreground-primary bg-background-secondary/60 w-full overflow-hidden text-ellipsis whitespace-nowrap min-w-[20rem] border-none focus:ring-0 focus:border-0 px-0 leading-none py-0 rounded-none\"\n                        value={urlInputValue}\n                        onChange={(e) => setUrlInputValue(e.target.value)}\n                        onKeyDown={handleKeydown}\n                        onBlur={handleBlur}\n                        style={{\n                            transition: 'display 0.5s',\n                            display: editingURL ? 'flex' : 'none',\n                        }}\n                    />\n                    <Button\n                        className=\"absolute right-0.5 px-1 group\"\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={() => setEditingURL(false)}\n                        style={{\n                            transition: 'transform 0.5s, visibility 0.5s, opacity 0.5s',\n                            transform: editingURL ? 'translateX(0)' : 'translateX(-5.625rem)',\n                            visibility: editingURL ? 'visible' : 'hidden',\n                            opacity: editingURL ? 1 : 0,\n                        }}\n                    >\n                        <Icons.ArrowRight className=\"text-foreground-secondary group-hover:text-foreground-active h-4 w-4\" />\n                    </Button>\n                    <p\n                        className=\"text-small text-inherit hover:text-opacity-80 transition-colors px-0 h-auto leading-none py-0\"\n                        style={{\n                            transition: 'display 0.5s',\n                            display: editingURL ? 'none' : 'flex',\n                        }}\n                    >\n                        {getCleanURL(urlInputValue)}\n                    </p>\n                </div>\n\n                <div\n                    className=\"absolute right-0 flex flex-row z-50\"\n                    style={{\n                        transition: 'opacity 0.5s, transform 0.5s',\n                        transform: editingURL ? 'translateX(100%)' : 'translateX(0)',\n                        opacity: editingURL ? 0 : 1,\n                    }}\n                >\n                    <EnabledButton webviewId={settings.id} />\n                    <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button\n                                className={cn(\n                                    'group transition-none',\n                                    state === WebviewState.DOM_ONLOOK_ENABLED && selected\n                                        ? 'hover:text-teal-200 hover:bg-teal-400/10'\n                                        : state === WebviewState.DOM_NO_ONLOOK && selected\n                                          ? 'hover:text-amber-200 hover:bg-amber-400/10'\n                                          : '',\n                                )}\n                                size={'icon'}\n                                variant={'ghost'}\n                            >\n                                <Icons.ChevronDown className=\"text-inherit h-4 w-4 rotate-0 group-data-[state=open]:-rotate-180 duration-200 ease-in-out\" />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent className=\"rounded-md bg-background\">\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={() => editorEngine.duplicateWindow(settings.id)}\n                                >\n                                    <span className=\"flex w-full items-center text-smallPlus\">\n                                        <Icons.Copy className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>Duplicate Window</span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={reload}\n                                >\n                                    <span className=\"flex w-full items-center text-smallPlus\">\n                                        <Icons.Reload className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>Refresh Window</span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild className=\"p-0\">\n                                <div className=\"flex flex-row hover:bg-transparent focus:bg-transparent w-full\">\n                                    <Button\n                                        variant={'ghost'}\n                                        className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                        onClick={goBack}\n                                        disabled={!canGoBack()}\n                                    >\n                                        <Icons.ArrowLeft className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />{' '}\n                                        Back\n                                    </Button>\n                                    <Button\n                                        variant={'ghost'}\n                                        className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                        onClick={goForward}\n                                        disabled={!canGoForward()}\n                                    >\n                                        <span className=\"flex w-full items-center text-smallPlus\">\n                                            <span>Next</span>\n                                            <Icons.ArrowRight className=\"ml-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        </span>\n                                    </Button>\n                                </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild className=\"p-0\">\n                                <div className=\"flex flex-row hover:bg-transparent focus:bg-transparent w-full\">\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.System ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.System)}\n                                    >\n                                        <Icons.Laptop\n                                            className={`${theme === Theme.System ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.Dark ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.Dark)}\n                                    >\n                                        <Icons.Moon\n                                            className={`${theme === Theme.Dark ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.Light ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.Light)}\n                                    >\n                                        <Icons.Sun\n                                            className={`${theme === Theme.Light ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={() => editorEngine.deleteWindow(settings.id)}\n                                    disabled={!editorEngine.canDeleteWindow()}\n                                >\n                                    <span className=\"flex w-full items-center\">\n                                        <Icons.Trash className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>\n                                            {editorEngine.canDeleteWindow()\n                                                ? 'Delete Window'\n                                                : \"Can't delete this!\"}\n                                        </span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default BrowserControls;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/Frame.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'darkmode' is assigned a value but never used.","line":39,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deregisterWebview' is defined but never used.","line":223,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport type { WebviewMessageBridge } from '@/lib/editor/messageBridge';\nimport { EditorMode } from '@/lib/models';\nimport type { SizePreset } from '@/lib/sizePresets';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { RunState } from '@onlook/models/run';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { ShineBorder } from '@onlook/ui/shine-border';\nimport { cn } from '@onlook/ui/utils';\nimport { motion } from 'framer-motion';\nimport debounce from 'lodash/debounce';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useRef, useState, type MouseEvent } from 'react';\nimport BrowserControls from './BrowserControl';\nimport GestureScreen from './GestureScreen';\nimport ResizeHandles from './ResizeHandles';\n\nconst Frame = observer(\n    ({\n        messageBridge,\n        settings,\n    }: {\n        messageBridge: WebviewMessageBridge;\n        settings: FrameSettings;\n    }) => {\n        const RETRY_TIMEOUT = 3000;\n        const DOM_FAILED_DELAY = 3000;\n        const editorEngine = useEditorEngine();\n        const projectsManager = useProjectsManager();\n        const webviewRef = useRef<Electron.WebviewTag | null>(null);\n        let domState = editorEngine.webviews.getState(settings.id);\n        const [selected, setSelected] = useState<boolean>(\n            editorEngine.webviews.isSelected(settings.id),\n        );\n        const [hovered, setHovered] = useState<boolean>(false);\n        const [darkmode, setDarkmode] = useState<boolean>(false);\n        const [domReady, setDomReady] = useState(false);\n        const [domFailed, setDomFailed] = useState(false);\n        const [shouldShowDomFailed, setShouldShowDomFailed] = useState(false);\n        const [selectedPreset, setSelectedPreset] = useState<SizePreset | null>(null);\n        const [lockedPreset, setLockedPreset] = useState<SizePreset | null>(null);\n\n        const [webviewSize, setWebviewSize] = useState(settings.dimension);\n        const [webviewSrc, setWebviewSrc] = useState<string>(settings.url);\n        const [webviewPosition, setWebviewPosition] = useState(settings.position);\n        const [isResizing, setIsResizing] = useState<boolean>(false);\n        const [aspectRatioLocked, setAspectRatioLocked] = useState(\n            settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n        );\n\n        const clampedDimensions = useMemo(\n            () => ({\n                width: Math.max(webviewSize.width, parseInt(DefaultSettings.MIN_DIMENSIONS.width)),\n                height: Math.max(\n                    webviewSize.height,\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                ),\n            }),\n            [webviewSize],\n        );\n\n        const debouncedSaveFrame = useCallback(\n            debounce((id: string, frameData: Partial<FrameSettings>) => {\n                editorEngine.canvas.saveFrame(id, frameData);\n            }, 100),\n            [editorEngine.canvas],\n        );\n\n        const handleUrlChange = useCallback(\n            (e: any) => {\n                setWebviewSrc(e.url);\n\n                editorEngine.pages.handleWebviewUrlChange(settings.id);\n            },\n            [editorEngine.pages, settings.id],\n        );\n\n        const handleDomReady = useCallback(async () => {\n            const webview = webviewRef.current;\n            if (!webview) {\n                return;\n            }\n            await webview.executeJavaScript(`window.api?.setWebviewId('${webview.id}')`);\n            setDomReady(true);\n            webview.setZoomLevel(0);\n\n            const body = await editorEngine.ast.getBodyFromWebview(webview);\n\n            setDomFailed(body.children.length === 0);\n\n            const state = editorEngine.webviews.computeState(body);\n            editorEngine.webviews.setState(webview, state);\n\n            if (state === WebviewState.DOM_ONLOOK_ENABLED) {\n                setTimeout(() => {\n                    selectFirstElement(webview);\n                    editorEngine.takeActiveWebviewScreenshot(settings.id, {\n                        save: true,\n                    });\n                }, 1000);\n            }\n\n            setTimeout(() => {\n                getDarkMode(webview);\n            }, 100);\n            webview.executeJavaScript(`window.api?.processDom()`);\n        }, [editorEngine.ast, editorEngine.webviews]);\n\n        useEffect(() => {\n            const observer = (newSettings: FrameSettings) => {\n                const newDimensions = {\n                    width: newSettings.dimension.width,\n                    height: newSettings.dimension.height,\n                };\n                if (newSettings.aspectRatioLocked !== aspectRatioLocked) {\n                    setAspectRatioLocked(\n                        newSettings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n                    );\n                }\n                if (\n                    newSettings.dimension.width !== webviewSize.width ||\n                    newSettings.dimension.height !== webviewSize.height\n                ) {\n                    setWebviewSize(newDimensions);\n                }\n            };\n\n            editorEngine.canvas.observeSettings(settings.id, observer);\n\n            return editorEngine.canvas.unobserveSettings(settings.id, observer);\n        }, []);\n\n        useEffect(setupFrame, [webviewRef]);\n        useEffect(\n            () => setSelected(editorEngine.webviews.isSelected(settings.id)),\n            [editorEngine.webviews.webviews],\n        );\n\n        useEffect(() => {\n            if (projectsManager.runner?.state === RunState.STOPPING) {\n                const refresh = () => {\n                    const webview = webviewRef.current as Electron.WebviewTag | null;\n                    if (webview) {\n                        try {\n                            webview.reload();\n                        } catch (error) {\n                            console.error('Failed to reload webview', error);\n                        }\n                    }\n                };\n                setTimeout(refresh, RETRY_TIMEOUT);\n                setTimeout(refresh, 500);\n            }\n        }, [projectsManager.runner?.state]);\n\n        useEffect(() => {\n            if (\n                settings.dimension.width !== webviewSize.width ||\n                settings.dimension.height !== webviewSize.height ||\n                settings.position.x !== webviewPosition.x ||\n                settings.position.y !== webviewPosition.y ||\n                settings.url !== webviewSrc\n            ) {\n                debouncedSaveFrame(settings.id, {\n                    url: webviewSrc,\n                    dimension: webviewSize,\n                    position: webviewPosition,\n                });\n            }\n        }, [webviewSize, webviewSrc, webviewPosition]);\n\n        useEffect(() => {\n            let timer: Timer;\n\n            if (domFailed) {\n                timer = setTimeout(() => {\n                    setShouldShowDomFailed(true);\n                }, DOM_FAILED_DELAY);\n            } else {\n                setShouldShowDomFailed(false);\n            }\n\n            return () => {\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            };\n        }, [domFailed]);\n\n        useEffect(() => {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n\n            setWebviewSize(settings.dimension);\n            setWebviewPosition(settings.position);\n            setWebviewSrc(settings.url);\n            setAspectRatioLocked(settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED);\n            if (webview) {\n                webview.id = settings.id;\n                setupFrame();\n                domState = editorEngine.webviews.getState(settings.id);\n            }\n        }, [settings.id]);\n\n        function setupFrame() {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.register(webview);\n            messageBridge.register(webview, settings.id);\n            setBrowserEventListeners(webview);\n\n            return () => {\n                editorEngine.webviews.deregister(webview);\n                messageBridge.deregister(webview);\n                webview.removeEventListener('did-navigate', handleUrlChange);\n            };\n        }\n\n        function deregisterWebview() {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.deregister(webview);\n            messageBridge.deregister(webview);\n            webview.removeEventListener('did-navigate', handleUrlChange);\n        }\n\n        function setBrowserEventListeners(webview: Electron.WebviewTag) {\n            webview.addEventListener('did-navigate', handleUrlChange);\n            webview.addEventListener('did-navigate-in-page', handleUrlChange);\n            webview.addEventListener('dom-ready', handleDomReady);\n            webview.addEventListener('did-fail-load', handleDomFailed);\n            webview.addEventListener('focus', handleWebviewFocus);\n            webview.addEventListener('console-message', handleConsoleMessage);\n        }\n\n        async function getDarkMode(webview: Electron.WebviewTag) {\n            const darkmode = (await webview.executeJavaScript(`window.api?.getTheme()`)) || 'light';\n            setDarkmode(darkmode === 'dark');\n        }\n\n        function handleDomFailed() {\n            setDomFailed(true);\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.setState(webview, WebviewState.RUNNING_NO_DOM);\n\n            setTimeout(() => {\n                if (webview) {\n                    try {\n                        webview.reload();\n                    } catch (error) {\n                        console.error('Failed to reload webview', error);\n                    }\n                }\n            }, RETRY_TIMEOUT);\n        }\n\n        function handleWebviewFocus() {\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webviewRef.current as Electron.WebviewTag);\n        }\n\n        function handleConsoleMessage(event: Electron.ConsoleMessageEvent) {\n            if (event.sourceId === 'chrome-error://chromewebdata/') {\n                // This is a chrome error from renderer, we don't want to show it\n                return;\n            }\n            if (event.level === 3) {\n                editorEngine.errors.addError(settings.id, event);\n            }\n        }\n\n        function startMove(e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            editorEngine.overlay.clear();\n\n            const startX = e.clientX;\n            const startY = e.clientY;\n\n            const move: any = (e: MouseEvent) => {\n                const scale = editorEngine.canvas.scale;\n                const deltaX = (e.clientX - startX) / scale;\n                const deltaY = (e.clientY - startY) / scale;\n\n                setWebviewPosition({\n                    x: webviewPosition.x + deltaX,\n                    y: webviewPosition.y + deltaY,\n                });\n            };\n\n            const stopMove = (e: any) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                window.removeEventListener('mousemove', move);\n                window.removeEventListener('mouseup', stopMove);\n            };\n\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', stopMove);\n        }\n\n        function getSelectedOutlineColor() {\n            if (editorEngine.mode === EditorMode.INTERACT) {\n                return 'outline-blue-400';\n            }\n            if (domState === WebviewState.DOM_ONLOOK_ENABLED) {\n                return 'outline-teal-400';\n            }\n            if (domState === WebviewState.DOM_NO_ONLOOK) {\n                return 'outline-amber-400';\n            }\n            if (domState === WebviewState.NOT_RUNNING && editorEngine.mode === EditorMode.DESIGN) {\n                return 'outline-foreground-secondary';\n            }\n            return 'outline-transparent';\n        }\n\n        function renderNotRunning() {\n            return (\n                <>\n                    {projectsManager.runner?.state === RunState.RUNNING ? (\n                        <ShineBorder\n                            className=\"w-full absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-t from-gray-800/40 via-gray-500/40 to-gray-400/40 border-gray-500 border-[0.5px] space-y-10 rounded-xl\"\n                            color={[\n                                'var(--color-teal-300)',\n                                'var(--color-blue-400)',\n                                'var(--color-purple-200)',\n                            ]}\n                            autoShine={true}\n                        >\n                            <motion.p\n                                className=\"text-active text-title1 text-center text-balance pb-24\"\n                                initial={{ opacity: 0, y: 10 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                transition={{ duration: 0.5, delay: 0.2 }}\n                            >\n                                {'Waiting for the App to start...'}\n                            </motion.p>\n                        </ShineBorder>\n                    ) : (\n                        <div className=\"w-full absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-t from-gray-800/40 via-gray-500/40 to-gray-400/40 border-gray-500 border-[0.5px] space-y-10 rounded-xl\">\n                            <p className=\"text-active text-title1 text-center text-balance\">\n                                {'Press '}\n                                <span className=\"text-teal-600 dark:text-teal-300\">Play</span>\n                                {' to start designing your App'}\n                            </p>\n                            <Button\n                                className={cn(\n                                    'h-14 overflow-hidden',\n                                    'text-teal-700 dark:text-teal-100 relative border-teal-700 dark:border-teal-400 hover:border-teal-500 dark:hover:border-teal-200 hover:shadow-xl shadow-2xl shadow-teal-700/50 dark:shadow-teal-400/50 hover:shadow-teal-500/50 dark:hover:shadow-teal-200/50 transition-all duration-300',\n                                    'before:absolute before:inset-0 before:bg-[radial-gradient(169.40%_89.55%_at_94.76%_6.29%,theme(colors.teal.200/80)_0%,theme(colors.teal.300/80)_100%)] dark:before:bg-[radial-gradient(169.40%_89.55%_at_94.76%_6.29%,theme(colors.teal.800/80)_0%,theme(colors.teal.500/80)_100%)]',\n                                    'after:absolute after:inset-0 after:bg-[radial-gradient(169.40%_89.55%_at_90%_10%,theme(colors.teal.300/50)_0%,theme(colors.teal.200/50)_100%)] dark:after:bg-[radial-gradient(169.40%_89.55%_at_90%_10%,theme(colors.teal.500/50)_0%,theme(colors.teal.400/50)_100%)]',\n                                    'after:opacity-0 hover:after:opacity-100',\n                                    'before:transition-all after:transition-all before:duration-300 after:duration-300',\n                                    'before:z-0 after:z-0',\n                                )}\n                                onClick={() => {\n                                    projectsManager.runner?.start();\n                                }}\n                            >\n                                <span className=\"relative z-10 flex items-center gap-x-1.5 px-3 py-2.5\">\n                                    <Icons.Play className=\"w-8 h-8\" />\n                                    <span className=\"text-title3\">Play</span>\n                                </span>\n                            </Button>\n                        </div>\n                    )}\n                </>\n            );\n        }\n\n        async function selectFirstElement(webview: Electron.WebviewTag) {\n            const domEl = await webview.executeJavaScript(`window.api?.getFirstOnlookElement()`);\n            if (domEl) {\n                editorEngine.elements.click([domEl], webview);\n            }\n        }\n\n        return (\n            <div\n                className=\"flex flex-col fixed\"\n                style={{ transform: `translate(${webviewPosition.x}px, ${webviewPosition.y}px)` }}\n            >\n                <BrowserControls\n                    webviewRef={domReady ? webviewRef : null}\n                    webviewSrc={webviewSrc}\n                    setWebviewSrc={setWebviewSrc}\n                    selected={selected}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setDarkmode={setDarkmode}\n                    settings={settings}\n                    startMove={startMove}\n                    domState={domState}\n                    webviewSize={webviewSize}\n                />\n                <div className=\"relative\">\n                    <ResizeHandles\n                        webviewRef={webviewRef}\n                        webviewSize={webviewSize}\n                        setWebviewSize={setWebviewSize}\n                        selectedPreset={selectedPreset}\n                        setSelectedPreset={setSelectedPreset}\n                        lockedPreset={lockedPreset}\n                        setLockedPreset={setLockedPreset}\n                        setIsResizing={setIsResizing}\n                        aspectRatioLocked={aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED}\n                        webviewId={settings.id}\n                    />\n                    <webview\n                        id={settings.id}\n                        ref={webviewRef}\n                        className={cn(\n                            'w-[96rem] h-[60rem] backdrop-blur-sm transition outline outline-4',\n                            shouldShowDomFailed ? 'bg-transparent' : 'bg-white',\n                            selected ? getSelectedOutlineColor() : 'outline-transparent',\n                        )}\n                        src={settings.url}\n                        preload={`file://${window.env.WEBVIEW_PRELOAD_PATH}`}\n                        allowpopups={'true' as any}\n                        style={{\n                            width: clampedDimensions.width,\n                            height: clampedDimensions.height,\n                        }}\n                    ></webview>\n                    <GestureScreen\n                        isResizing={isResizing}\n                        webviewRef={webviewRef}\n                        setHovered={setHovered}\n                    />\n                    {domFailed && shouldShowDomFailed && renderNotRunning()}\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default Frame;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/GestureScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropElementProperties' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":111,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { getRelativeMousePositionToWebview } from '@/lib/editor/engine/overlay/utils';\nimport { EditorMode } from '@/lib/models';\nimport { MouseAction } from '@onlook/models/editor';\nimport type { DomElement, DropElementProperties, ElementPosition } from '@onlook/models/element';\nimport { cn } from '@onlook/ui/utils';\nimport throttle from 'lodash/throttle';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport RightClickMenu from '../RightClickMenu';\n\ninterface GestureScreenProps {\n    webviewRef: React.RefObject<Electron.WebviewTag>;\n    setHovered: React.Dispatch<React.SetStateAction<boolean>>;\n    isResizing: boolean;\n}\n\nconst GestureScreen = observer(({ webviewRef, setHovered, isResizing }: GestureScreenProps) => {\n    const editorEngine = useEditorEngine();\n\n    const getWebview = useCallback((): Electron.WebviewTag => {\n        const webview = webviewRef.current as Electron.WebviewTag | null;\n        if (!webview) {\n            throw Error('No webview found');\n        }\n        return webview;\n    }, [webviewRef]);\n\n    const getRelativeMousePosition = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>): ElementPosition => {\n            const webview = getWebview();\n            return getRelativeMousePositionToWebview(e, webview);\n        },\n        [getWebview],\n    );\n\n    const handleMouseEvent = useCallback(\n        async (e: React.MouseEvent<HTMLDivElement>, action: MouseAction) => {\n            const webview = getWebview();\n            const pos = getRelativeMousePosition(e);\n            const el: DomElement = await webview.executeJavaScript(\n                `window.api?.getElementAtLoc(${pos.x}, ${pos.y}, ${action === MouseAction.MOUSE_DOWN || action === MouseAction.DOUBLE_CLICK})`,\n            );\n            if (!el) {\n                return;\n            }\n\n            switch (action) {\n                case MouseAction.MOVE:\n                    editorEngine.elements.mouseover(el, webview);\n                    if (e.altKey) {\n                        editorEngine.elements.showMeasurement();\n                    } else {\n                        editorEngine.overlay.removeMeasurement();\n                    }\n                    break;\n                case MouseAction.MOUSE_DOWN:\n                    if (el.tagName.toLocaleLowerCase() === 'body') {\n                        editorEngine.webviews.select(webview);\n                        return;\n                    }\n                    // Ignore right-clicks\n                    if (e.button == 2) {\n                        break;\n                    }\n                    if (editorEngine.text.isEditing) {\n                        editorEngine.text.end();\n                    }\n                    if (e.shiftKey) {\n                        editorEngine.elements.shiftClick(el, webview);\n                    } else {\n                        editorEngine.move.start(el, pos, webview);\n                        editorEngine.elements.click([el], webview);\n                    }\n                    break;\n                case MouseAction.DOUBLE_CLICK:\n                    editorEngine.text.start(el, webview);\n                    break;\n            }\n        },\n        [getWebview, getRelativeMousePosition, editorEngine],\n    );\n\n    const throttledMouseMove = useMemo(\n        () =>\n            throttle((e: React.MouseEvent<HTMLDivElement>) => {\n                if (editorEngine.move.isDragging) {\n                    editorEngine.move.drag(e, getRelativeMousePosition);\n                } else if (\n                    editorEngine.mode === EditorMode.DESIGN ||\n                    ((editorEngine.mode === EditorMode.INSERT_DIV ||\n                        editorEngine.mode === EditorMode.INSERT_TEXT ||\n                        editorEngine.mode === EditorMode.INSERT_IMAGE) &&\n                        !editorEngine.insert.isDrawing)\n                ) {\n                    handleMouseEvent(e, MouseAction.MOVE);\n                } else if (editorEngine.insert.isDrawing) {\n                    editorEngine.insert.draw(e);\n                }\n            }, 16),\n        [editorEngine, getRelativeMousePosition, handleMouseEvent],\n    );\n\n    useEffect(() => {\n        return () => {\n            throttledMouseMove.cancel();\n        };\n    }, [throttledMouseMove]);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const webview = getWebview();\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webview);\n        },\n        [getWebview, editorEngine.webviews],\n    );\n\n    function handleDoubleClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (editorEngine.mode !== EditorMode.DESIGN) {\n            return;\n        }\n        handleMouseEvent(e, MouseAction.DOUBLE_CLICK);\n    }\n\n    function handleMouseDown(e: React.MouseEvent<HTMLDivElement>) {\n        if (editorEngine.mode === EditorMode.DESIGN) {\n            handleMouseEvent(e, MouseAction.MOUSE_DOWN);\n        } else if (\n            editorEngine.mode === EditorMode.INSERT_DIV ||\n            editorEngine.mode === EditorMode.INSERT_TEXT ||\n            editorEngine.mode === EditorMode.INSERT_IMAGE\n        ) {\n            editorEngine.insert.start(e);\n        }\n    }\n\n    async function handleMouseUp(e: React.MouseEvent<HTMLDivElement>) {\n        editorEngine.insert.end(e, webviewRef.current);\n        editorEngine.move.end(e);\n    }\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleMouseEvent(e, MouseAction.MOVE);\n    };\n\n    const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        try {\n            const propertiesData = e.dataTransfer.getData('application/json');\n            if (!propertiesData) {\n                console.error('No element properties in drag data');\n                return;\n            }\n\n            const properties = JSON.parse(propertiesData);\n\n            if (properties.type === 'image') {\n                const webview = getWebview();\n                const dropPosition = getRelativeMousePosition(e);\n                await editorEngine.insert.insertDroppedImage(webview, dropPosition, properties);\n            } else {\n                const webview = getWebview();\n                const dropPosition = getRelativeMousePosition(e);\n                await editorEngine.insert.insertDroppedElement(webview, dropPosition, properties);\n            }\n\n            editorEngine.mode = EditorMode.DESIGN;\n        } catch (error) {\n            console.error('drop operation failed:', error);\n        }\n    };\n\n    const gestureScreenClassName = useMemo(() => {\n        return cn(\n            'absolute inset-0 bg-transparent',\n            editorEngine.mode === EditorMode.INTERACT && !isResizing ? 'hidden' : 'visible',\n            editorEngine.mode === EditorMode.INSERT_DIV && 'cursor-crosshair',\n            editorEngine.mode === EditorMode.INSERT_TEXT && 'cursor-text',\n        );\n    }, [editorEngine.mode, isResizing]);\n\n    return (\n        <RightClickMenu>\n            <div\n                className={gestureScreenClassName}\n                onClick={handleClick}\n                onMouseOver={() => setHovered(true)}\n                onMouseOut={useCallback(() => {\n                    setHovered(false);\n                    editorEngine.elements.clearHoveredElement();\n                    editorEngine.overlay.state.updateHoverRect(null);\n                }, [editorEngine, setHovered])}\n                onMouseLeave={handleMouseUp}\n                onMouseMove={throttledMouseMove}\n                onMouseDown={handleMouseDown}\n                onMouseUp={handleMouseUp}\n                onDoubleClick={handleDoubleClick}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n            ></div>\n        </RightClickMenu>\n    );\n});\n\nexport default GestureScreen;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webviewRef' is defined but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webviewId' is defined but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode } from '@/lib/models';\nimport type { SizePreset } from '@/lib/sizePresets';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { ToastAction } from '@onlook/ui/toast';\nimport { useToast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { type MouseEvent, useRef } from 'react';\n\ninterface ResizeHandleProps {\n    webviewRef: React.RefObject<Electron.WebviewTag>;\n    webviewSize: { width: number; height: number };\n    setWebviewSize: React.Dispatch<React.SetStateAction<{ width: number; height: number }>>;\n    selectedPreset: SizePreset | null;\n    setSelectedPreset: React.Dispatch<React.SetStateAction<SizePreset | null>>;\n    lockedPreset: SizePreset | null;\n    setLockedPreset: React.Dispatch<React.SetStateAction<SizePreset | null>>;\n    setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;\n    aspectRatioLocked: boolean;\n    webviewId: string;\n}\n\nenum HandleType {\n    Right = 'right',\n    Bottom = 'bottom',\n}\n\nconst ResizeHandles = observer(\n    ({\n        webviewRef,\n        webviewSize,\n        setWebviewSize,\n        setSelectedPreset,\n        lockedPreset,\n        setLockedPreset,\n        setIsResizing,\n        aspectRatioLocked,\n        webviewId,\n    }: ResizeHandleProps) => {\n        const editorEngine = useEditorEngine();\n        const resizeHandleRef = useRef(null);\n        const { toast } = useToast();\n\n        const startResize = (\n            e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>,\n            types: HandleType[],\n        ) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            setIsResizing(true);\n\n            const startX = e.clientX;\n            const startY = e.clientY;\n            const startWidth = webviewSize.width;\n            const startHeight = webviewSize.height;\n            const aspectRatio = startWidth / startHeight;\n\n            const resize: any = (e: MouseEvent) => {\n                const scale = editorEngine.canvas.scale;\n                let heightDelta = types.includes(HandleType.Bottom)\n                    ? (e.clientY - startY) / scale\n                    : 0;\n                let widthDelta = types.includes(HandleType.Right)\n                    ? (e.clientX - startX) / scale\n                    : 0;\n\n                let currentWidth = startWidth + widthDelta;\n                let currentHeight = startHeight + heightDelta;\n\n                if (aspectRatioLocked) {\n                    if (types.includes(HandleType.Right) && !types.includes(HandleType.Bottom)) {\n                        heightDelta = widthDelta / aspectRatio;\n                    } else if (\n                        !types.includes(HandleType.Right) &&\n                        types.includes(HandleType.Bottom)\n                    ) {\n                        widthDelta = heightDelta * aspectRatio;\n                    } else {\n                        if (Math.abs(widthDelta) > Math.abs(heightDelta)) {\n                            heightDelta = widthDelta / aspectRatio;\n                        } else {\n                            widthDelta = heightDelta * aspectRatio;\n                        }\n                    }\n\n                    currentWidth = startWidth + widthDelta;\n                    currentHeight = startHeight + heightDelta;\n\n                    if (currentWidth < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                        currentWidth = parseInt(DefaultSettings.MIN_DIMENSIONS.width);\n                        currentHeight = currentWidth / aspectRatio;\n                    }\n                    if (currentHeight < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                        currentHeight = parseInt(DefaultSettings.MIN_DIMENSIONS.height);\n                        currentWidth = currentHeight * aspectRatio;\n                    }\n                } else {\n                    if (currentWidth < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                        currentWidth = parseInt(DefaultSettings.MIN_DIMENSIONS.width);\n                    }\n                    if (currentHeight < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                        currentHeight = parseInt(DefaultSettings.MIN_DIMENSIONS.height);\n                    }\n                }\n\n                setWebviewSize({\n                    width: Math.floor(currentWidth),\n                    height: Math.floor(currentHeight),\n                });\n\n                setSelectedPreset(null);\n            };\n\n            const stopResize = (e: any) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                setIsResizing(false);\n\n                window.removeEventListener('mousemove', resize);\n                window.removeEventListener('mouseup', stopResize);\n            };\n\n            window.addEventListener('mousemove', resize);\n            window.addEventListener('mouseup', stopResize);\n        };\n\n        const handleLockedResize = () => {\n            const unlockPresetToast = () => {\n                setLockedPreset(null);\n            };\n\n            toast({\n                title: 'Preset dimensions locked.',\n                description: 'Unlock to resize.',\n                action: (\n                    <ToastAction altText=\"Unlock\" onClick={unlockPresetToast}>\n                        Unlock\n                    </ToastAction>\n                ),\n            });\n        };\n\n        return (\n            <div\n                className={cn(\n                    'absolute inset-0 opacity-40 transition min-w-0',\n                    editorEngine.mode === EditorMode.INTERACT ? 'visible' : 'visible',\n                    { 'hover:opacity-60': !lockedPreset },\n                )}\n            >\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -bottom-10 w-full h-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-s-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset ? handleLockedResize() : startResize(e, [HandleType.Bottom])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-48 h-1\"></div>\n                </div>\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -right-10 h-full w-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-e-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset ? handleLockedResize() : startResize(e, [HandleType.Right])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-1 h-48\"></div>\n                </div>\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -bottom-10 -right-10 w-10 h-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-se-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset\n                            ? handleLockedResize()\n                            : startResize(e, [HandleType.Right, HandleType.Bottom])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-2 h-2\"></div>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default ResizeHandles;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Name.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MainChannels' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'invokeMainChannel' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n} from '@onlook/ui/card';\nimport { Input } from '@onlook/ui/input';\nimport { Label } from '@onlook/ui/label';\nimport type { StepProps } from '..';\nimport { getRandomPlaceholder } from '../../../helpers';\nimport { invokeMainChannel } from '@/lib/utils';\n\nexport const LoadNameProject = ({\n    props: { projectData, currentStep, setProjectData, totalSteps, prevStep, nextStep },\n}: {\n    props: StepProps;\n}) => {\n    function setProjectName(name: string) {\n        setProjectData({\n            ...projectData,\n            name,\n        });\n    }\n\n    function goBack() {\n        prevStep();\n    }\n\n    return (\n        <Card className=\"w-[30rem]\">\n            <CardHeader>\n                <CardTitle>{'Letâ€™s name your project'}</CardTitle>\n                <CardDescription>\n                    {\n                        \"This is your Onlook project name. Don't worry, This will not rename your actual folder.\"\n                    }\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-24 flex items-center w-full\">\n                <div className=\"flex flex-col w-full gap-2\">\n                    <Label htmlFor=\"text\">Project Name</Label>\n                    <Input\n                        type=\"text\"\n                        placeholder={getRandomPlaceholder()}\n                        value={projectData.name || ''}\n                        onInput={(e) => setProjectName(e.currentTarget.value)}\n                    />\n                </div>\n            </CardContent>\n            <CardFooter className=\"text-sm\">\n                <p className=\"text-foreground-onlook\">{`${currentStep + 1} of ${totalSteps}`}</p>\n                <div className=\"flex ml-auto gap-2\">\n                    <Button type=\"button\" onClick={goBack} variant=\"ghost\">\n                        Back\n                    </Button>\n                    <Button\n                        disabled={!projectData.name || projectData.name.length === 0}\n                        type=\"button\"\n                        onClick={nextStep}\n                        variant=\"outline\"\n                    >\n                        Next\n                    </Button>\n                </div>\n            </CardFooter>\n        </Card>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/SelectFolder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/SetUrl.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":76,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { invokeMainChannel } from '@/lib/utils';\nimport { DefaultSettings, MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport { CardDescription, CardTitle } from '@onlook/ui/card';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@onlook/ui/collapsible';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { Label } from '@onlook/ui/label';\nimport { cn } from '@onlook/ui/utils';\nimport type React from 'react';\nimport { useState } from 'react';\nimport type { StepComponent } from '../withStepProps';\n\nconst LoadSetUrl: StepComponent = ({ props, variant }) => {\n    const { projectData, setProjectData, prevStep, nextStep } = props;\n    const [projectUrl, setProjectUrl] = useState<string>(projectData.url || '');\n    const [runCommand, setRunCommand] = useState<string>(projectData.commands?.run || '');\n    const [buildCommand, setBuildCommand] = useState<string>(projectData.commands?.build || '');\n    const [installCommand, setInstallCommand] = useState<string>(\n        projectData.commands?.install || '',\n    );\n    const [error, setError] = useState<string | null>(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n    function handleUrlInput(e: React.FormEvent<HTMLInputElement>) {\n        setProjectUrl(e.currentTarget.value);\n        if (!validateUrl(e.currentTarget.value)) {\n            setError('Please use a valid URL');\n            return;\n        } else {\n            setError(null);\n        }\n        setProjectData({\n            ...projectData,\n            url: e.currentTarget.value,\n        });\n    }\n\n    function handleInstallCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setInstallCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                install: e.currentTarget.value,\n            },\n        });\n    }\n\n    function handleRunCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setRunCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                run: e.currentTarget.value,\n            },\n        });\n    }\n\n    function handleBuildCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setBuildCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                build: e.currentTarget.value,\n            },\n        });\n    }\n\n    function validateUrl(url: string): boolean {\n        try {\n            const parsedUrl = new URL(url);\n            return ['http:', 'https:'].includes(parsedUrl.protocol);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    function goBack() {\n        prevStep();\n    }\n\n    function handleNext() {\n        if (!projectData.folderPath) {\n            setError('No project folder path found');\n            return;\n        }\n\n        const updatedInstallCommand = projectData.commands?.install || installCommand;\n\n        if (!updatedInstallCommand) {\n            setError('Please enter a valid install command');\n            return;\n        }\n\n        invokeMainChannel(MainChannels.INSTALL_PROJECT_DEPENDENCIES, {\n            folderPath: projectData.folderPath,\n            installCommand: updatedInstallCommand,\n        });\n        nextStep();\n    }\n\n    const renderHeader = () => (\n        <>\n            <CardTitle>{'Configure your project (optional)'}</CardTitle>\n            <CardDescription>\n                {'Update your project URL and commands or keep the defaults.'}\n            </CardDescription>\n        </>\n    );\n\n    const renderContent = () => (\n        <div className=\"flex flex-col w-full gap-6\">\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"projectUrl\">Local URL</Label>\n                <Input\n                    id=\"projectUrl\"\n                    className=\"bg-secondary\"\n                    value={projectUrl}\n                    type=\"text\"\n                    placeholder=\"http://localhost:3000\"\n                    onInput={handleUrlInput}\n                />\n            </div>\n\n            <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n                <CollapsibleTrigger className=\"flex items-center gap-2 text-sm font-medium\">\n                    <Icons.ChevronDown\n                        className={cn(\n                            'h-4 w-4 transition-transform duration-200',\n                            isOpen ? '' : '-rotate-90',\n                        )}\n                    />\n                    Project Commands\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"pt-4\">\n                    <div className=\"space-y-3\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"installCommand\">Install</Label>\n                            <Input\n                                id=\"installCommand\"\n                                className=\"bg-secondary\"\n                                value={installCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.install}\n                                onInput={handleInstallCommandInput}\n                            />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"runCommand\">Run</Label>\n                            <Input\n                                id=\"runCommand\"\n                                className=\"bg-secondary\"\n                                value={runCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.run}\n                                onInput={handleRunCommandInput}\n                            />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"buildCommand\">Build</Label>\n                            <Input\n                                id=\"buildCommand\"\n                                className=\"bg-secondary\"\n                                value={buildCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.build}\n                                onInput={handleBuildCommandInput}\n                            />\n                        </div>\n                    </div>\n                </CollapsibleContent>\n            </Collapsible>\n\n            <p className=\"text-red-500 text-sm\">{error || ''}</p>\n        </div>\n    );\n\n    const renderFooter = () => (\n        <>\n            <Button type=\"button\" onClick={goBack} variant=\"ghost\">\n                Back\n            </Button>\n            <Button\n                disabled={\n                    !projectData.url ||\n                    projectData.url.length === 0 ||\n                    !projectData.commands?.run ||\n                    projectData.commands?.run.length === 0 ||\n                    !projectData.commands?.build ||\n                    projectData.commands?.build.length === 0\n                }\n                type=\"button\"\n                onClick={handleNext}\n                variant=\"outline\"\n            >\n                {'Next'}\n            </Button>\n        </>\n    );\n\n    switch (variant) {\n        case 'header':\n            return renderHeader();\n        case 'content':\n            return renderContent();\n        case 'footer':\n            return renderFooter();\n    }\n};\n\nLoadSetUrl.Header = (props) => <LoadSetUrl props={props} variant=\"header\" />;\nLoadSetUrl.Content = (props) => <LoadSetUrl props={props} variant=\"content\" />;\nLoadSetUrl.Footer = (props) => <LoadSetUrl props={props} variant=\"footer\" />;\nLoadSetUrl.Header.displayName = 'LoadSetUrl.Header';\nLoadSetUrl.Content.displayName = 'LoadSetUrl.Content';\nLoadSetUrl.Footer.displayName = 'LoadSetUrl.Footer';\n\nexport { LoadSetUrl };\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Warning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/Name.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/SelectFolder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/Setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/stepContents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/withStepProps.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/NoProjectsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/Carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/EditAppButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/Info.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/ProjectSettingsButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/CreateError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/CreateLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/PromptingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":258,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { ProjectTabs } from '@/lib/projects';\nimport { compressImage } from '@/lib/utils';\nimport { MessageContextType, type ImageMessageContext } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { CardContent, CardHeader } from '@onlook/ui/card';\nimport { Icons } from '@onlook/ui/icons';\nimport { MotionCard } from '@onlook/ui/motion-card';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { AnimatePresence, motion, MotionConfig } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport useResizeObserver from 'use-resize-observer';\nimport { DraftImagePill } from '../../editor/EditPanel/ChatTab/ContextPills/DraftingImagePill';\n\nexport const PromptingCard = () => {\n    const projectsManager = useProjectsManager();\n    const { ref: diffRef, height: diffHeight } = useResizeObserver();\n    const [inputValue, setInputValue] = useState('');\n    const [isDragging, setIsDragging] = useState(false);\n    const [selectedImages, setSelectedImages] = useState<ImageMessageContext[]>([]);\n    const [imageTooltipOpen, setImageTooltipOpen] = useState(false);\n    const [isHandlingFile, setIsHandlingFile] = useState(false);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const isInputInvalid = !inputValue || inputValue.trim().length < 10;\n    const [isComposing, setIsComposing] = useState(false);\n    const imageRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        const handleEscapeKey = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                projectsManager.projectsTab = ProjectTabs.PROJECTS;\n            }\n        };\n\n        window.addEventListener('keydown', handleEscapeKey);\n        return () => window.removeEventListener('keydown', handleEscapeKey);\n    }, []);\n\n    const handleSubmit = async () => {\n        if (isInputInvalid) {\n            console.warn('Input is too short');\n            return;\n        }\n        projectsManager.create.sendPrompt(inputValue, selectedImages, false);\n    };\n\n    const handleBlankSubmit = async () => {\n        projectsManager.create.sendPrompt('', [], true);\n    };\n\n    const handleDragOver = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(true);\n    };\n\n    const handleDragLeave = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(false);\n    };\n\n    const handleDrop = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(false);\n        setImageTooltipOpen(false);\n        // Find and reset the container's data attribute\n        const container = e.currentTarget.closest('.bg-background-secondary');\n        if (container) {\n            container.setAttribute('data-dragging-image', 'false');\n        }\n        const files = Array.from(e.dataTransfer.files);\n        handleNewImageFiles(files);\n    };\n\n    const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIsHandlingFile(true);\n        setImageTooltipOpen(false);\n        const files = Array.from(e.target.files || []);\n        handleNewImageFiles(files);\n    };\n\n    const handleNewImageFiles = async (files: File[]) => {\n        const imageFiles = files.filter((file) => file.type.startsWith('image/'));\n\n        const imageContexts: ImageMessageContext[] = [];\n        if (imageFiles.length > 0) {\n            // Handle the dropped image files\n            for (const file of imageFiles) {\n                const imageContext = await createImageMessageContext(file);\n                if (imageContext) {\n                    imageContexts.push(imageContext);\n                }\n            }\n        }\n        setSelectedImages([...selectedImages, ...imageContexts]);\n        setIsHandlingFile(false);\n    };\n\n    const handleRemoveImage = (imageContext: ImageMessageContext) => {\n        if (imageRef && imageRef.current) {\n            imageRef.current.value = '';\n        }\n        setSelectedImages(selectedImages.filter((f) => f !== imageContext));\n    };\n\n    const createImageMessageContext = async (file: File): Promise<ImageMessageContext | null> => {\n        try {\n            const compressedImage = await compressImage(file);\n\n            // If compression failed, fall back to original file\n            const base64 =\n                compressedImage ||\n                (await new Promise<string>((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.onloadend = () => {\n                        resolve(reader.result as string);\n                    };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(file);\n                }));\n\n            return {\n                type: MessageContextType.IMAGE,\n                content: base64,\n                displayName: file.name,\n                mimeType: file.type,\n            };\n        } catch (error) {\n            console.error('Error reading file:', error);\n            return null;\n        }\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            // Find the container div with the bg-background-secondary class\n            const co
[36mâ””â”€[0m [36mRunning...[0m
[?2026l[?2026h[0G[K[1A[K[1A[K[1A[K[1m@onlook/studio[0m lint $ [2meslint --fix .[0m
[36mâ”‚[0m [{"filePath":"/home/ubuntu/repos/onlook/apps/studio/builder-config/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/timer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/twTranslator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/hotkeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/ide.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/e2e/example.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/electron-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/assets/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ImageContentData } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { promises as fs, readFileSync } from 'fs';\nimport mime from 'mime-lite';\nimport path from 'path';\nimport writeFileAtomic from 'write-file-atomic';\n\nasync function scanImagesDirectory(projectRoot: string): Promise<ImageContentData[]> {\n    const imagesPath = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const images: ImageContentData[] = [];\n\n    try {\n        const entries = await fs.readdir(imagesPath, { withFileTypes: true });\n\n        for (const entry of entries) {\n            if (entry.isFile()) {\n                const extension = path.extname(entry.name).toLowerCase();\n                // Common image extensions\n                if (\n                    ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.ico'].includes(extension)\n                ) {\n                    const imagePath = path.join(imagesPath, entry.name);\n                    const image = readFileSync(imagePath, { encoding: 'base64' });\n                    const mimeType = mime.getType(imagePath);\n                    if (!mimeType) {\n                        console.error(`Failed to get mime type for ${imagePath}`);\n                        continue;\n                    }\n                    images.push({\n                        fileName: entry.name,\n                        content: `data:${mimeType};base64,${image}`,\n                        mimeType,\n                    });\n                }\n            }\n        }\n\n        return images;\n    } catch (error) {\n        console.error('Error scanning images directory:', error);\n        return [];\n    }\n}\n\nexport async function scanNextJsImages(projectRoot: string): Promise<ImageContentData[]> {\n    try {\n        return await scanImagesDirectory(projectRoot);\n    } catch (error) {\n        console.error('Error scanning images:', error);\n        throw error;\n    }\n}\n\nexport async function saveImageToProject(\n    projectFolder: string,\n    content: string,\n    fileName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectFolder, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, fileName);\n\n        try {\n            await fs.access(imagePath);\n            throw new Error(`File ${fileName} already exists`);\n        } catch (err: any) {\n            if (err.code === 'ENOENT') {\n                const buffer = Buffer.from(content, 'base64');\n                await fs.writeFile(imagePath, buffer);\n                return imagePath;\n            }\n            throw err;\n        }\n    } catch (error) {\n        console.error('Error uploading image:', error);\n        throw error;\n    }\n}\n\nexport async function deleteImageFromProject(\n    projectRoot: string,\n    imageName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, imageName);\n        await fs.unlink(imagePath);\n        return imagePath;\n    } catch (error) {\n        console.error('Error deleting image:', error);\n        throw error;\n    }\n}\n\nexport async function renameImageInProject(\n    projectRoot: string,\n    imageName: string,\n    newName: string,\n): Promise<string> {\n    if (!imageName || !newName) {\n        throw new Error('Image name and new name are required');\n    }\n\n    const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const oldImagePath = path.join(imageFolder, imageName);\n    const newImagePath = path.join(imageFolder, newName);\n\n    try {\n        await validateRename(oldImagePath, newImagePath);\n        await fs.rename(oldImagePath, newImagePath);\n\n        await updateImageReferences(projectRoot, imageName, newName);\n        return newImagePath;\n    } catch (error) {\n        console.error('Error renaming image:', error);\n        throw error;\n    }\n}\n\nconst MAX_FILENAME_LENGTH = 255;\nconst VALID_FILENAME_REGEX = /^[a-zA-Z0-9-_. ]+$/;\n\nasync function validateRename(oldImagePath: string, newImagePath: string): Promise<void> {\n    try {\n        await fs.access(oldImagePath);\n    } catch (err) {\n        throw new Error(`Source image does not exist`);\n    }\n\n    const newFileName = path.basename(newImagePath);\n\n    if (newFileName.length > MAX_FILENAME_LENGTH) {\n        throw new Error(`File name is too long (max ${MAX_FILENAME_LENGTH} characters)`);\n    }\n\n    if (!VALID_FILENAME_REGEX.test(newFileName)) {\n        throw new Error(\n            'File name can only contain letters, numbers, spaces, hyphens, underscores, and periods',\n        );\n    }\n\n    try {\n        await fs.access(newImagePath);\n        throw new Error(`A file with this name already exists`);\n    } catch (err: any) {\n        if (err.code !== 'ENOENT') {\n            throw err;\n        }\n    }\n}\n\nasync function updateImageReferences(\n    projectRoot: string,\n    oldName: string,\n    newName: string,\n): Promise<void> {\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const oldImageUrl = `/${prefix}/${oldName}`;\n    const newImageUrl = `/${prefix}/${newName}`;\n    const pattern = new RegExp(oldImageUrl.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g');\n\n    const sourceFiles = await findSourceFiles(projectRoot);\n    await Promise.all(\n        sourceFiles.map(async (file) => {\n            const content = await fs.readFile(file, 'utf8');\n            if (!content.includes(oldImageUrl)) {\n                return;\n            }\n            const updatedContent = content.replace(pattern, newImageUrl);\n            await writeFileAtomic(file, updatedContent, { encoding: 'utf8' });\n        }),\n    );\n}\n\nasync function findSourceFiles(\n    dirPath: string,\n    maxDepth: number = 10,\n    currentDepth: number = 0,\n): Promise<string[]> {\n    if (currentDepth >= maxDepth) {\n        console.warn(`Max directory depth (${maxDepth}) reached at: ${dirPath}`);\n        return [];\n    }\n\n    const files: string[] = [];\n    const entries = await fs.readdir(dirPath, { withFileTypes: true });\n\n    for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n            files.push(...(await findSourceFiles(fullPath, maxDepth, currentDepth + 1)));\n        } else if (\n            entry.isFile() &&\n            (entry.name.endsWith('.tsx') ||\n                entry.name.endsWith('.jsx') ||\n                entry.name.endsWith('.ts'))\n        ) {\n            files.push(fullPath);\n        }\n    }\n\n    return files;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/parse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/llmProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/classes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/image.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":32,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'action' is defined but never used.","line":32,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport * as t from '@babel/types';\nimport { type CodeInsertImage, type CodeRemoveImage } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { join } from 'path';\nimport { writeFile } from '../files';\nimport { addClassToNode } from './style';\n\nexport function insertImageToNode(path: NodePath<t.JSXElement>, action: CodeInsertImage): void {\n    const imageName = writeImageToFile(action);\n    if (!imageName) {\n        console.error('Failed to write image to file');\n        return;\n    }\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const backgroundClass = `bg-[url(/${prefix}/${imageName})]`;\n    addClassToNode(path.node, backgroundClass);\n}\n\nfunction writeImageToFile(action: CodeInsertImage): string | null {\n    try {\n        const imageFolder = `${action.folderPath}/${DefaultSettings.IMAGE_FOLDER}`;\n        const imagePath = join(imageFolder, action.image.fileName);\n        writeFile(imagePath, action.image.content, 'base64');\n        return action.image.fileName;\n    } catch (error) {\n        console.error('Failed to write image to file', error);\n        return null;\n    }\n}\n\nexport function removeImageFromNode(path: NodePath<t.JSXElement>, action: CodeRemoveImage): void {}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/move.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/remove.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'element' is defined but never used.","line":6,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport type * as t from '@babel/types';\nimport type { CodeRemove } from '@onlook/models/actions';\nimport { addKeyToElement, jsxFilter } from './helpers';\n\nexport function removeElementFromNode(path: NodePath<t.JSXElement>, element: CodeRemove): void {\n    const parentPath = path.parentPath;\n\n    if (!parentPath) {\n        console.error('No parent path found');\n        return;\n    }\n\n    const siblings = (parentPath.node as t.JSXElement).children?.filter(jsxFilter) || [];\n    path.remove();\n\n    siblings.forEach((sibling) => {\n        addKeyToElement(sibling);\n    });\n\n    path.stop();\n}\n\nexport function removeElementAtIndex(\n    index: number,\n    jsxElements: Array<t.JSXElement | t.JSXFragment>,\n    children: t.Node[],\n) {\n    if (index >= 0 && index < jsxElements.length) {\n        const elementToRemove = jsxElements[index];\n        const indexInChildren = children.indexOf(elementToRemove);\n\n        if (indexInChildren !== -1) {\n            children.splice(indexInChildren, 1);\n        } else {\n            console.error('Element to be removed not found in children');\n        }\n    } else {\n        console.error('Invalid element index for removal');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/transform.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/files.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/props.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/templateNode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/install.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/asset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":10,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":10,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { signIn, signOut } from '../auth';\n\nexport function listenForAuthMessages() {\n    ipcMain.handle(MainChannels.SIGN_IN, (e: Electron.IpcMainInvokeEvent, args) => {\n        signIn(args.provider);\n    });\n\n    ipcMain.handle(MainChannels.SIGN_OUT, (e: Electron.IpcMainInvokeEvent, args) => {\n        signOut();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ChatConversation, ProjectSuggestions, StreamRequestType } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { ipcMain } from 'electron';\nimport Chat from '../chat';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForChatMessages() {\n    ipcMain.handle(\n        MainChannels.SEND_CHAT_MESSAGES_STREAM,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { messages, requestType } = args as {\n                messages: CoreMessage[];\n                requestType: StreamRequestType;\n            };\n            return Chat.stream(messages, requestType);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_STOP_STREAM_REQUEST,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            return Chat.abortStream();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.GET_CONVERSATIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            return PersistentStorage.CONVERSATIONS.getCollection(projectId);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { conversation } = args as { conversation: ChatConversation };\n        return PersistentStorage.CONVERSATIONS.writeItem(conversation);\n    });\n\n    ipcMain.handle(MainChannels.DELETE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return PersistentStorage.CONVERSATIONS.deleteItem(id);\n    });\n\n    ipcMain.handle(MainChannels.GENERATE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { messages } = args as {\n            messages: CoreMessage[];\n        };\n        return Chat.generateSuggestions(messages);\n    });\n\n    ipcMain.handle(\n        MainChannels.GET_SUGGESTIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            const suggestions = PersistentStorage.SUGGESTIONS.getCollection(\n                projectId,\n            ) as ProjectSuggestions[];\n            return suggestions.flatMap((suggestion) => suggestion.suggestions);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { suggestions } = args as { suggestions: ProjectSuggestions };\n        return PersistentStorage.SUGGESTIONS.writeItem(suggestions);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/create.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":48,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateStage, SetupStage, type CreateCallback, type SetupCallback } from '@onlook/models';\nimport type { ImageMessageContext } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { mainWindow } from '..';\nimport projectCreator from '../create';\nimport { createProject } from '../create/install';\nimport { installProjectDependencies } from '../create/setup';\n\nexport function listenForCreateMessages() {\n    ipcMain.handle(MainChannels.CREATE_NEW_PROJECT, (e: Electron.IpcMainInvokeEvent, args) => {\n        const progressCallback: CreateCallback = (stage: CreateStage, message: string) => {\n            mainWindow?.webContents.send(MainChannels.CREATE_NEW_PROJECT_CALLBACK, {\n                stage,\n                message,\n            });\n        };\n\n        const { name, path } = args as { name: string; path: string };\n        return createProject(name, path, progressCallback);\n    });\n\n    ipcMain.handle(\n        MainChannels.INSTALL_PROJECT_DEPENDENCIES,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const progressCallback: SetupCallback = (stage: SetupStage, message: string) => {\n                mainWindow?.webContents.send(MainChannels.SETUP_PROJECT_CALLBACK, {\n                    stage,\n                    message,\n                });\n            };\n            const { folderPath, installCommand } = args;\n            return installProjectDependencies(folderPath, installCommand, progressCallback);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { prompt, images } = args as {\n                prompt: string;\n                images: ImageMessageContext[];\n            };\n            return projectCreator.createProject(prompt, images);\n        },\n    );\n\n    ipcMain.handle(MainChannels.CREATE_NEW_BLANK_PROJECT, (e: Electron.IpcMainInvokeEvent) => {\n        return projectCreator.createBlankProject();\n    });\n\n    ipcMain.handle(\n        MainChannels.CANCEL_CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent) => {\n            return projectCreator.cancel();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/hosting.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCustomDomains' is defined but never used.","line":7,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":44,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { PublishRequest, PublishResponse, UnpublishRequest } from '@onlook/models/hosting';\nimport { ipcMain } from 'electron';\nimport hostingManager from '../hosting';\nimport {\n    createDomainVerification,\n    getCustomDomains,\n    getOwnedDomains,\n    verifyDomain,\n} from '../hosting/domains';\n\nexport function listenForHostingMessages() {\n    ipcMain.handle(\n        MainChannels.PUBLISH_TO_DOMAIN,\n        async (_e: Electron.IpcMainInvokeEvent, args: PublishRequest): Promise<PublishResponse> => {\n            return await hostingManager.publish(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.UNPUBLISH_DOMAIN,\n        async (\n            e: Electron.IpcMainInvokeEvent,\n            args: UnpublishRequest,\n        ): Promise<PublishResponse> => {\n            const { urls } = args;\n            return await hostingManager.unpublish(urls);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_DOMAIN_VERIFICATION,\n        async (_e: Electron.IpcMainInvokeEvent, args) => {\n            const { domain } = args;\n            return await createDomainVerification(domain);\n        },\n    );\n\n    ipcMain.handle(MainChannels.VERIFY_DOMAIN, async (_e: Electron.IpcMainInvokeEvent, args) => {\n        const { domain } = args;\n        return await verifyDomain(domain);\n    });\n\n    ipcMain.handle(MainChannels.GET_OWNED_DOMAINS, async (_e: Electron.IpcMainInvokeEvent) => {\n        return await getOwnedDomains();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":41,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":41,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":61,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { WindowCommand } from '@onlook/models/projects';\nimport { BrowserWindow, ipcMain, shell } from 'electron';\nimport { mainWindow } from '..';\nimport { imageStorage } from '../storage/images';\nimport { updater } from '../update';\nimport { listenForAnalyticsMessages } from './analytics';\nimport { listenForAssetMessages } from './asset';\nimport { listenForAuthMessages } from './auth';\nimport { listenForChatMessages } from './chat';\nimport { listenForCodeMessages } from './code';\nimport { listenForCreateMessages } from './create';\nimport { listenForHostingMessages } from './hosting';\nimport { listenForPageMessages } from './page';\nimport { listenForPaymentMessages } from './payments';\nimport { listenForRunMessages } from './run';\nimport { listenForStorageMessages } from './storage';\n\nexport function listenForIpcMessages() {\n    listenForGeneralMessages();\n    listenForAnalyticsMessages();\n    listenForCodeMessages();\n    listenForStorageMessages();\n    listenForAuthMessages();\n    listenForCreateMessages();\n    listenForChatMessages();\n    listenForRunMessages();\n    listenForHostingMessages();\n    listenForPaymentMessages();\n    listenForPageMessages();\n    listenForAssetMessages();\n}\n\nexport function removeIpcListeners() {\n    Object.values(MainChannels).forEach((channel) => {\n        ipcMain.removeHandler(channel);\n    });\n}\n\nfunction listenForGeneralMessages() {\n    ipcMain.handle(MainChannels.RELOAD_APP, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return mainWindow?.reload();\n    });\n\n    ipcMain.handle(\n        MainChannels.OPEN_IN_EXPLORER,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.showItemInFolder(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.OPEN_EXTERNAL_WINDOW,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.openExternal(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.QUIT_AND_INSTALL,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return updater.quitAndInstall();\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_IMAGE, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return imageStorage.readImage(args);\n    });\n\n    ipcMain.handle(\n        MainChannels.SAVE_IMAGE,\n        (e: Electron.IpcMainInvokeEvent, args: { img: string; name: string }) => {\n            return imageStorage.writeImage(args.name, args.img);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_WINDOW_COMMAND,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            const window = BrowserWindow.getFocusedWindow();\n\n            const command = args as WindowCommand;\n            switch (command) {\n                case WindowCommand.MINIMIZE:\n                    window?.minimize();\n                    break;\n                case WindowCommand.MAXIMIZE:\n                    window?.maximize();\n                    break;\n                case WindowCommand.UNMAXIMIZE:\n                    window?.unmaximize();\n                    break;\n                case WindowCommand.CLOSE:\n                    window?.close();\n                    break;\n            }\n        },\n    );\n\n    ipcMain.handle(MainChannels.DELETE_FOLDER, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return shell.trashItem(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/payments.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":8,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":8,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":15,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":15,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { checkoutWithStripe, checkSubscription, manageSubscription } from '../payment';\n\nexport function listenForPaymentMessages() {\n    ipcMain.handle(\n        MainChannels.CREATE_STRIPE_CHECKOUT,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkoutWithStripe();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.MANAGE_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await manageSubscription();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CHECK_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkSubscription();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/run.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":37,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":37,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DetectedPortResults } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { isPortAvailable, runBunCommand } from '../bun';\nimport run from '../run';\nimport terminal from '../run/terminal';\n\nexport async function listenForRunMessages() {\n    ipcMain.handle(MainChannels.RUN_START, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.start(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.RUN_STOP, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath } = args as { id: string; folderPath: string };\n        return run.stop(id, folderPath);\n    });\n\n    ipcMain.handle(MainChannels.RUN_RESTART, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.restart(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.GET_TEMPLATE_NODE, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return run.getTemplateNode(id);\n    });\n\n    ipcMain.handle(MainChannels.GET_RUN_STATE, (_, args) => {\n        return run.state;\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_INPUT, (_, args) => {\n        const { id, data } = args as { id: string; data: string };\n        return terminal.write(id, data);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_EXECUTE_COMMAND, (_, args) => {\n        const { id, command } = args as { id: string; command: string };\n        return terminal.executeCommand(id, command);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_RESIZE, (_, args) => {\n        const { id, cols, rows } = args as { id: string; cols: number; rows: number };\n        return terminal.resize(id, cols, rows);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_GET_HISTORY, (_, args) => {\n        const { id } = args as { id: string };\n        return terminal.getHistory(id);\n    });\n\n    ipcMain.handle(MainChannels.RUN_COMMAND, async (_, args) => {\n        const { cwd, command } = args as { cwd: string; command: string };\n        return await runBunCommand(command, { cwd });\n    });\n\n    ipcMain.handle(\n        MainChannels.IS_PORT_AVAILABLE,\n        async (e: Electron.IpcMainInvokeEvent, args): Promise<DetectedPortResults> => {\n            const { port } = args as { port: number };\n            return await isPortAvailable(port);\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":9,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":20,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":47,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { AppState, UserMetadata, UserSettings } from '@onlook/models/settings';\nimport { ipcMain } from 'electron';\nimport mixpanel from '../analytics';\nimport { getRefreshedAuthTokens } from '../auth';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForStorageMessages() {\n    ipcMain.handle(MainChannels.GET_USER_SETTINGS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_SETTINGS.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_SETTINGS,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserSettings>) => {\n            PersistentStorage.USER_SETTINGS.update(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_USER_METADATA, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_METADATA.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_METADATA,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserMetadata>) => {\n            PersistentStorage.USER_METADATA.update(args);\n            mixpanel.updateUserMetadata(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_APP_STATE, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.APP_STATE.read();\n    });\n\n    ipcMain.handle(MainChannels.IS_USER_SIGNED_IN, (e: Electron.IpcMainInvokeEvent) => {\n        return getRefreshedAuthTokens();\n    });\n\n    ipcMain.handle(\n        MainChannels.REPLACE_APP_STATE,\n        (e: Electron.IpcMainInvokeEvent, args: AppState) => {\n            PersistentStorage.APP_STATE.replace(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_PROJECTS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.PROJECTS.read();\n    });\n\n    ipcMain.handle(MainChannels.UPDATE_PROJECTS, (e: Electron.IpcMainInvokeEvent, args: any) => {\n        PersistentStorage.PROJECTS.update(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/domains.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'require' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAIN_DIST' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":75,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":123,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":125,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APP_NAME, APP_SCHEMA } from '@onlook/models/constants';\nimport { BrowserWindow, app, shell } from 'electron';\nimport fixPath from 'fix-path';\nimport { createRequire } from 'node:module';\nimport os from 'node:os';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { sendAnalytics } from './analytics';\nimport { handleAuthCallback, setupAuthAutoRefresh } from './auth';\nimport { listenForIpcMessages } from './events';\nimport { updater } from './update';\n\n// Help main inherit $PATH defined in dotfiles (.bashrc/.bash_profile/.zshrc/etc).\nfixPath();\n\nexport let mainWindow: BrowserWindow | null = null;\nconst require = createRequire(import.meta.url);\nexport const __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Constants\nconst MAIN_DIST = path.join(__dirname, '../../dist-electron');\nconst RENDERER_DIST = path.join(__dirname, '../../dist');\nconst PRELOAD_PATH = path.join(__dirname, '../preload/index.js');\nconst INDEX_HTML = path.join(RENDERER_DIST, 'index.html');\nconst VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;\n\n// Environment setup\nconst setupEnvironment = () => {\n    process.env.APP_ROOT = path.join(__dirname, '../..');\n    process.env.WEBVIEW_PRELOAD_PATH = path.join(__dirname, '../preload/webview.js');\n    process.env.APP_VERSION = app.getVersion();\n    process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n        ? path.join(process.env.APP_ROOT, 'public')\n        : RENDERER_DIST;\n};\n\n// Platform-specific configurations\nconst configurePlatformSpecifics = () => {\n    if (os.release().startsWith('6.1')) {\n        app.disableHardwareAcceleration();\n    }\n\n    if (process.platform === 'win32') {\n        app.setAppUserModelId(app.getName());\n    }\n};\n\n// Protocol setup\nconst setupProtocol = () => {\n    if (process.defaultApp && process.argv.length >= 2) {\n        app.setAsDefaultProtocolClient(APP_SCHEMA, process.execPath, [\n            path.resolve(process.argv?.[1]),\n        ]);\n    } else {\n        app.setAsDefaultProtocolClient(APP_SCHEMA);\n    }\n};\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        title: APP_NAME,\n        minWidth: 800,\n        icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n        titleBarStyle: 'hiddenInset',\n        frame: false,\n        webPreferences: {\n            preload: PRELOAD_PATH,\n            webviewTag: true,\n        },\n    });\n    return mainWindow;\n};\n\nconst loadWindowContent = (win: BrowserWindow) => {\n    VITE_DEV_SERVER_URL ? win.loadURL(VITE_DEV_SERVER_URL) : win.loadFile(INDEX_HTML);\n};\n\nconst initMainWindow = () => {\n    const win = createWindow();\n    win.maximize();\n    loadWindowContent(win);\n    win.webContents.setWindowOpenHandler(({ url }) => {\n        if (url.startsWith('https:')) {\n            shell.openExternal(url);\n        }\n        return { action: 'deny' };\n    });\n\n    setupAuthAutoRefresh();\n};\n\nconst setupAppEventListeners = () => {\n    app.whenReady().then(() => {\n        initMainWindow();\n    });\n\n    app.on('ready', () => {\n        updater.listen();\n        sendAnalytics('start app');\n    });\n\n    app.on('window-all-closed', async () => {\n        if (process.platform !== 'darwin') {\n            mainWindow = null;\n            app.quit();\n        }\n    });\n\n    app.on('second-instance', (_, commandLine) => {\n        if (mainWindow) {\n            if (mainWindow.isMinimized()) {\n                mainWindow.restore();\n            }\n            mainWindow.focus();\n        }\n        const url = commandLine.find((arg) => arg.startsWith(`${APP_SCHEMA}://`));\n        if (url && process.platform !== 'darwin') {\n            handleAuthCallback(url);\n        }\n    });\n\n    app.on('activate', () => {\n        BrowserWindow.getAllWindows().length\n            ? BrowserWindow.getAllWindows()?.[0]?.focus()\n            : initMainWindow();\n    });\n\n    app.on('open-url', (event, url) => {\n        event.preventDefault();\n        handleAuthCallback(url);\n    });\n\n    app.on('quit', () => sendAnalytics('quit app'));\n};\n\n// Main function\nconst main = async () => {\n    if (!app.requestSingleInstanceLock()) {\n        app.quit();\n        process.exit(0);\n    }\n\n    setupEnvironment();\n    configurePlatformSpecifics();\n    setupProtocol();\n    setupAppEventListeners();\n    listenForIpcMessages();\n};\n\nmain();\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/delete.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":22,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from 'fs';\nimport * as path from 'path';\nimport { cleanupEmptyFolders, detectRouterType } from './helpers';\n\nexport async function deleteNextJsPage(projectRoot: string, pagePath: string, isDir: boolean) {\n    try {\n        const routerConfig = await detectRouterType(projectRoot);\n\n        if (!routerConfig) {\n            throw new Error('Could not detect Next.js router type');\n        }\n\n        if (routerConfig.type !== 'app') {\n            throw new Error('Page deletion is only supported for App Router projects for now.');\n        }\n\n        const fullPath = path.join(routerConfig.basePath, pagePath);\n\n        // Check if file/folder exists\n        let stats;\n        try {\n            stats = await fs.stat(fullPath);\n        } catch (err) {\n            if (err instanceof Error && 'code' in err && err.code === 'ENOENT') {\n                throw new Error('Selected page not found');\n            }\n            throw err;\n        }\n\n        if (isDir) {\n            await fs.rm(fullPath, { recursive: true, force: true });\n        } else {\n            const selectedFilePath = path.join(fullPath, 'page.tsx');\n            await fs.unlink(selectedFilePath);\n            await cleanupEmptyFolders(path.dirname(fullPath));\n        }\n\n        console.log(`Deleted: ${fullPath}`);\n        return true;\n    } catch (error) {\n        console.error('Error deleting page:', error);\n        throw error;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/duplicate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/rename.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/scan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/terminal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/directory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/file.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/images.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/update/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/browserview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/group.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":56,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ActionTarget, GroupContainer } from '@onlook/models/actions';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement } from '../helpers';\nimport { elementFromDomId } from '/common/helpers';\n\nexport function groupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = createContainerElement(container);\n\n    // Find child elements and their positions\n    const childrenMap = new Set(children.map((c) => c.domId));\n    const childrenWithIndices = Array.from(parentEl.children)\n        .map((child, index) => ({\n            element: child as HTMLElement,\n            index,\n            domId: getOrAssignDomId(child as HTMLElement),\n        }))\n        .filter(({ domId }) => childrenMap.has(domId));\n\n    if (childrenWithIndices.length === 0) {\n        console.warn('No valid children found to group');\n        return null;\n    }\n\n    // Insert container at the position of the first child\n    const insertIndex = Math.min(...childrenWithIndices.map((c) => c.index));\n    parentEl.insertBefore(containerEl, parentEl.children?.[insertIndex]);\n\n    // Move children into container\n    childrenWithIndices.forEach(({ element }) => {\n        const newElement = element.cloneNode(true) as HTMLElement;\n\n        newElement.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        containerEl.appendChild(newElement);\n        element.style.display = 'none';\n        removeIdsFromChildElement(element);\n    });\n\n    return getDomElement(containerEl, true);\n}\n\nexport function ungroupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = Array.from(parentEl.children).find(\n        (child) => child.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID) === container.domId,\n    ) as HTMLElement | undefined;\n    if (!containerEl) {\n        console.warn('Failed to find container element', parent.domId);\n        return null;\n    }\n\n    // Insert container children in order into parent behind container\n    Array.from(containerEl.children).forEach((child) => {\n        child.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        parentEl.insertBefore(child, containerEl);\n    });\n    containerEl.style.display = 'none';\n    return getDomElement(parentEl, true);\n}\n\nfunction createContainerElement(target: GroupContainer): HTMLElement {\n    const containerEl = document.createElement(target.tagName);\n    Object.entries(target.attributes).forEach(([key, value]) => {\n        containerEl.setAttribute(key, value);\n    });\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID, target.domId);\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_ID, target.oid);\n    return containerEl;\n}\n\nfunction removeIdsFromChildElement(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_INSERTED);\n\n    const children = Array.from(el.children);\n    if (children.length === 0) {\n        return;\n    }\n\n    children.forEach((child) => {\n        removeIdsFromChildElement(child as HTMLElement);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/image.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/remove.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/drag.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDragElement' is defined but never used.","line":116,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement, restoreElementStyle } from '../helpers';\nimport { getDisplayDirection } from './helpers';\nimport { createStub, getCurrentStubIndex, moveStub, removeStub } from './stub';\nimport { elementFromDomId, isValidHtmlElement } from '/common/helpers';\n\nexport function startDrag(domId: string): number | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn(`Start drag element not found: ${domId}`);\n        return null;\n    }\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('Start drag parent not found');\n        return null;\n    }\n    const htmlChildren = Array.from(parent.children).filter(isValidHtmlElement);\n    const originalIndex = htmlChildren.indexOf(el);\n    prepareElementForDragging(el);\n    createStub(el);\n    const pos = getAbsolutePosition(el);\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION, JSON.stringify(pos));\n    return originalIndex;\n}\n\nexport function drag(domId: string, dx: number, dy: number, x: number, y: number) {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('Dragging element not found');\n        return;\n    }\n    const styles = window.getComputedStyle(el);\n    const pos = JSON.parse(\n        el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION) || '{}',\n    );\n    const left = pos.left + dx - window.scrollX;\n    const top = pos.top + dy - window.scrollY;\n\n    el.style.left = `${left}px`;\n    el.style.top = `${top}px`;\n    el.style.width = styles.width + 1;\n    el.style.height = styles.height + 1;\n    el.style.position = 'fixed';\n\n    moveStub(el, x, y);\n}\n\nexport function endDrag(domId: string): {\n    newIndex: number;\n    child: DomElement;\n    parent: DomElement;\n} | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('End drag element not found');\n        endAllDrag();\n        return null;\n    }\n\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('End drag parent not found');\n        cleanUpElementAfterDragging(el);\n        return null;\n    }\n\n    const stubIndex = getCurrentStubIndex(parent, el);\n    cleanUpElementAfterDragging(el);\n    removeStub();\n\n    if (stubIndex === -1) {\n        return null;\n    }\n\n    const elementIndex = Array.from(parent.children).indexOf(el);\n    if (stubIndex === elementIndex) {\n        return null;\n    }\n    return {\n        newIndex: stubIndex,\n        child: getDomElement(el, false),\n        parent: getDomElement(parent, false),\n    };\n}\n\nfunction prepareElementForDragging(el: HTMLElement) {\n    const saved = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    if (saved) {\n        return;\n    }\n\n    const style = {\n        position: el.style.position,\n        transform: el.style.transform,\n        width: el.style.width,\n        height: el.style.height,\n        left: el.style.left,\n        top: el.style.top,\n    };\n\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE, JSON.stringify(style));\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING, 'true');\n\n    if (el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION) !== null) {\n        const parent = el.parentElement;\n        if (parent) {\n            const displayDirection = getDisplayDirection(parent);\n            el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION, displayDirection);\n        }\n    }\n}\n\nfunction getDragElement(): HTMLElement | undefined {\n    const el = document.querySelector(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    ) as HTMLElement | null;\n    if (!el) {\n        return;\n    }\n    return el;\n}\n\nfunction cleanUpElementAfterDragging(el: HTMLElement) {\n    restoreElementStyle(el);\n    removeDragAttributes(el);\n    getOrAssignDomId(el);\n}\n\nfunction removeDragAttributes(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION);\n}\n\nfunction getAbsolutePosition(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return {\n        left: rect.left + window.scrollX,\n        top: rect.top + window.scrollY,\n    };\n}\n\nexport function endAllDrag() {\n    const draggingElements = document.querySelectorAll(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    );\n    for (const el of draggingElements) {\n        cleanUpElementAfterDragging(el as HTMLElement);\n    }\n    removeStub();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/stub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/publish.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-plugin-unsafe-accessors/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/no-unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/UpdateButton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/WindowsControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouteManager, useUpdateManager } from '@/components/Context';\nimport { Route } from '@/lib/routes';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport UpdateButton from './UpdateButton';\nimport { WindowsControls } from './WindowsControls';\n\nconst AppBar = observer(() => {\n    const routeManager = useRouteManager();\n    const updateManager = useUpdateManager();\n\n    const className = cn(\n        'opacity-50 hover:opacity-100',\n        updateManager.updateAvailable &&\n            'hover:bg-red-800 hover:text-red-100 dark:hover:text-red-100',\n    );\n\n    return (\n        <div\n            className={cn(\n                'flex flex-row items-center pl-20 h-10 border-b bg-background dark:bg-background-active transition-colors duration-300 ease-in-out',\n                routeManager.route === Route.SIGN_IN && 'bg-transparent border-b-0',\n                updateManager.updateAvailable &&\n                    'bg-red-950 dark:bg-red-950 dark:text-red-300 text-red-300 transition-opacity duration-300 ease-in-out',\n            )}\n        >\n            <div className=\"appbar w-full h-full\"></div>\n            <div className=\"flex mr-2 gap-2\">\n                <UpdateButton />\n            </div>\n            <WindowsControls />\n        </div>\n    );\n});\n\nexport default AppBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/Context/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/dunes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/hotkeys-label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/auth/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":31,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":31,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":36,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { UserMetadata } from '@onlook/models/settings';\nimport supabase from '@onlook/supabase/clients';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class AuthManager {\n    authenticated = false;\n    userMetadata: UserMetadata | null = null;\n    isAuthEnabled = !!supabase && !!supabase.auth;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.fetchUserMetadata();\n        this.listenForAuthEvents();\n    }\n\n    async fetchUserMetadata() {\n        this.userMetadata = (await invokeMainChannel(\n            MainChannels.GET_USER_METADATA,\n        )) as UserMetadata;\n\n        const signedIn = (await invokeMainChannel(MainChannels.IS_USER_SIGNED_IN)) as boolean;\n\n        if (this.userMetadata && signedIn) {\n            this.authenticated = true;\n        }\n    }\n\n    listenForAuthEvents() {\n        window.api.on(MainChannels.USER_SIGNED_IN, async (e, args) => {\n            this.authenticated = true;\n            this.fetchUserMetadata();\n        });\n\n        window.api.on(MainChannels.USER_SIGNED_OUT, async (e, args) => {\n            this.authenticated = false;\n            this.userMetadata = null;\n        });\n    }\n\n    async signIn(provider: 'github' | 'google') {\n        await invokeMainChannel(MainChannels.SIGN_IN, { provider });\n    }\n\n    async signOut() {\n        await invokeMainChannel(MainChannels.SIGN_OUT);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/action/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/layers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/canvas/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/conversation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":78,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatMessageType, type ChatConversation } from '@onlook/models/chat';\nimport { MAX_NAME_LENGTH } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { AssistantChatMessageImpl } from '../message/assistant';\nimport { UserChatMessageImpl } from '../message/user';\n\nexport class ChatConversationImpl implements ChatConversation {\n    id: string;\n    projectId: string;\n    displayName: string | null = null;\n    messages: (UserChatMessageImpl | AssistantChatMessageImpl)[];\n    createdAt: string;\n    updatedAt: string;\n\n    constructor(projectId: string, messages: (UserChatMessageImpl | AssistantChatMessageImpl)[]) {\n        makeAutoObservable(this);\n        this.id = nanoid();\n        this.projectId = projectId;\n        this.messages = messages;\n        this.createdAt = new Date().toISOString();\n        this.updatedAt = new Date().toISOString();\n    }\n\n    getMessageById(id: string) {\n        return this.messages.find((m) => m.id === id);\n    }\n\n    static fromJSON(data: ChatConversation) {\n        const conversation = new ChatConversationImpl(data.projectId, []);\n        conversation.id = data.id;\n        conversation.displayName = data.displayName;\n        conversation.messages = data.messages.map((m) => {\n            if (m.type === ChatMessageType.USER) {\n                return UserChatMessageImpl.fromJSON(m);\n            } else {\n                return AssistantChatMessageImpl.fromJSON(m);\n            }\n        });\n        conversation.createdAt = data.createdAt;\n        conversation.updatedAt = data.updatedAt;\n        return conversation;\n    }\n\n    getMessagesForStream(): CoreMessage[] {\n        return this.messages.map((m) => m.toCoreMessage());\n    }\n\n    appendMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        this.messages = [...this.messages, message];\n        this.updatedAt = new Date().toISOString();\n    }\n\n    removeAllMessagesAfter(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages = this.messages.slice(0, index + 1);\n        this.updatedAt = new Date().toISOString();\n    }\n\n    updateName(name: string, override = false) {\n        if (override || !this.displayName) {\n            this.displayName = name.slice(0, MAX_NAME_LENGTH);\n        }\n    }\n\n    getLastUserMessage() {\n        return this.messages.findLast((message) => message.type === ChatMessageType.USER);\n    }\n\n    updateMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages?.[index] = message;\n        this.updatedAt = new Date().toISOString();\n        this.messages = [...this.messages];\n    }\n\n    updateCodeReverted(id: string) {\n        this.messages = [...this.messages];\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/assistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/stream.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/copy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/element/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/error/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/group/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/history/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/image/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":279,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorMode, EditorTabValue, SettingsTabValue } from '@/lib/models';\nimport type { ProjectsManager } from '@/lib/projects';\nimport type { UserManager } from '@/lib/user';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport type { NativeImage } from 'electron';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { ActionManager } from './action';\nimport { AstManager } from './ast';\nimport { CanvasManager } from './canvas';\nimport { ChatManager } from './chat';\nimport { CodeManager } from './code';\nimport { CopyManager } from './copy';\nimport { ElementManager } from './element';\nimport { ErrorManager } from './error';\nimport { GroupManager } from './group';\nimport { HistoryManager } from './history';\nimport { ImageManager } from './image';\nimport { InsertManager } from './insert';\nimport { MoveManager } from './move';\nimport { OverlayManager } from './overlay';\nimport { PagesManager } from './pages';\nimport { ProjectInfoManager } from './projectinfo';\nimport { StyleManager } from './style';\nimport { TextEditingManager } from './text';\nimport { WebviewManager } from './webview';\n\nexport class EditorEngine {\n    private _editorMode: EditorMode = EditorMode.DESIGN;\n    private _plansOpen: boolean = false;\n    private _settingsOpen: boolean = false;\n    private _hotkeysOpen: boolean = false;\n    private _editorPanelTab: EditorTabValue = EditorTabValue.CHAT;\n    private _settingsTab: SettingsTabValue = SettingsTabValue.DOMAIN;\n\n    private canvasManager: CanvasManager;\n    private chatManager: ChatManager;\n    private webviewManager: WebviewManager;\n    private overlayManager: OverlayManager;\n    private codeManager: CodeManager;\n    private pagesManager: PagesManager;\n    private errorManager: ErrorManager;\n    private imageManager: ImageManager;\n\n    private astManager: AstManager = new AstManager(this);\n    private historyManager: HistoryManager = new HistoryManager(this);\n    private projectInfoManager: ProjectInfoManager = new ProjectInfoManager();\n    private elementManager: ElementManager = new ElementManager(this);\n    private textEditingManager: TextEditingManager = new TextEditingManager(this);\n    private actionManager: ActionManager = new ActionManager(this);\n    private insertManager: InsertManager = new InsertManager(this);\n    private moveManager: MoveManager = new MoveManager(this);\n    private styleManager: StyleManager = new StyleManager(this);\n    private copyManager: CopyManager = new CopyManager(this);\n    private groupManager: GroupManager = new GroupManager(this);\n\n    constructor(\n        private projectsManager: ProjectsManager,\n        private userManager: UserManager,\n    ) {\n        makeAutoObservable(this);\n        this.canvasManager = new CanvasManager(this.projectsManager);\n        this.chatManager = new ChatManager(this, this.projectsManager, this.userManager);\n        this.webviewManager = new WebviewManager(this, this.projectsManager);\n        this.overlayManager = new OverlayManager(this);\n        this.codeManager = new CodeManager(this, this.projectsManager);\n        this.pagesManager = new PagesManager(this, this.projectsManager);\n        this.errorManager = new ErrorManager(this, this.projectsManager);\n        this.imageManager = new ImageManager(this, this.projectsManager);\n    }\n\n    get elements() {\n        return this.elementManager;\n    }\n    get overlay() {\n        return this.overlayManager;\n    }\n    get webviews() {\n        return this.webviewManager;\n    }\n    get code() {\n        return this.codeManager;\n    }\n    get history() {\n        return this.historyManager;\n    }\n    get ast() {\n        return this.astManager;\n    }\n    get action() {\n        return this.actionManager;\n    }\n    get mode() {\n        return this._editorMode;\n    }\n    get insert() {\n        return this.insertManager;\n    }\n    get move() {\n        return this.moveManager;\n    }\n    get projectInfo() {\n        return this.projectInfoManager;\n    }\n    get style() {\n        return this.styleManager;\n    }\n    get canvas() {\n        return this.canvasManager;\n    }\n    get text() {\n        return this.textEditingManager;\n    }\n    get copy() {\n        return this.copyManager;\n    }\n    get group() {\n        return this.groupManager;\n    }\n    get chat() {\n        return this.chatManager;\n    }\n    get image() {\n        return this.imageManager;\n    }\n    get editPanelTab() {\n        return this._editorPanelTab;\n    }\n    get settingsTab() {\n        return this._settingsTab;\n    }\n    get isPlansOpen() {\n        return this._plansOpen;\n    }\n    get isSettingsOpen() {\n        return this._settingsOpen;\n    }\n    get isHotkeysOpen() {\n        return this._hotkeysOpen;\n    }\n    get errors() {\n        return this.errorManager;\n    }\n    get isWindowSelected() {\n        return this.webviews.selected.length > 0 && this.elements.selected.length === 0;\n    }\n\n    set mode(mode: EditorMode) {\n        this._editorMode = mode;\n    }\n\n    set editPanelTab(tab: EditorTabValue) {\n        this._editorPanelTab = tab;\n    }\n\n    set settingsTab(tab: SettingsTabValue) {\n        this._settingsTab = tab;\n    }\n\n    set isPlansOpen(open: boolean) {\n        this._plansOpen = open;\n        if (open) {\n            sendAnalytics('open pro checkout');\n        }\n    }\n\n    set isSettingsOpen(open: boolean) {\n        this._settingsOpen = open;\n    }\n\n    set isHotkeysOpen(value: boolean) {\n        this._hotkeysOpen = value;\n    }\n\n    get pages() {\n        return this.pagesManager;\n    }\n\n    dispose() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deregisterAll();\n        this.errors.clear();\n        this.chatManager?.dispose();\n        this.historyManager?.clear();\n        this.elementManager?.clear();\n        this.actionManager?.dispose();\n        this.overlayManager?.clear();\n        this.astManager?.clear();\n        this.textEditingManager?.clean();\n        this.codeManager?.dispose();\n        this.insertManager?.dispose();\n        this.moveManager?.dispose();\n        this.styleManager?.dispose();\n        this.copyManager?.dispose();\n        this.groupManager?.dispose();\n        this.canvasManager?.clear();\n        this.imageManager?.dispose();\n        this._settingsOpen = false;\n        this._plansOpen = false;\n    }\n\n    clearUI() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deselectAll();\n    }\n\n    inspect() {\n        const selected = this.elements.selected;\n        if (selected.length === 0) {\n            return;\n        }\n        const selectedEl = selected[0];\n        const webviewId = selectedEl.webviewId;\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            return;\n        }\n        webview.openDevTools();\n    }\n\n    async refreshLayers() {\n        const webviews = this.webviews.webviews;\n        if (webviews.size === 0) {\n            return;\n        }\n        const webview = Array.from(webviews.values())?.[0]?.webview;\n        webview.executeJavaScript('window.api?.processDom()');\n    }\n\n    async takeActiveWebviewScreenshot(\n        name: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        if (this.webviews.webviews.size === 0) {\n            console.error('No webviews found');\n            return null;\n        }\n        const webviewId = Array.from(this.webviews.webviews.values())?.[0]?.webview.id;\n        return this.takeWebviewScreenshot(name, webviewId, options);\n    }\n\n    async takeWebviewScreenshot(\n        name: string,\n        webviewId: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            console.error('No webview found');\n            return null;\n        }\n\n        const hasContent = await webview.executeJavaScript(\n            `document.body.innerText.trim().length > 0 || document.body.children.length > 0 `,\n        );\n        if (!hasContent) {\n            console.error('No content found in webview');\n            return null;\n        }\n\n        const image: NativeImage = await webview.capturePage();\n\n        if (options?.save) {\n            const imageName = `${name}-preview.png`;\n            const path: string | null = await invokeMainChannel(MainChannels.SAVE_IMAGE, {\n                img: image.toDataURL(),\n                name: imageName,\n            });\n            return {\n                name: imageName,\n            };\n        }\n        return {\n            image: image.resize({ quality: 'good', height: 100 }).toDataURL({\n                scaleFactor: 0.1,\n            }),\n        };\n    }\n\n    canDeleteWindow() {\n        return this.canvas.frames.length > 1;\n    }\n\n    deleteWindow(id?: string) {\n        if (this.canvas.frames.length === 1) {\n            console.error('Cannot delete the last window');\n            return;\n        }\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n            if (!settings) {\n                console.error('Window not found');\n                return;\n            }\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        this.ast.mappings.remove(settings.id);\n        this.canvas.frames = this.canvas.frames.filter((frame) => frame.id !== settings.id);\n        const webview = this.webviews.getWebview(settings.id);\n        if (webview) {\n            this.webviews.deregister(webview);\n        }\n        sendAnalytics('window delete');\n    }\n\n    duplicateWindow(id?: string) {\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        const currentFrame = settings;\n        const newFrame: FrameSettings = {\n            id: nanoid(),\n            url: currentFrame.url,\n            dimension: {\n                width: currentFrame.dimension.width,\n                height: currentFrame.dimension.height,\n            },\n            position: {\n                x: currentFrame.position.x + currentFrame.dimension.width + 100,\n                y: currentFrame.position.y,\n            },\n            aspectRatioLocked: currentFrame.aspectRatioLocked,\n            orientation: currentFrame.orientation,\n            device: currentFrame.device,\n            theme: currentFrame.theme,\n        };\n\n        this.canvas.frames = [...this.canvas.frames, newFrame];\n        sendAnalytics('window duplicate');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/insert/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/move/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":100,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { MoveElementAction } from '@onlook/models/actions';\nimport type { DomElement, ElementPosition } from '@onlook/models/element';\nimport type React from 'react';\nimport type { EditorEngine } from '..';\n\nexport class MoveManager {\n    dragOrigin: ElementPosition | undefined;\n    dragTarget: DomElement | undefined;\n    originalIndex: number | undefined;\n    MIN_DRAG_DISTANCE = 5;\n    isDraggingAbsolute = false;\n\n    constructor(private editorEngine: EditorEngine) {}\n\n    get isDragging() {\n        return !!this.dragOrigin;\n    }\n\n    async start(el: DomElement, position: ElementPosition, webview: Electron.WebviewTag) {\n        if (this.editorEngine.chat.isWaiting) {\n            return;\n        }\n        if (!this.editorEngine.elements.selected.some((selected) => selected.domId === el.domId)) {\n            console.warn('Element not selected, cannot start drag');\n            return;\n        }\n\n        this.dragOrigin = position;\n        this.dragTarget = el;\n        if (el.styles?.computed?.position === 'absolute') {\n            this.isDraggingAbsolute = true;\n            this.editorEngine.history.startTransaction();\n            return;\n        } else {\n            this.originalIndex = await webview.executeJavaScript(\n                `window.api?.startDrag('${el.domId}')`,\n            );\n        }\n\n        if (this.originalIndex === null || this.originalIndex === -1) {\n            this.clear();\n            console.warn('Start drag failed, original index is null or -1');\n            return;\n        }\n    }\n\n    drag(\n        e: React.MouseEvent<HTMLDivElement>,\n        getRelativeMousePositionToWebview: (e: React.MouseEvent<HTMLDivElement>) => ElementPosition,\n    ) {\n        if (!this.dragOrigin || !this.dragTarget) {\n            console.error('Cannot drag without drag origin or target');\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag');\n            return;\n        }\n\n        const { x, y } = getRelativeMousePositionToWebview(e);\n        const dx = x - this.dragOrigin.x;\n        const dy = y - this.dragOrigin.y;\n\n        if (this.isDraggingAbsolute) {\n            this.handleDragAbsolute(this.dragOrigin, this.dragTarget, x, y);\n            return;\n        }\n\n        if (Math.max(Math.abs(dx), Math.abs(dy)) > this.MIN_DRAG_DISTANCE) {\n            this.editorEngine.overlay.clear();\n            webview.executeJavaScript(\n                `window.api?.drag('${this.dragTarget.domId}', ${dx}, ${dy}, ${x}, ${y})`,\n            );\n        }\n    }\n\n    handleDragAbsolute(dragOrigin: ElementPosition, dragTarget: DomElement, x: number, y: number) {\n        const initialOffset = {\n            x: dragOrigin.x - dragTarget.rect.x,\n            y: dragOrigin.y - dragTarget.rect.y,\n        };\n\n        const parentRect = dragTarget.parent?.rect;\n        if (!parentRect) {\n            return;\n        }\n\n        const newX = Math.round(x - parentRect.x - initialOffset.x);\n        const newY = Math.round(y - parentRect.y - initialOffset.y);\n\n        this.editorEngine.overlay.clear();\n        this.editorEngine.style.updateMultiple({\n            left: `${newX}px`,\n            top: `${newY}px`,\n        });\n    }\n\n    async end(e: React.MouseEvent<HTMLDivElement>) {\n        if (this.isDraggingAbsolute) {\n            this.editorEngine.history.commitTransaction();\n            this.isDraggingAbsolute = false;\n            this.clear();\n        }\n\n        if (this.originalIndex === undefined || !this.dragTarget) {\n            this.clear();\n            this.endAllDrag();\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag end');\n            this.endAllDrag();\n            return;\n        }\n\n        const res: {\n            newIndex: number;\n            child: DomElement;\n            parent: DomElement;\n        } | null = await webview.executeJavaScript(\n            `window.api?.endDrag('${this.dragTarget.domId}')`,\n        );\n\n        if (res) {\n            const { child, parent, newIndex } = res;\n            if (newIndex !== this.originalIndex) {\n                const moveAction = this.createMoveAction(\n                    webview.id,\n                    child,\n                    parent,\n                    newIndex,\n                    this.originalIndex,\n                );\n                this.editorEngine.action.run(moveAction);\n            }\n        }\n        this.clear();\n    }\n\n    endAllDrag() {\n        this.editorEngine.webviews.webviews.forEach((webview) => {\n            webview.webview.executeJavaScript(`window.api?.endAllDrag()`);\n        });\n    }\n\n    moveSelected(direction: 'up' | 'down') {\n        const selected = this.editorEngine.elements.selected;\n        if (selected.length === 1) {\n            this.shiftElement(selected[0], direction);\n        } else {\n            if (selected.length > 1) {\n                console.error('Multiple elements selected, cannot shift');\n            } else {\n                console.error('No elements selected, cannot shift');\n            }\n        }\n    }\n\n    async shiftElement(element: DomElement, direction: 'up' | 'down'): Promise<void> {\n        const webview = this.editorEngine.webviews.getWebview(element.webviewId);\n        if (!webview) {\n            return;\n        }\n\n        // Get current index and parent\n        const currentIndex = await webview.executeJavaScript(\n            `window.api?.getElementIndex('${element.domId}')`,\n        );\n\n        if (currentIndex === -1) {\n            return;\n        }\n\n        const parent: DomElement | null = await webview.executeJavaScript(\n            `window.api?.getParentElement('${element.domId}')`,\n        );\n        if (!parent) {\n            return;\n        }\n\n        // Get filtered children count for accurate index calculation\n        const childrenCount = await webview.executeJavaScript(\n            `window.api?.getChildrenCount('${parent.domId}')`,\n        );\n\n        // Calculate new index based on direction and bounds\n        const newIndex =\n            direction === 'up'\n                ? Math.max(0, currentIndex - 1)\n                : Math.min(childrenCount - 1, currentIndex + 1);\n\n        if (newIndex === currentIndex) {\n            return;\n        }\n\n        // Create and run move action\n        const moveAction = this.createMoveAction(\n            webview.id,\n            element,\n            parent,\n            newIndex,\n            currentIndex,\n        );\n\n        this.editorEngine.action.run(moveAction);\n    }\n\n    createMoveAction(\n        webviewId: string,\n        child: DomElement,\n        parent: DomElement,\n        newIndex: number,\n        originalIndex: number,\n    ): MoveElementAction {\n        return {\n            type: 'move-element',\n            location: {\n                type: 'index',\n                targetDomId: parent.domId,\n                targetOid: parent.instanceId || parent.oid,\n                index: newIndex,\n                originalIndex: originalIndex,\n            },\n            targets: [\n                {\n                    webviewId,\n                    domId: child.domId,\n                    oid: child.instanceId || child.oid,\n                },\n            ],\n        };\n    }\n\n    clear() {\n        this.originalIndex = undefined;\n        this.dragOrigin = undefined;\n        this.dragTarget = undefined;\n    }\n\n    dispose() {\n        // Clear state\n        this.clear();\n\n        // Clear references\n        this.editorEngine = null as any;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/prosemirror/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/rect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/projectinfo/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/text/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/token/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/eventHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/messageBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/autolayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/numberUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/tag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/units.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/hosting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/port.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/run.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/routes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/sizePresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/update/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":14,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":14,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":18,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":18,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class UpdateManager {\n    updateAvailable = false;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.listen();\n    }\n\n    listen() {\n        window.api.on(MainChannels.UPDATE_DOWNLOADED, async (e, args) => {\n            this.updateAvailable = true;\n        });\n\n        window.api.on(MainChannels.UPDATE_NOT_AVAILABLE, async (e, args) => {\n            this.updateAvailable = false;\n        });\n    }\n\n    quitAndInstall() {\n        invokeMainChannel(MainChannels.QUIT_AND_INSTALL);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/Delete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":35,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":35,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { ReactNode } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport DeleteKey from './Delete';\nimport { Hotkey } from '/common/hotkeys';\n\nconst HotkeysArea = ({ children }: { children: ReactNode }) => {\n    const editorEngine = useEditorEngine();\n\n    // Zoom\n    useHotkeys(\n        'mod+0',\n        () => {\n            editorEngine.canvas.scale = DefaultSettings.SCALE;\n            editorEngine.canvas.position = {\n                x: DefaultSettings.PAN_POSITION.x,\n                y: DefaultSettings.PAN_POSITION.y,\n            };\n        },\n        { preventDefault: true },\n    );\n    useHotkeys('mod+equal', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 1.2), {\n        preventDefault: true,\n    });\n    useHotkeys('mod+minus', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 0.8), {\n        preventDefault: true,\n    });\n\n    // Modes\n    useHotkeys(Hotkey.SELECT.command, () => (editorEngine.mode = EditorMode.DESIGN));\n    useHotkeys(Hotkey.ESCAPE.command, () => {\n        editorEngine.mode = EditorMode.DESIGN;\n        !editorEngine.text.isEditing && editorEngine.clearUI();\n    });\n    useHotkeys(Hotkey.PAN.command, () => (editorEngine.mode = EditorMode.PAN));\n    useHotkeys(Hotkey.INTERACT.command, () => (editorEngine.mode = EditorMode.INTERACT));\n    useHotkeys(Hotkey.INSERT_DIV.command, () => (editorEngine.mode = EditorMode.INSERT_DIV));\n    useHotkeys(Hotkey.INSERT_TEXT.command, () => (editorEngine.mode = EditorMode.INSERT_TEXT));\n\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.PAN), { keydown: true });\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.DESIGN), { keyup: true });\n\n    useHotkeys('alt', () => editorEngine.elements.showMeasurement(), { keydown: true });\n    useHotkeys('alt', () => editorEngine.overlay.removeMeasurement(), { keyup: true });\n\n    // Actions\n    useHotkeys(Hotkey.UNDO.command, () => editorEngine.action.undo());\n    useHotkeys(Hotkey.REDO.command, () => editorEngine.action.redo());\n    useHotkeys(Hotkey.ENTER.command, () => editorEngine.text.editSelectedElement());\n    useHotkeys(Hotkey.REFRESH_LAYERS.command, () => editorEngine.refreshLayers());\n    useHotkeys(Hotkey.OPEN_DEV_TOOL.command, () => editorEngine.inspect());\n\n    // Group\n    useHotkeys(Hotkey.GROUP.command, () => editorEngine.group.groupSelectedElements());\n    useHotkeys(Hotkey.UNGROUP.command, () => editorEngine.group.ungroupSelectedElement());\n\n    // Copy\n    useHotkeys(Hotkey.COPY.command, () => editorEngine.copy.copy());\n    useHotkeys(Hotkey.PASTE.command, () => editorEngine.copy.paste());\n    useHotkeys(Hotkey.CUT.command, () => editorEngine.copy.cut());\n    useHotkeys(Hotkey.DUPLICATE.command, () => {\n        if (editorEngine.isWindowSelected) {\n            editorEngine.duplicateWindow();\n        } else {\n            editorEngine.copy.duplicate();\n        }\n    });\n\n    // AI\n    useHotkeys(Hotkey.ADD_AI_CHAT.command, () => (editorEngine.editPanelTab = EditorTabValue.CHAT));\n    useHotkeys(Hotkey.NEW_AI_CHAT.command, () => {\n        editorEngine.editPanelTab = EditorTabValue.CHAT;\n        editorEngine.chat.conversation.startNewConversation();\n    });\n\n    // Move\n    useHotkeys(Hotkey.MOVE_LAYER_UP.command, () => editorEngine.move.moveSelected('up'));\n    useHotkeys(Hotkey.MOVE_LAYER_DOWN.command, () => editorEngine.move.moveSelected('down'));\n\n    useHotkeys(Hotkey.SHOW_HOTKEYS.command, () => {\n        editorEngine.isHotkeysOpen = !editorEngine.isHotkeysOpen;\n    });\n\n    return (\n        <>\n            <DeleteKey />\n            {children}\n        </>\n    );\n};\n\nexport default HotkeysArea;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/BaseRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getOffsets' is assigned a value but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":231,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { ClickRectState } from '@/lib/editor/engine/overlay/state';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\nconst SPACING = {\n    base: 8,\n    padding: 16,\n};\n\nconst DIMENSIONS = {\n    singleLineHeight: 32,\n    minInputWidth: 280,\n    buttonHeight: 36, // Standard button height\n    multiLineRows: 4,\n    minCharsToSubmit: 4,\n};\n\nconst ANIMATION = {\n    DISTANCE_THRESHOLD: 300, // pixels - adjust this value as needed\n    TRANSITION_DURATION: 100, // ms\n};\n\nconst getOffsets = (isMultiline: boolean) => {\n    const chatButtonHeight = DIMENSIONS.buttonHeight + SPACING.padding;\n    const inputHeight = isMultiline\n        ? DIMENSIONS.singleLineHeight * (DIMENSIONS.multiLineRows - 1) + SPACING.padding\n        : DIMENSIONS.singleLineHeight + SPACING.padding;\n\n    return {\n        chatButton: chatButtonHeight,\n        input: chatButtonHeight + inputHeight,\n    };\n};\n\nconst DEFAULT_INPUT_STATE = {\n    value: '',\n    isVisible: false,\n    isMultiline: false,\n    isSubmitting: false,\n};\n\nexport const OverlayChat = observer(\n    ({ selectedEl, elementId }: { selectedEl: ClickRectState | null; elementId: string }) => {\n        const editorEngine = useEditorEngine();\n        const isInteractMode = editorEngine.mode === EditorMode.INTERACT;\n        const [inputState, setInputState] = useState(DEFAULT_INPUT_STATE);\n        const [isComposing, setIsComposing] = useState(false);\n        const textareaRef = useRef<HTMLTextAreaElement>(null);\n        const prevChatPositionRef = useRef<{ x: number; y: number } | null>(null);\n\n        // Add effect to reset input state when elementId changes\n        useEffect(() => {\n            setInputState(DEFAULT_INPUT_STATE);\n        }, [elementId]);\n\n        // Get current chat position\n        const chatPosition = {\n            x: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().left ?? 0)\n                : 0,\n            y: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().bottom ?? 0)\n                : 0,\n        };\n\n        // Calculate distance from previous chat position\n        const distance = prevChatPositionRef.current\n            ? Math.sqrt(\n                  Math.pow(chatPosition.x - prevChatPositionRef.current.x, 2) +\n                      Math.pow(chatPosition.y - prevChatPositionRef.current.y, 2),\n              )\n            : 0;\n\n        useEffect(() => {\n            prevChatPositionRef.current = chatPosition;\n        }, [chatPosition.x, chatPosition.y]);\n\n        const animationClass =\n            distance > ANIMATION.DISTANCE_THRESHOLD\n                ? 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200'\n                : 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200';\n\n        useEffect(() => {\n            if (elementId) {\n                requestAnimationFrame(() => {\n                    const element = document.querySelector(`[data-element-id=\"${elementId}\"]`);\n                    if (element) {\n                        element.classList.remove('scale-[0.2]', 'opacity-0', '-translate-y-2');\n                        element.classList.add('scale-100', 'opacity-100', 'translate-y-0');\n                    }\n                });\n            }\n        }, [elementId]);\n\n        if (\n            !selectedEl ||\n            isInteractMode ||\n            editorEngine.chat.isWaiting ||\n            editorEngine.chat.streamingMessage\n        ) {\n            return null;\n        }\n\n        const handleSubmit = async () => {\n            const messageToSend = inputState.value;\n            editorEngine.editPanelTab = EditorTabValue.CHAT;\n            await editorEngine.chat.sendNewMessage(messageToSend);\n            setInputState(DEFAULT_INPUT_STATE);\n        };\n\n        const containerStyle: React.CSSProperties = {\n            position: 'fixed',\n            top: selectedEl.top - 8,\n            left: selectedEl.left + selectedEl.width / 2,\n            transform: 'translate(-50%, 0)',\n            transformOrigin: 'center center',\n            pointerEvents: 'auto',\n            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n        };\n\n        return (\n            <div\n                style={containerStyle}\n                onClick={(e) => e.stopPropagation()}\n                className={animationClass}\n                data-element-id={elementId}\n            >\n                <div\n                    className={cn(\n                        'rounded-xl backdrop-blur-lg transition-all duration-300',\n                        'shadow-xl shadow-background-secondary/50',\n                        inputState.isVisible\n                            ? 'bg-background/80 border shadow-xl shadow-background-secondary/50 p-1'\n                            : 'bg-background-secondary/85 dark:bg-background/85 border-foreground-secondary/20 hover:border-foreground-secondary/50 p-0.5',\n                        'border flex relative',\n                    )}\n                >\n                    {!inputState.isVisible ? (\n                        // Chat Button\n                        <button\n                            onClick={() => setInputState((prev) => ({ ...prev, isVisible: true }))}\n                            className=\"rounded-lg hover:text-foreground-primary transition-colors px-2.5 py-1.5 flex flex-row items-center gap-2 w-full\"\n                        >\n                            <Icons.Sparkles className=\"w-4 h-4\" />\n                            <span className=\"text-miniPlus whitespace-nowrap\">Chat with AI</span>\n                        </button>\n                    ) : (\n                        // Input Field\n                        <div className=\"flex flex-row items-top gap-1 w-full min-w-[280px] relative\">\n                            <Button\n                                size=\"icon\"\n                                onClick={() =>\n                                    setInputState((prev) => ({\n                                        ...prev,\n                                        isVisible: false,\n                                        value: '',\n                                    }))\n                                }\n                                className={cn(\n                                    'group h-6 w-6 absolute left-1 top-1 z-10 border-none shadow-none bg-transparent hover:bg-transparent',\n                                    'transition-all duration-200',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'opacity-0 -translate-x-2 scale-75 pointer-events-none'\n                                        : 'opacity-100 translate-x-0 scale-100 pointer-events-auto',\n                                )}\n                                disabled={inputState.isSubmitting}\n                            >\n                                <Icons.CrossS className=\"h-4 w-4 text-foreground-secondary group-hover:text-foreground transition-colors\" />\n                            </Button>\n                            <Textarea\n                                aria-label=\"Chat message input\"\n                                ref={textareaRef}\n                                className={cn(\n                                    'w-full text-xs break-words p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px] rounded-lg',\n                                    'transition-all duration-150 ease-in-out',\n                                    'pr-10 backdrop-blur-lg',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'pl-2'\n                                        : 'pl-8',\n                                    'bg-background-secondary/75 text-foreground-primary border-background-secondary/75',\n                                    'max-h-[80px] caret-[#FA003C]',\n                                    'selection:bg-[#FA003C]/30 selection:text-[#FA003C]',\n                                )}\n                                value={inputState.value}\n                                onChange={(e) => {\n                                    setInputState((prev) => ({ ...prev, value: e.target.value }));\n                                    if (textareaRef.current) {\n                                        textareaRef.current.style.height = 'auto';\n                                        const maxHeight = DIMENSIONS.singleLineHeight * 4;\n                                        textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, maxHeight)}px`;\n                                        textareaRef.current.scrollTop =\n                                            textareaRef.current.scrollHeight;\n                                    }\n                                }}\n                                placeholder=\"Type your message...\"\n                                style={{\n                                    resize: 'none',\n                                    minHeight: DIMENSIONS.singleLineHeight,\n                                    height: 'auto',\n                                    overflowY: 'auto',\n                                    overflowX: 'hidden',\n                                    overscrollBehavior: 'contain',\n                                    lineHeight: '1.5',\n                                }}\n                                rows={1}\n                                autoFocus\n                                disabled={inputState.isSubmitting}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n                                        e.preventDefault();\n                                        const charCount = inputState.value.trim().length;\n                                        if (charCount >= DIMENSIONS.minCharsToSubmit) {\n                                            handleSubmit();\n                                        }\n                                    } else if (e.key === 'Escape') {\n                                        e.preventDefault();\n                                        setInputState((prev) => ({\n                                            ...prev,\n                                            isVisible: false,\n                                            value: '',\n                                        }));\n                                    }\n                                }}\n                                onCompositionStart={() => setIsComposing(true)}\n                                onCompositionEnd={(e) => {\n                                    setIsComposing(false);\n                                }}\n                            />\n                            {inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit && (\n                                <Button\n                                    size=\"icon\"\n                                    variant=\"secondary\"\n                                    onClick={handleSubmit}\n                                    className={cn(\n                                        'absolute right-0.5 bottom-0.5 h-7 w-7',\n                                        'bg-foreground-primary text-white hover:bg-foreground-hover',\n                                    )}\n                                    disabled={inputState.isSubmitting}\n                                >\n                                    <Icons.ArrowRight className=\"h-4 w-4 text-background\" />\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ClickRect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shouldShowResizeHandles' is defined but never used.","line":103,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'renderDimensionLabels' is assigned a value but never used.","line":301,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RectDimensions } from '@/lib/editor/engine/overlay/rect';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport { nanoid } from 'nanoid';\nimport { BaseRect } from './BaseRect';\n\nconst parseCssBoxValues = (\n    value: string,\n): {\n    adjusted: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n    original: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n} => {\n    const originalValues = value.split(' ').map((v) => parseInt(v));\n    const adjustedValues = originalValues.map((v) => Math.round(adaptValueToCanvas(v)));\n\n    let original = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    let adjusted = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n\n    switch (originalValues.length) {\n        case 1:\n            original = {\n                top: originalValues[0],\n                right: originalValues[0],\n                bottom: originalValues[0],\n                left: originalValues[0],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[0],\n                bottom: adjustedValues[0],\n                left: adjustedValues[0],\n            };\n            break;\n        case 2:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[0],\n                left: originalValues[1],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[0],\n                left: adjustedValues[1],\n            };\n            break;\n        case 4:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[2],\n                left: originalValues[3],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[2],\n                left: adjustedValues[3],\n            };\n            break;\n        default:\n            original = { top: 0, right: 0, bottom: 0, left: 0 };\n            adjusted = { top: 0, right: 0, bottom: 0, left: 0 };\n            break;\n    }\n    return { adjusted, original };\n};\n\ninterface ClickRectProps extends RectDimensions {\n    isComponent?: boolean;\n    styles: Record<string, string>;\n    shouldShowResizeHandles: boolean;\n}\n\nexport const ClickRect = ({\n    width,\n    height,\n    top,\n    left,\n    isComponent,\n    styles,\n    shouldShowResizeHandles,\n}: ClickRectProps) => {\n    const renderMarginLabels = () => {\n        if (!styles?.margin) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.margin);\n\n        const patternId = `margin-pattern-${nanoid()}`;\n        const maskId = `margin-mask-${nanoid()}`;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.blue?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.blue?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect\n                            x={-adjusted.left}\n                            y={-adjusted.top}\n                            width={width + adjusted.left + adjusted.right}\n                            height={height + adjusted.top + adjusted.bottom}\n                            fill=\"white\"\n                        />\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" />\n                    </mask>\n                </defs>\n                <rect\n                    x={-adjusted.left}\n                    y={-adjusted.top}\n                    width={width + adjusted.left + adjusted.right}\n                    height={height + adjusted.top + adjusted.bottom}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing margin labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={-adjusted.top / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height + adjusted.bottom / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={-adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width + adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderPaddingLabels = () => {\n        if (!styles?.padding) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.padding);\n\n        const patternId = `padding-pattern-${nanoid()}`;\n        const maskId = `padding-mask-${nanoid()}`;\n        const pWidth = width - adjusted.left - adjusted.right;\n        const pHeight = height - adjusted.top - adjusted.bottom;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.green?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.green?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\" />\n                        <rect\n                            x={adjusted.left}\n                            y={adjusted.top}\n                            width={pWidth}\n                            height={pHeight}\n                            fill=\"black\"\n                        />\n                    </mask>\n                </defs>\n                <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width={width}\n                    height={height}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing padding labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={adjusted.top / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height - adjusted.bottom / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width - adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderDimensionLabels = () => {\n        const rectColor = isComponent ? colors.purple?.[500] : colors.red?.[500];\n        const displayWidth = parseFloat(styles?.width || '0').toFixed(0);\n        const displayHeight = parseFloat(styles?.height || '0').toFixed(0);\n        const text = `${displayWidth} Ã— ${displayHeight}`;\n\n        // Constants from showDimensions\n        const padding = { top: 2, bottom: 2, left: 4, right: 4 };\n        const radius = 2;\n\n        // Assuming text width is roughly 80px and height is 16px (you may want to measure this dynamically)\n        const rectWidth = 80 + padding.left + padding.right;\n        const rectHeight = 16 + padding.top + padding.bottom;\n        const rectX = (width - rectWidth) / 2;\n        const rectY = height;\n\n        // Path for rounded rectangle\n        const path =\n            rectWidth > width\n                ? `M${rectX + radius},${rectY} q-${radius},0 -${radius},${radius} v${rectHeight - 2 * radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - 2 * radius} q0,-${radius} -${radius},-${radius} z`\n                : `M${rectX},${rectY} v${rectHeight - radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - radius} z`;\n\n        return (\n            <g>\n                <path d={path} fill={rectColor} />\n                <text\n                    x={width / 2}\n                    y={rectY + rectHeight / 2}\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                >\n                    {text}\n                </text>\n            </g>\n        );\n    };\n\n    return (\n        <BaseRect\n            width={width}\n            height={height}\n            top={top}\n            left={left}\n            isComponent={isComponent}\n            strokeWidth={2}\n        >\n            {renderMarginLabels()}\n            {renderPaddingLabels()}\n            {/* {renderDimensionLabels()} */}\n            {/* {shouldShowResizeHandles && (\n                <ResizeHandles\n                    width={width}\n                    height={height}\n                    left={left}\n                    top={top}\n                    borderRadius={parseInt(styles?.['borderRadius'] || '0')}\n                    isComponent={isComponent}\n                    styles={styles}\n                />\n            )} */}\n        </BaseRect>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/HoverRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/InsertRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/MeasurementOverlay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditorAttributes' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { colors } from '@onlook/ui/tokens';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { RectDimensions } from '../../../../lib/editor/engine/overlay/rect';\nimport React, { memo, useMemo } from 'react';\nimport { BaseRect } from './BaseRect';\nimport { useEditorEngine } from '@/components/Context';\nimport { adaptRectToCanvas, adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\ninterface Distance {\n    value: number;\n    start: Point;\n    end: Point;\n    supportLine?: {\n        start: Point;\n        end: Point;\n    };\n}\n\ninterface RectPoint extends RectDimensions {\n    right: number;\n    bottom: number;\n}\n\ninterface MeasurementProps {\n    fromRect: RectDimensions;\n    toRect: RectDimensions;\n}\n\nconst toRectPoint = (rect: RectDimensions): RectPoint => ({\n    ...rect,\n    right: rect.left + rect.width,\n    bottom: rect.top + rect.height,\n    width: rect.width,\n    height: rect.height,\n    left: rect.left,\n    top: rect.top,\n});\n\nconst isBetween = (x: number, start: number, end: number): boolean => {\n    return (start <= x && x <= end) || (end <= x && x <= start);\n};\n\nconst isIntersect = (rectA: RectPoint, rectB: RectPoint): boolean => {\n    if (rectA.left > rectB.right || rectB.left > rectA.right) {\n        return false;\n    }\n    if (rectA.top > rectB.bottom || rectB.top > rectA.bottom) {\n        return false;\n    }\n    return true;\n};\n\nconst getInsideRect = (rectA: RectPoint, rectB: RectPoint): RectPoint | null => {\n    if (\n        rectA.left >= rectB.left &&\n        rectA.right <= rectB.right &&\n        rectA.top >= rectB.top &&\n        rectA.bottom <= rectB.bottom\n    ) {\n        return rectA;\n    } else if (\n        rectB.left >= rectA.left &&\n        rectB.right <= rectA.right &&\n        rectB.top >= rectA.top &&\n        rectB.bottom <= rectA.bottom\n    ) {\n        return rectB;\n    }\n    return null;\n};\n\nexport const MeasurementOverlay: React.FC<MeasurementProps> = memo(({ fromRect, toRect }) => {\n    const editorEngine = useEditorEngine();\n    const webview = editorEngine.webviews.getWebview(editorEngine.elements.selected?.[0]?.webviewId);\n\n    const fromRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(fromRect, webview) : fromRect),\n        [fromRect, webview],\n    );\n    const toRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(toRect, webview) : toRect),\n        [toRect, webview],\n    );\n\n    const fromRectPoint = useMemo(() => toRectPoint(fromRect), [fromRect]);\n    const toRectPointResult = useMemo(() => toRectPoint(toRect), [toRect]);\n\n    type DistanceWithoutSupportLine = Omit<Distance, 'supportLine'>;\n\n    const createDistance = (\n        distance: DistanceWithoutSupportLine,\n        toRect: RectPoint,\n        isHorizontal: boolean,\n    ): Distance => {\n        const result: Distance = { ...distance };\n        const { start, end } = distance;\n\n        if (isHorizontal && !isBetween(start.y, toRect.top, toRect.bottom)) {\n            result.supportLine = {\n                start: { x: end.x, y: toRect.top },\n                end: { x: end.x, y: end.y },\n            };\n        } else if (!isHorizontal && !isBetween(start.x, toRect.left, toRect.right)) {\n            result.supportLine = {\n                start: { x: toRect.left, y: end.y },\n                end: { x: end.x, y: end.y },\n            };\n        }\n\n        return result;\n    };\n\n    const distances = useMemo(() => {\n        if (!webview) {\n            return [];\n        }\n        const result: Distance[] = [];\n\n        // Scale values for display\n        const scaleValue = (value: number) => adaptValueToCanvas(Math.abs(value), true);\n\n        // Calculate horizontal distances\n        let y = fromRectPoint.top + fromRectPoint.height / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                y = insideRect.top + insideRect.height / 2;\n            } else if (fromRectPoint.bottom > toRectPointResult.bottom) {\n                y = fromRectPoint.top + (toRectPointResult.bottom - fromRectPoint.top) / 2;\n            } else {\n                y = fromRectPoint.bottom - (fromRectPoint.bottom - toRectPointResult.top) / 2;\n            }\n\n            const leftDistance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                leftDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(leftDistance);\n\n            const rightDistance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                rightDistance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(rightDistance);\n        } else if (fromRectPoint.left > toRectPointResult.right) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.right),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.right < toRectPointResult.left) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.left),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.left, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.right >= toRectPointResult.left\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.right, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.left <= toRectPointResult.left\n        ) {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        } else {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                        start: { x: fromRectPoint.left, y },\n                        end: { x: toRectPointResult.left, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        }\n\n        // Calculate vertical distances\n        let x = fromRectPoint.left + fromRectPoint.width / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                x = insideRect.left + insideRect.width / 2;\n            } else if (fromRectPoint.right > toRectPointResult.right) {\n                x = fromRectPoint.left + (toRectPointResult.right - fromRectPoint.left) / 2;\n            } else {\n                x = fromRectPoint.right - (fromRectPoint.right - toRectPointResult.left) / 2;\n            }\n\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        } else if (fromRectPoint.top > toRectPointResult.bottom) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.bottom < toRectPointResult.top) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.top),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (isBetween(fromRectPoint.top, toRectPointResult.top, toRectPointResult.bottom)) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.bottom, toRectPointResult.top, toRectPointResult.bottom)\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else {\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        }\n\n        return result;\n    }, [fromRectPoint, toRectPointResult]);\n\n    const viewBox = useMemo(\n        () => ({\n            minX: Math.min(fromRectAdjusted.left, toRectAdjusted.left) - 100,\n            minY: Math.min(fromRectAdjusted.top, toRectAdjusted.top) - 100,\n            width:\n                Math.abs(toRectAdjusted.left - fromRectAdjusted.left) +\n                Math.max(fromRectAdjusted.width, toRectAdjusted.width) +\n                200,\n            height:\n                Math.abs(toRectAdjusted.top - fromRectAdjusted.top) +\n                Math.max(fromRectAdjusted.height, toRectAdjusted.height) +\n                200,\n        }),\n        [fromRectAdjusted, toRectAdjusted],\n    );\n\n    const svgContent = (\n        <g transform={`translate(${-viewBox.minX},${-viewBox.minY})`}>\n            <rect\n                x={fromRect.left}\n                y={fromRect.top}\n                width={fromRect.width}\n                height={fromRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <rect\n                x={toRect.left}\n                y={toRect.top}\n                width={toRect.width}\n                height={toRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            {/* Distance lines and labels */}\n\n            {/* Distance lines and labels */}\n            {distances.map((distance, index) => {\n                const isHorizontal = distance.start.y === distance.end.y;\n                const midX = (distance.start.x + distance.end.x) / 2 + (isHorizontal ? 24 : 0);\n                const midY = (distance.start.y + distance.end.y) / 2 + (isHorizontal ? 0 : 16);\n\n                return (\n                    <g key={index}>\n                        <line\n                            x1={distance.start.x}\n                            y1={distance.start.y}\n                            x2={distance.end.x}\n                            y2={distance.end.y}\n                            stroke={colors.red?.[500]}\n                            strokeWidth={1}\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                        />\n                        {distance.supportLine && (\n                            <line\n                                x1={distance.supportLine.start.x}\n                                y1={distance.supportLine.start.y}\n                                x2={distance.supportLine.end.x}\n                                y2={distance.supportLine.end.y}\n                                stroke={colors.red?.[500]}\n                                strokeWidth={1}\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeDasharray=\"10 6\"\n                            />\n                        )}\n                        <g transform={`translate(${midX},${midY})`}>\n                            <rect\n                                x={-20}\n                                y={-10}\n                                width={40}\n                                height={20}\n                                fill={colors.red?.[500]}\n                                rx={2}\n                            />\n                            <text\n                                x={0}\n                                y={0}\n                                fill=\"white\"\n                                fontSize={12}\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                            >\n                                {Math.round(distance.value)}\n                            </text>\n                        </g>\n                    </g>\n                );\n            })}\n        </g>\n    );\n\n    return (\n        <BaseRect\n            width={viewBox.width}\n            height={viewBox.height}\n            top={viewBox.minY}\n            left={viewBox.minX}\n            strokeWidth={0}\n        >\n            {svgContent}\n        </BaseRect>\n    );\n});\n\nMeasurementOverlay.displayName = 'MeasurementOverlay';\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":379,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'styles' is defined but never used.","line":380,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":380,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport React from 'react';\n\nenum ResizeHandlePosition {\n    TOP = 'top',\n    RIGHT = 'right',\n    BOTTOM = 'bottom',\n    LEFT = 'left',\n    TOP_LEFT = 'top-left',\n    TOP_RIGHT = 'top-right',\n    BOTTOM_RIGHT = 'bottom-right',\n    BOTTOM_LEFT = 'bottom-left',\n}\n\ninterface HandleProps {\n    x: number;\n    y: number;\n    color: string;\n    position: ResizeHandlePosition;\n    styles: Record<string, string>;\n    handleMouseDown: (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => void;\n}\n\nconst getCursorStyle = (position: ResizeHandlePosition): string => {\n    switch (position) {\n        case 'top':\n        case 'bottom':\n            return 'ns-resize';\n        case 'left':\n        case 'right':\n            return 'ew-resize';\n        case 'top-left':\n        case 'bottom-right':\n            return 'nwse-resize';\n        case 'top-right':\n        case 'bottom-left':\n            return 'nesw-resize';\n        default:\n            return 'pointer';\n    }\n};\n\nconst createCaptureOverlay = (startEvent: React.MouseEvent) => {\n    const captureOverlay = document.createElement('div');\n    captureOverlay.style.position = 'fixed';\n    captureOverlay.style.top = '0';\n    captureOverlay.style.left = '0';\n    captureOverlay.style.width = '100%';\n    captureOverlay.style.height = '100%';\n    captureOverlay.style.cursor = window.getComputedStyle(startEvent.currentTarget).cursor;\n    captureOverlay.style.zIndex = '9999';\n    document.body.appendChild(captureOverlay);\n    return captureOverlay;\n};\n\ninterface ResizeDimensions {\n    width: number;\n    height: number;\n}\n\nconst calculateNewElementDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.round(Math.max(startWidth - adjustedDeltaX, 0));\n    } else if (position.includes('right')) {\n        newWidth = Math.round(Math.max(startWidth + adjustedDeltaX, 0));\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.round(Math.max(startHeight - adjustedDeltaY, 0));\n    } else if (position.includes('bottom')) {\n        newHeight = Math.round(Math.max(startHeight + adjustedDeltaY, 0));\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\nconst calculateNewOverlayDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.max(startWidth - adjustedDeltaX, 0);\n    } else if (position.includes('right')) {\n        newWidth = Math.max(startWidth + adjustedDeltaX, 0);\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.max(startHeight - adjustedDeltaY, 0);\n    } else if (position.includes('bottom')) {\n        newHeight = Math.max(startHeight + adjustedDeltaY, 0);\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\ninterface EdgeHandleProps extends HandleProps {\n    handleDoubleClick: (e: React.MouseEvent, position: ResizeHandlePosition) => void;\n}\n\nconst EdgeHandle: React.FC<EdgeHandleProps> = ({\n    x,\n    y,\n    position,\n    styles,\n    handleMouseDown,\n    handleDoubleClick,\n}) => {\n    const size = 4;\n    const halfSize = size / 2;\n    const isVertical =\n        position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n\n    const lastClickRef = React.useRef<number>(0);\n    const DOUBLE_CLICK_TIMEOUT = 300;\n\n    const handleMouseDownRect = (e: React.MouseEvent) => {\n        const currentTime = Date.now();\n        const timeSinceLastClick = currentTime - lastClickRef.current;\n        const doubleClick = timeSinceLastClick < DOUBLE_CLICK_TIMEOUT;\n\n        if (doubleClick) {\n            handleDoubleClick(e, position);\n            lastClickRef.current = 0;\n        } else {\n            handleMouseDown(e, position, styles);\n            lastClickRef.current = currentTime;\n        }\n    };\n\n    return (\n        <rect\n            x={isVertical ? x - halfSize : 0}\n            y={isVertical ? 0 : y - halfSize}\n            width={isVertical ? size : '100%'}\n            height={isVertical ? '100%' : size}\n            fill=\"transparent\"\n            style={{ cursor: getCursorStyle(position), pointerEvents: 'auto' }}\n            onMouseDown={handleMouseDownRect}\n        />\n    );\n};\n\nconst CornerHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: getCursorStyle(position),\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            {/* Invisible larger circle for hit area */}\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n        </g>\n    );\n};\n\nconst RadiusHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: 'nwse-resize',\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n            <circle cx={halfSize} cy={halfSize} r={1.5} fill={color} />\n        </g>\n    );\n};\n\ninterface ResizeHandlesProps {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n    borderRadius: number;\n    isComponent?: boolean;\n    styles: Record<string, string>;\n}\n\nexport const ResizeHandles: React.FC<ResizeHandlesProps> = ({\n    width,\n    height,\n    borderRadius,\n    isComponent,\n    styles,\n}) => {\n    const editorEngine = useEditorEngine();\n    const color = isComponent ? colors.purple?.[500] : colors.red?.[500];\n\n    // Calculate radius handle position (20px or 25% of width/height, whichever is smaller)\n    const radiusOffset = Math.min(20, width * 0.25, height * 0.25);\n    const showRadius = width >= 10 && height >= 10;\n\n    const updateWidth = (newWidth: string) => {\n        editorEngine.style.update('width', newWidth);\n    };\n\n    const updateHeight = (newHeight: string) => {\n        editorEngine.style.update('height', newHeight);\n    };\n\n    const updateWidthHeight = (newWidth: string, newHeight: string) => {\n        editorEngine.style.updateMultiple({\n            width: newWidth,\n            height: newHeight,\n        });\n    };\n\n    const updateRadius = (newRadius: string) => {\n        editorEngine.style.update('border-radius', newRadius);\n    };\n\n    const handleDoubleClick = (e: React.MouseEvent, position: ResizeHandlePosition) => {\n        const isVertical =\n            position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n        const targetValue = e.altKey ? '100%' : 'fit-content';\n        if (isVertical) {\n            editorEngine.style.update('width', targetValue);\n        } else {\n            editorEngine.style.update('height', targetValue);\n        }\n    };\n\n    const handleMouseDownDimensions = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startDimensions = {\n            width: parseFloat(styles.width),\n            height: parseFloat(styles.height),\n        };\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n            const adjustedDelta = {\n                x: adaptValueToCanvas(deltaX, true),\n                y: adaptValueToCanvas(deltaY, true),\n            };\n\n            const newElementDimensions = calculateNewElementDimensions(\n                position,\n                startDimensions,\n                adjustedDelta,\n            );\n            const newOverlayDimensions = calculateNewOverlayDimensions(\n                position,\n                { width, height },\n                {\n                    x: deltaX,\n                    y: deltaY,\n                },\n            );\n\n            const widthChanged = newElementDimensions.width !== startDimensions.width;\n            const heightChanged = newElementDimensions.height !== startDimensions.height;\n\n            if (widthChanged && heightChanged) {\n                updateWidthHeight(\n                    `${newElementDimensions.width}px`,\n                    `${newElementDimensions.height}px`,\n                );\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                    height: newOverlayDimensions.height,\n                });\n            } else if (widthChanged) {\n                updateWidth(`${newElementDimensions.width}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                });\n            } else if (heightChanged) {\n                updateHeight(`${newElementDimensions.height}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    height: newOverlayDimensions.height,\n                });\n            }\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    const handleMouseDownRadius = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startRadius = borderRadius;\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n\n            // Use the larger of the two deltas for a more natural radius adjustment\n            const delta = Math.max(Math.abs(deltaX), Math.abs(deltaY)) * Math.sign(deltaX + deltaY);\n            const adjustedDelta = adaptValueToCanvas(delta, true);\n\n            const newRadius = Math.max(0, startRadius + adjustedDelta);\n            updateRadius(`${Math.round(newRadius)}px`);\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <>\n            {/* Edge handles */}\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={0}\n                position={ResizeHandlePosition.TOP}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width}\n                y={height / 2}\n                position={ResizeHandlePosition.RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={0}\n                y={height / 2}\n                position={ResizeHandlePosition.LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n\n            {/* Corner handles */}\n            <CornerHandle\n                color={color}\n                x={0}\n                y={0}\n                position={ResizeHandlePosition.TOP_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={0}\n                position={ResizeHandlePosition.TOP_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={0}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n\n            {showRadius && (\n                <RadiusHandle\n                    color={color}\n                    x={radiusOffset}\n                    y={radiusOffset}\n                    position={ResizeHandlePosition.TOP_LEFT}\n                    styles={styles}\n                    handleMouseDown={handleMouseDownRadius}\n                />\n            )}\n        </>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/TextEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/PanOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/ChatHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":270,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":317,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { FOCUS_CHAT_INPUT_EVENT } from '@/lib/editor/engine/chat';\nimport { EditorTabValue } from '@/lib/models';\nimport { compressImage } from '@/lib/utils';\nimport type { ChatMessageContext, ImageMessageContext } from '@onlook/models/chat';\nimport { MessageContextType } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { AnimatePresence } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { DraftContextPill } from './ContextPills/DraftContextPill';\nimport { DraftImagePill } from './ContextPills/DraftingImagePill';\nimport type { SuggestionsRef } from './Suggestions';\nimport Suggestions from './Suggestions';\n\nexport const ChatInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const [inputValue, setInputValue] = useState('');\n    const [isComposing, setIsComposing] = useState(false);\n    const [actionTooltipOpen, setActionTooltipOpen] = useState(false);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const focusInput = () => {\n        requestAnimationFrame(() => {\n            textareaRef.current?.focus();\n        });\n    };\n\n    useEffect(() => {\n        if (textareaRef.current && !editorEngine.chat.isWaiting) {\n            focusInput();\n        }\n    }, [editorEngine.chat.conversation.current?.messages.length]);\n\n    useEffect(() => {\n        if (editorEngine.editPanelTab === EditorTabValue.CHAT) {\n            focusInput();\n        }\n    }, [editorEngine.editPanelTab]);\n\n    useEffect(() => {\n        const focusHandler = () => {\n            if (textareaRef.current && !editorEngine.chat.isWaiting) {\n                focusInput();\n            }\n        };\n\n        window.addEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n        return () => window.removeEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n    }, []);\n\n    useEffect(() => {\n        const handleGlobalKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && suggestionRef.current?.handleEnterSelection()) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Stop the event from bubbling to the canvas\n                e.stopImmediatePropagation();\n                // Handle the suggestion selection\n                suggestionRef.current.handleEnterSelection();\n            }\n        };\n\n        // Capture phase to intercept before it reaches the canvas\n        window.addEventListener('keydown', handleGlobalKeyDown, true);\n        return () => window.removeEventListener('keydown', handleGlobalKeyDown, true);\n    }, []);\n\n    const disabled = editorEngine.chat.isWaiting || editorEngine.chat.context.context.length === 0;\n    const inputEmpty = !inputValue || inputValue.trim().length === 0;\n\n    function handleInput(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        if (isComposing) {\n            return;\n        }\n        e.currentTarget.style.height = 'auto';\n        e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Tab') {\n            // Always prevent default tab behavior\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Only let natural tab order continue if handleTabNavigation returns false\n            const handled = suggestionRef.current?.handleTabNavigation();\n            if (!handled) {\n                // Focus the textarea\n                textareaRef.current?.focus();\n            }\n        } else if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (suggestionRef.current?.handleEnterSelection()) {\n                setTimeout(() => textareaRef.current?.focus(), 0);\n                return;\n            }\n\n            if (!inputEmpty) {\n                sendMessage();\n            }\n        }\n    };\n\n    function sendMessage() {\n        if (inputEmpty) {\n            console.warn('Empty message');\n            return;\n        }\n        if (editorEngine.chat.isWaiting) {\n            console.warn('Already waiting for response');\n            return;\n        }\n        editorEngine.chat.sendNewMessage(inputValue);\n        setInputValue('');\n    }\n\n    const handleRemoveContext = (contextToRemove: ChatMessageContext) => {\n        const newContext = [...editorEngine.chat.context.context].filter(\n            (context) => context !== contextToRemove,\n        );\n\n        editorEngine.chat.context.context = newContext;\n    };\n\n    const handleOpenFileDialog = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.currentTarget.blur(); // Removes focus from the button to prevent tooltip from showing\n        const inputElement = document.createElement('input');\n        inputElement.type = 'file';\n        inputElement.accept = 'image/*';\n        inputElement.onchange = () => {\n            if (inputElement.files && inputElement.files.length > 0) {\n                const file = inputElement.files?.[0];\n                const fileName = file.name;\n                handleImageEvent(file, fileName);\n            }\n        };\n        inputElement.click();\n    };\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n        const items = e.clipboardData.items;\n\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                e.preventDefault();\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Pasted image');\n                break;\n            }\n        }\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.removeAttribute('data-dragging-image');\n\n        const items = e.dataTransfer.items;\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Dropped image');\n                break;\n            }\n        }\n    };\n\n    const handleImageEvent = async (file: File, displayName?: string) => {\n        const reader = new FileReader();\n        reader.onload = async (event) => {\n            const compressedImage = await compressImage(file);\n            const base64URL = compressedImage || (event.target?.result as string);\n            const contextImage: ImageMessageContext = {\n                type: MessageContextType.IMAGE,\n                content: base64URL,\n                mimeType: file.type,\n                displayName: displayName || file.name,\n            };\n            editorEngine.chat.context.context.push(contextImage);\n        };\n        reader.readAsDataURL(file);\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            e.currentTarget.setAttribute('data-dragging-image', isDragging.toString());\n        }\n    };\n\n    const suggestionRef = useRef<SuggestionsRef>(null);\n\n    return (\n        <div\n            className={cn(\n                'flex flex-col w-full text-foreground-tertiary border-t text-small transition-colors duration-200',\n                '[&[data-dragging-image=true]]:bg-teal-500/40',\n                isDragging && 'cursor-copy',\n            )}\n            onDrop={(e) => {\n                handleDrop(e);\n                setIsDragging(false);\n            }}\n            onDragOver={handleDragOver}\n            onDragEnter={(e) => {\n                e.preventDefault();\n                handleDragStateChange(true, e);\n            }}\n            onDragLeave={(e) => {\n                if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                    handleDragStateChange(false, e);\n                }\n            }}\n        >\n            <Suggestions\n                ref={suggestionRef}\n                disabled={disabled}\n                inputValue={inputValue}\n                setInput={(suggestion) => {\n                    setInputValue(suggestion);\n                    textareaRef.current?.focus();\n                    setTimeout(() => {\n                        if (textareaRef.current) {\n                            textareaRef.current.scrollTop = textareaRef.current.scrollHeight;\n                        }\n                    }, 100);\n                }}\n                onSuggestionFocus={(isFocused) => {\n                    if (!isFocused) {\n                        textareaRef.current?.focus();\n                    }\n                }}\n            />\n\n            <div className=\"flex flex-col w-full p-4\">\n                <div\n                    className={cn(\n                        'flex flex-row flex-wrap w-full gap-1.5 text-micro mb-1 text-foreground-secondary',\n                        editorEngine.chat.context.context.length > 0 ? 'min-h-6' : 'h-0',\n                    )}\n                >\n                    <AnimatePresence mode=\"popLayout\">\n                        {editorEngine.chat.context.context.map(\n                            (context: ChatMessageContext, index: number) => {\n                                if (context.type === MessageContextType.IMAGE) {\n                                    return (\n                                        <DraftImagePill\n                                            key={`image-${context.content}`}\n                                            context={context}\n                                            onRemove={() => handleRemoveContext(context)}\n                                        />\n                                    );\n                                }\n                                return (\n                                    <DraftContextPill\n                                        key={`${context.type}-${context.content}`}\n                                        context={context}\n                                        onRemove={() => handleRemoveContext(context)}\n                                    />\n                                );\n                            },\n                        )}\n                    </AnimatePresence>\n                </div>\n                <Textarea\n                    ref={textareaRef}\n                    disabled={disabled}\n                    placeholder={\n                        disabled\n                            ? projectsManager.runner?.isRunning ||\n                              projectsManager.runner?.isStarting\n                                ? 'Select an element to chat'\n                                : 'Start the project to chat'\n                            : 'Ask follow up questions or provide more context...'\n                    }\n                    className={cn(\n                        'mt-2 overflow-auto max-h-32 text-small p-0 border-0 shadow-none rounded-none caret-[#FA003C]',\n                        'selection:bg-[#FA003C]/30 selection:text-[#FA003C] text-foreground-primary',\n                        'placeholder:text-foreground-primary/50',\n                        'cursor-text',\n                        isDragging ? 'pointer-events-none' : 'pointer-events-auto',\n                    )}\n                    rows={3}\n                    style={{ resize: 'none' }}\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onInput={handleInput}\n                    onKeyDown={handleKeyDown}\n                    onPaste={handlePaste}\n                    onCompositionStart={() => setIsComposing(true)}\n                    onCompositionEnd={(e) => {\n                        setIsComposing(false);\n                    }}\n                    onDragEnter={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragenter', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragOver={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragover', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragLeave={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                            e.currentTarget.parentElement?.dispatchEvent(\n                                new DragEvent('dragleave', {\n                                    bubbles: true,\n                                    cancelable: true,\n                                    dataTransfer: e.dataTransfer,\n                                }),\n                            );\n                        }\n                    }}\n                    onDrop={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('drop', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                />\n            </div>\n            <div className=\"flex flex-row w-full justify-between pt-2 pb-2 px-2\">\n                <div className=\"flex flex-row justify-start gap-1.5\">\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={handleOpenFileDialog}\n                                disabled={disabled}\n                            >\n                                <Icons.Image\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled ? 'Select an element to start' : 'Upload Image Reference'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={() => {\n                                    editorEngine.chat.context.addScreenshotContext();\n                                }}\n                                disabled={disabled}\n                            >\n                                <Icons.Laptop\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled\n                                    ? 'Select an element to start'\n                                    : 'Add screenshot of the current page'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Button\n                        variant={'outline'}\n                        className=\"w-fit h-fit py-0.5 px-2.5 text-foreground-tertiary hidden\"\n                    >\n                        <Icons.FilePlus className=\"mr-2\" />\n                        <span className=\"text-smallPlus\">File Reference</span>\n                    </Button>\n                </div>\n                {editorEngine.chat.isWaiting ? (\n                    <Tooltip open={actionTooltipOpen} onOpenChange={setActionTooltipOpen}>\n                        <TooltipTrigger asChild>\n                            <Button\n                                size={'icon'}\n                                variant={'secondary'}\n                                className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                                onClick={() => {\n                                    setActionTooltipOpen(false);\n                                    editorEngine.chat.stopStream();\n                                }}\n                            >\n                                <Icons.Stop />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>{'Stop response'}</TooltipContent>\n                    </Tooltip>\n                ) : (\n                    <Button\n                        size={'icon'}\n                        variant={'secondary'}\n                        className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                        disabled={inputEmpty || editorEngine.chat.isWaiting}\n                        onClick={sendMessage}\n                    >\n                        <Icons.ArrowRight />\n                    </Button>\n                )}\n            </div>\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/AssistantMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/MarkdownRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":35,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":41,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@onlook/ui/utils';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport CodeChangeDisplay from '../CodeChangeDisplay';\nimport BashCodeDisplay from '../CodeChangeDisplay/BashCodeDisplay';\n\nconst MarkdownRenderer = ({\n    messageId,\n    content,\n    className = '',\n    applied,\n    isStream = false,\n}: {\n    messageId: string;\n    content: string;\n    className?: string;\n    applied: boolean;\n    isStream?: boolean;\n}) => {\n    const transformedContent = content.replace(\n        /^(.*?)\\n```(\\w+)\\n/gm,\n        (_, filePath, language) => `\\`\\`\\`${language}:${filePath}\\n`,\n    );\n\n    return (\n        <div\n            className={cn(\n                'prose prose-stone dark:prose-invert prose-compact text-small break-words',\n                className,\n            )}\n        >\n            <ReactMarkdown\n                remarkPlugins={[remarkGfm]}\n                components={{\n                    pre: ({ node, ...props }) => (\n                        <pre\n                            className=\"m-0 p-0 mb-2 rounded-lg bg-none border-0.5 border-border-primary\"\n                            {...props}\n                        />\n                    ),\n                    code({ node, className, children, ...props }) {\n                        const match = /language-(\\w+)(:?.+)?/.exec(className || '');\n                        const language = match?.[1];\n                        const filePath = match?.[2]?.substring(1);\n                        const codeContent = String(children).replace(/\\n$/, '');\n\n                        if (language === 'bash') {\n                            return <BashCodeDisplay content={codeContent} isStream={isStream} />;\n                        }\n\n                        if (match && filePath) {\n                            return (\n                                <CodeChangeDisplay\n                                    path={filePath}\n                                    content={codeContent}\n                                    messageId={messageId}\n                                    applied={applied}\n                                    isStream={isStream}\n                                />\n                            );\n                        }\n\n                        return (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        );\n                    },\n                }}\n            >\n                {transformedContent}\n            </ReactMarkdown>\n        </div>\n    );\n};\n\nexport default MarkdownRenderer;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/StreamMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/UserMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/BashCodeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeDiff.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CollapsibleCodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftingImagePill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/SentContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ErrorView/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/Suggestions/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/BooleanProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/CodeProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/TextProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":135,"column":49,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":140,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":163,"column":53,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":170,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { PropsType, type DomElement, type PropsParsingResult } from '@onlook/models/element';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\nimport BooleanProp from './BooleanProp';\nimport CodeProp from './CodeProp';\nimport TextProp from './TextProp';\n\nexport interface Prop {\n    type: PropsType;\n    displayType?: string;\n    value: string | boolean;\n    icon?: React.ReactNode;\n}\n\nconst PropsTab = () => {\n    const [props, setProps] = useState<{ [key: string]: Prop } | null>({});\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n\n    const editorEngine = useEditorEngine();\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            getRootProps(selectedEl);\n        }\n    }, [editorEngine.elements.selected]);\n\n    async function getRootProps(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootProps: PropsParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_PROPS,\n                newRoot,\n            );\n\n            if (rootProps.type === 'props' && rootProps.props.length > 0) {\n                const elementProps: Record<string, Prop> = {};\n                rootProps.props.forEach((prop) => {\n                    const newProp: Prop = {\n                        type: prop.type,\n                        value: prop.value,\n                    };\n                    elementProps[prop.key] = newProp;\n                });\n                setProps(elementProps);\n            } else {\n                setProps(null);\n            }\n        }\n    }\n\n    const createCodeDiffRequest = async (\n        oid: string | undefined,\n        value: string | number | boolean,\n        name: string,\n    ) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n\n        request.push({\n            oid,\n            attributes: { [name]: value },\n            textContent: null,\n            overrideClasses: false,\n            structureChanges: [],\n        });\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('attributes action');\n        }\n    };\n\n    function viewSource() {\n        if (selectedEl?.oid) {\n            editorEngine.code.viewSource(selectedEl?.oid);\n        }\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2 px-3 w-full\">\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs\">Detected Properties</span>\n                <Button size={'icon'} variant={'ghost'}>\n                    <Icons.Plus />\n                </Button>\n            </div>\n            <div className=\"flex flex-col gap-4 mb-5\">\n                {props !== null &&\n                    Object.keys(props).map((key) => {\n                        const prop = props[key];\n                        return (\n                            <div className=\"flex flex-row items-center\" key={key}>\n                                <div className=\"flex flex-row gap-2 items-center\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"text-sm\">{key}</span>\n                                        <span className=\"text-xs text-foreground-secondary\">\n                                            {prop.displayType ? prop.displayType : prop.type}\n                                        </span>\n                                    </div>\n                                </div>\n                                <div className=\"text-end ml-auto\">\n                                    {prop.type === 'code' ? (\n                                        <CodeProp onClick={viewSource} />\n                                    ) : prop.type === 'boolean' ? (\n                                        <BooleanProp\n                                            value={prop.value as boolean}\n                                            change={(value) => {\n                                                setProps((prev) =>\n                                                    prev !== null\n                                                        ? {\n                                                              ...prev,\n                                                              [key]: {\n                                                                  ...prev[key],\n                                                                  value,\n                                                              },\n                                                          }\n                                                        : null,\n                                                );\n                                                selectedEl?.oid &&\n                                                    createCodeDiffRequest(\n                                                        selectedEl?.oid,\n                                                        value,\n                                                        key,\n                                                    );\n                                            }}\n                                        />\n                                    ) : (\n                                        (prop.type === PropsType.String ||\n                                            prop.type === PropsType.Number) && (\n                                            <TextProp\n                                                prop={prop}\n                                                type={prop.type}\n                                                onChange={(value) => {\n                                                    setProps((prev) =>\n                                                        prev !== null\n                                                            ? {\n                                                                  ...prev,\n                                                                  [key]: {\n                                                                      ...prev[key],\n                                                                      value,\n                                                                  },\n                                                              }\n                                                            : null,\n                                                    );\n                                                }}\n                                                onBlur={(val) => {\n                                                    selectedEl?.oid &&\n                                                        createCodeDiffRequest(\n                                                            selectedEl?.oid,\n                                                            prop.type === PropsType.Number\n                                                                ? parseInt(val)\n                                                                : val,\n                                                            key,\n                                                        );\n                                                }}\n                                            />\n                                        )\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n        </div>\n    );\n};\n\nexport default PropsTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/BorderInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/DisplayInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/FillInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/GridRowColInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/NestedInputs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/PositionInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { CompoundStyleImpl } from '@/lib/editor/styles';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport TextInput from '../single/TextInput';\nimport { cn } from '@onlook/ui/utils';\nimport SelectInput from '../single/SelectInput';\nimport { Icons } from '@onlook/ui/icons/index';\nimport type { DomElement } from '@onlook/models/element';\n\ntype Position = 'top' | 'bottom' | 'left' | 'right';\ntype PositionState = Record<Position, boolean>;\n\ninterface LineProps {\n    position: Position;\n    isActive: boolean;\n    onClick: (position: Position) => void;\n}\n\nconst PositionLine = ({ position, isActive, onClick }: LineProps) => {\n    const positionStyles = {\n        top: 'top-0.5 w-[calc(100%-16px)] left-[8px]',\n        right: 'right-0.5 h-[calc(100%-16px)] top-[8px]',\n        bottom: 'bottom-0.5 w-[calc(100%-16px)] left-[8px]',\n        left: 'left-0.5 h-[calc(100%-16px)] top-[8px]',\n    };\n\n    const lineStyles = {\n        top: 'w-1 h-3',\n        right: 'h-1 w-3',\n        bottom: 'w-1 h-3',\n        left: 'h-1 w-3',\n    };\n\n    return (\n        <div\n            className={cn(\n                'absolute cursor-pointer transition-colors flex items-center justify-center ',\n                positionStyles[position],\n            )}\n            onClick={() => onClick(position)}\n        >\n            <div\n                className={cn(\n                    'rounded-full',\n                    lineStyles[position],\n                    isActive\n                        ? 'bg-red-500 hover:bg-red-600'\n                        : 'bg-background-active hover:bg-primary',\n                )}\n            />\n        </div>\n    );\n};\n\nconst CenterButton = ({ isCenter, onClick }: { isCenter: boolean; onClick: () => void }) => (\n    <div\n        className=\"bg-background-onlook rounded relative flex items-center justify-center px-2 py-2 border border-background-active\"\n        onClick={onClick}\n    >\n        <Icons.Plus\n            className={cn(\n                'w-4 h-4 hover:text-red-500 transition-colors hover:cursor-pointer hover:scale-110',\n                isCenter ? 'text-red-500' : 'text-gray-400',\n            )}\n        />\n    </div>\n);\n\nconst PositionInput = observer(({ compoundStyle }: { compoundStyle: CompoundStyleImpl }) => {\n    const editorEngine = useEditorEngine();\n    const [lines, setLines] = useState<PositionState>({\n        top: false,\n        bottom: false,\n        left: false,\n        right: false,\n    });\n    const [isCentered, setIsCentered] = useState(false);\n\n    const resetPositionState = () => {\n        setLines({\n            top: false,\n            bottom: false,\n            left: false,\n            right: false,\n        });\n    };\n\n    const onLineClicked = (position: Position) => {\n        setLines((prev) => {\n            const newState = { ...prev, [position]: !prev[position], center: false };\n            if (!newState[position]) {\n                editorEngine.style.update(position, 'auto');\n            }\n            return newState;\n        });\n    };\n\n    const onMainValueChanged = (key: string, value: string) => {\n        if (value === 'absolute') {\n            centerElement();\n        } else {\n            editorEngine.style.updateStyleNoAction(\n                Object.fromEntries(\n                    compoundStyle.children.map((elementStyle) => [elementStyle.key, 'auto']),\n                ),\n            );\n            resetPositionState();\n        }\n    };\n\n    const getElementAndParent = async () => {\n        const elements = editorEngine.elements.selected;\n        if (elements.length === 0) {\n            return null;\n        }\n\n        const results = [];\n        for (const element of elements) {\n            if (!element?.domId) {\n                continue;\n            }\n\n            const webview = editorEngine.webviews.getWebview(element.webviewId);\n            if (!webview) {\n                continue;\n            }\n\n            const parent: DomElement | null = await webview.executeJavaScript(\n                `window.api?.getParentElement('${element.domId}')`,\n            );\n            if (!parent) {\n                continue;\n            }\n\n            results.push({ element, parent });\n        }\n\n        return results.length > 0 ? results : null;\n    };\n\n    const centerElement = async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return;\n        }\n        if (isCentered) {\n            return;\n        }\n\n        const updates: Record<string, string> = {};\n        for (const { element, parent } of elementPairs) {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n\n            updates.left = `${Math.round(centerX)}px`;\n            updates.top = `${Math.round(centerY)}px`;\n        }\n\n        editorEngine.style.updateMultiple(updates);\n    };\n\n    const checkIfCentered = useCallback(async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return false;\n        }\n\n        const allCentered = elementPairs.every(({ element, parent }) => {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n            const currentLeft = element.rect.x - parent.rect.x;\n            const currentTop = element.rect.y - parent.rect.y;\n\n            return Math.abs(currentLeft - centerX) < 1 && Math.abs(currentTop - centerY) < 1;\n        });\n\n        setIsCentered(allCentered);\n        return allCentered;\n    }, [editorEngine.style.selectedStyle]);\n\n    const renderMainControl = () => (\n        <div className=\"flex flex-row items-center justify-between w-full\">\n            <p className=\"text-xs text-foreground-onlook\">{compoundStyle.head.displayName}</p>\n            <div className=\"flex flex-row space-x-1\">\n                <SelectInput elementStyle={compoundStyle.head} onValueChange={onMainValueChanged} />\n            </div>\n        </div>\n    );\n\n    const renderLines = useCallback(() => {\n        return (\n            <div className=\"w-16 h-16 bg-background-onlook rounded relative flex items-center justify-center px-4 py-4\">\n                <CenterButton isCenter={isCentered} onClick={centerElement} />\n                {(['top', 'right', 'bottom', 'left'] as Position[]).map((position) => (\n                    <PositionLine\n                        key={position}\n                        position={position}\n                        isActive={lines[position]}\n                        onClick={onLineClicked}\n                    />\n                ))}\n            </div>\n        );\n    }, [lines, centerElement, isCentered]);\n\n    const renderPositionInputs = useCallback(() => {\n        const elementStyles = compoundStyle.children;\n        const currentPosition = compoundStyle.head.getValue(\n            editorEngine.style.selectedStyle?.styles || {},\n        );\n\n        if (currentPosition !== 'absolute') {\n            return null;\n        }\n\n        const positionStyles = {\n            top: 'top-0 left-1/2 -translate-x-1/2',\n            bottom: 'bottom-0 left-1/2 -translate-x-1/2',\n            left: 'left-0 top-1/2 -translate-y-1/2',\n            right: 'right-0 top-1/2 -translate-y-1/2',\n        };\n\n        return (\n            <div className=\"relative h-36 w-52 flex items-center justify-center mb-4 mx-auto\">\n                {elementStyles.map((elementStyle) => {\n                    const position = elementStyle.key.toLowerCase() as Position;\n                    const isActive = lines[position];\n\n                    return (\n                        <TextInput\n                            key={elementStyle.key}\n                            elementStyle={elementStyle}\n                            disabled={!isActive}\n                            className={cn(\n                                'absolute w-16 bg-background-onlook text-foreground-onlook text-center rounded p-2',\n                                positionStyles[position],\n                                !isActive && 'opacity-50 cursor-not-allowed',\n                            )}\n                        />\n                    );\n                })}\n                {renderLines()}\n            </div>\n        );\n    }, [compoundStyle.children, editorEngine.style.selectedStyle, lines, renderLines]);\n\n    useEffect(() => {\n        const updatePosition = async () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n\n            const position = selectedStyle.styles?.['position'];\n\n            if (position === 'absolute') {\n                setLines({\n                    top: selectedStyle.styles?.['top'] !== 'auto',\n                    bottom: selectedStyle.styles?.['bottom'] !== 'auto',\n                    left: selectedStyle.styles?.['left'] !== 'auto',\n                    right: selectedStyle.styles?.['right'] !== 'auto',\n                });\n            }\n        };\n\n        checkIfCentered();\n        updatePosition();\n    }, [editorEngine.style.selectedStyle]);\n\n    return (\n        <div className=\"space-y-2\">\n            {renderMainControl()}\n            {renderPositionInputs()}\n        </div>\n    );\n});\n\nexport default PositionInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/AutoLayoutInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ImagePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/Popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/NumberUnitInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":42,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":42,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":124,"column":25,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":124,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { observer } from 'mobx-react-lite';\nimport { type ChangeEvent, useEffect, useState } from 'react';\n\nconst NumberUnitInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [numberValue, setNumberValue] = useState<string>('');\n        const [unitValue, setUnitValue] = useState<string>('');\n        const [prevNumberValue, setPrevNumberValue] = useState<string>('');\n\n        useEffect(() => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(selectedStyle.styles);\n            const { numberVal, unitVal } = stringToParsedValue(\n                newValue,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        }, [editorEngine.style.selectedStyle]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const handleNumberInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n            setNumberValue(e.currentTarget.value);\n\n            const newNumber = e.currentTarget.value;\n            const parsedNewNumber = Number.parseFloat(newNumber);\n            const { min, max } = elementStyle.params || {};\n\n            if (min !== undefined && parsedNewNumber < min) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            if (max !== undefined && parsedNewNumber > max) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be more than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            const { unitVal } = stringToParsedValue(\n                e.currentTarget.value,\n                elementStyle.key === 'opacity',\n            );\n            const newUnit = unitVal === '' ? 'px' : unitVal;\n            setUnitValue(newUnit);\n        };\n\n        const handleUnitInputChange = (e: ChangeEvent<HTMLSelectElement>) => {\n            const newUnit = e.currentTarget.value;\n            const newValue = parsedValueToString(numberValue, newUnit);\n            setUnitValue(newUnit);\n            sendStyleUpdate(newValue);\n        };\n\n        const setValueCallback = (value: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(\n                value,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            if (e.currentTarget.value !== prevNumberValue) {\n                const value = parsedValueToString(\n                    Number.parseFloat(numberValue).toString(),\n                    unitValue,\n                );\n                sendStyleUpdate(value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n\n        const renderNumberInput = () => {\n            return (\n                <input\n                    type=\"text\"\n                    placeholder=\"--\"\n                    value={numberValue}\n                    onKeyDown={(e) =>\n                        handleNumberInputKeyDown(\n                            e,\n                            elementStyle,\n                            parsedValueToString(numberValue, unitValue),\n                            setValueCallback,\n                            sendStyleUpdate,\n                        )\n                    }\n                    onChange={handleNumberInputChange}\n                    className=\"w-full p-[6px] px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                    onFocus={() => {\n                        setPrevNumberValue(numberValue);\n                        editorEngine.history.startTransaction;\n                    }}\n                    onBlur={handleBlur}\n                />\n            );\n        };\n\n        const renderUnitInput = () => {\n            return (\n                <div className=\"relative w-full group\">\n                    <select\n                        value={unitValue}\n                        className=\"p-[6px] w-full px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start appearance-none focus:outline-none focus:ring-0\"\n                        onChange={handleUnitInputChange}\n                    >\n                        {elementStyle.params?.units?.map((option) => (\n                            <option key={option} value={option}>\n                                {option}\n                            </option>\n                        ))}\n                    </select>\n                    <div className=\"text-foreground-onlook group-hover:text-foreground-hover absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                        <Icons.ChevronDown />\n                    </div>\n                </div>\n            );\n        };\n\n        return (\n            <div className=\"flex flex-row gap-1 justify-end text-xs w-32\">\n                {renderNumberInput()}\n                {renderUnitInput()}\n            </div>\n        );\n    },\n);\n\nexport default NumberUnitInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/SelectInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":80,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":80,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport { Icons } from '@onlook/ui/icons';\nimport { ToggleGroup, ToggleGroupItem } from '@onlook/ui/toggle-group';\nimport { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\n\nconst OVERRIDE_OPTIONS: Record<string, string | undefined> = {\n    'flex-start': 'start',\n    'flex-end': 'end',\n    'space-between': 'stretch',\n    'space-around': 'around',\n    'space-evenly': 'evenly',\n    'flex-start flex-end': 'between',\n    'flex-start flex-start': 'around',\n    'flex-end flex-end': 'evenly',\n};\n\nconst OVERRIDE_ICONS: Record<string, JSX.Element | string | Record<string, JSX.Element>> = {\n    'flex-start': <Icons.ArrowRight />,\n    'flex-end': <Icons.ArrowDown />,\n    'space-between': <Icons.ArrowRight />,\n    'space-around': <Icons.ArrowRight />,\n    'space-evenly': <Icons.ArrowRight />,\n    'flex-start flex-end': <Icons.ArrowRight />,\n    'flex-start flex-start': <Icons.ArrowRight />,\n    'flex-end flex-end': <Icons.ArrowRight />,\n    start: <Icons.TextAlignLeft />,\n    center: <Icons.TextAlignCenter />,\n    end: <Icons.TextAlignRight />,\n    solid: <Icons.BorderSolid />,\n    dashed: <Icons.BorderDashed />,\n    dotted: <Icons.BorderDotted />,\n    row: <Icons.ArrowRight />,\n    column: <Icons.ArrowDown />,\n    block: '--',\n    justifyContent: {\n        'flex-start': <Icons.AlignLeft />,\n        center: <Icons.AlignCenterHorizontally />,\n        'flex-end': <Icons.AlignRight />,\n        'space-between': <Icons.SpaceBetweenHorizontally />,\n        stretch: <Icons.SpaceBetweenHorizontally />,\n    },\n    alignItems: {\n        'flex-start': <Icons.AlignTop />,\n        center: <Icons.AlignCenterVertically />,\n        'flex-end': <Icons.AlignBottom />,\n        'space-between': <Icons.SpaceBetweenVertically />,\n        stretch: <Icons.SpaceBetweenVertically />,\n    },\n};\n\nconst ICON_SELECTION = ['justifyContent', 'alignItems'];\n\nconst SelectInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n\n        useEffect(() => {\n            if (!editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle]);\n\n        const handleValueChange = (newValue: string) => {\n            if (!newValue) {\n                return;\n            }\n            setValue(newValue);\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const getFlexDirection = () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return 'row'; // default to row\n            }\n            return selectedStyle.styles?.['flexDirection'] ?? 'row'; // fallback to row if undefined\n        };\n\n        const getIcon = (option: string) => {\n            const flexDirection = getFlexDirection();\n            if (elementStyle.key === 'justifyContent') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option];\n            } else if (elementStyle.key === 'alignItems') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option];\n            }\n            const icon = OVERRIDE_ICONS[option];\n            if (typeof icon === 'object' && !React.isValidElement(icon)) {\n                return null;\n            }\n            return icon || option;\n        };\n\n        if (!elementStyle.params?.options) {\n            return null;\n        }\n\n        if (elementStyle.params.options.length <= 3 || ICON_SELECTION.includes(elementStyle.key)) {\n            return (\n                <ToggleGroup\n                    className={`w-32 overflow-hidden ${\n                        ICON_SELECTION.includes(elementStyle.key) ? 'gap-0.75' : ''\n                    }`}\n                    size=\"sm\"\n                    type=\"single\"\n                    value={value}\n                    onValueChange={handleValueChange}\n                >\n                    {elementStyle.params?.options.map((option) => (\n                        <ToggleGroupItem\n                            className=\"capitalize text-xs data-[state=on]:bg-background-onlook/75 data-[state=on]:text-foreground-active hover:text-foreground-hover\"\n                            value={option}\n                            key={option}\n                        >\n                            {getIcon(option)}\n                        </ToggleGroupItem>\n                    ))}\n                </ToggleGroup>\n            );\n        }\n\n        return (\n            <div className=\"relative w-32\">\n                <select\n                    name={elementStyle.displayName}\n                    value={value}\n                    className=\"p-[6px] w-full px-2 text-start rounded border-none text-xs text-active bg-background-onlook/75 appearance-none focus:outline-none focus:ring-0 capitalize\"\n                    onChange={(event) => handleValueChange(event.currentTarget.value)}\n                >\n                    {!elementStyle.params.options.includes(value) && (\n                        <option value={value}>{value}</option>\n                    )}\n                    {elementStyle.params.options.map((option) => (\n                        <option value={option} key={option}>\n                            {OVERRIDE_OPTIONS[option] ?? option}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"text-foreground-onlook absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                    <Icons.ChevronDown />\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default SelectInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TagDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/AutoComplete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":435,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":437,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":458,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":460,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":535,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":537,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":558,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":560,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { StyleMode } from '@/lib/editor/engine/style';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models/code';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { ClassParsingResult, DomElement } from '@onlook/models/element';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport { AutoComplete, type SuggestionsListRef } from './AutoComplete';\n\ninterface History {\n    past: string[];\n    present: string;\n    future: string[];\n    error?: string;\n}\n\nconst TailwindInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const suggestionRef = useRef<SuggestionsListRef>(null);\n    const [showSuggestions, setShowSuggestions] = useState(true);\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n    let resizeObserver: ResizeObserver | undefined;\n\n    const instanceRef = useRef<HTMLTextAreaElement>(null);\n    const [instanceHistory, setInstanceHistory] = useState<History>({\n        past: [],\n        present: '',\n        future: [],\n    });\n    const [isInstanceFocused, setIsInstanceFocused] = useState(false);\n\n    const rootRef = useRef<HTMLTextAreaElement>(null);\n    const [rootHistory, setRootHistory] = useState<History>({\n        past: [],\n        present: '',\n        future: [],\n    });\n    const [isRootFocused, setIsRootFocused] = useState(false);\n\n    const updateHistory = (\n        value: string,\n        { past, present }: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        setHistory({\n            past: [...past, present],\n            present: value,\n            future: [],\n        });\n    };\n\n    const didChangeFromOriginal = (history: History, value: string) => {\n        if (history.past.length === 0) {\n            return false;\n        }\n        return history.past?.[0] !== value;\n    };\n\n    const undo = (history: History, setHistory: React.Dispatch<React.SetStateAction<History>>) => {\n        const { past, present, future } = history;\n        if (past.length === 0) {\n            return;\n        }\n\n        const previous = past[past.length - 1];\n        const newPast = past.slice(0, past.length - 1);\n\n        setHistory({\n            past: newPast,\n            present: previous,\n            future: [present, ...future],\n        });\n    };\n\n    const redo = (history: History, setHistory: React.Dispatch<React.SetStateAction<History>>) => {\n        const { past, present, future } = history;\n        if (future.length === 0) {\n            return;\n        }\n\n        const next = future[0];\n        const newFuture = future.slice(1);\n\n        setHistory({\n            past: [...past, present],\n            present: next,\n            future: newFuture,\n        });\n    };\n\n    const handleKeyDown = (\n        e: React.KeyboardEvent<HTMLTextAreaElement>,\n        history: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        if (showSuggestions) {\n            suggestionRef.current?.handleKeyDown(e);\n            return;\n        }\n\n        if (e.key === 'Enter' || e.key === 'Tab' || e.key === 'Escape') {\n            e.currentTarget.blur();\n            e.preventDefault();\n            return;\n        }\n\n        if ((e.metaKey || e.ctrlKey) && e.key === 'z') {\n            e.preventDefault();\n            if (e.shiftKey) {\n                redo(history, setHistory);\n            } else {\n                undo(history, setHistory);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            if (!isInstanceFocused) {\n                getInstanceClasses(selectedEl);\n            }\n            if (!isRootFocused) {\n                getRootClasses(selectedEl);\n            }\n        } else {\n            setSelectedEl(undefined);\n            setInstanceHistory({ past: [], present: '', future: [] });\n            setRootHistory({ past: [], present: '', future: [] });\n        }\n    }, [\n        editorEngine.elements.selected,\n        editorEngine.ast.mappings.layers,\n        editorEngine.history.length,\n    ]);\n\n    async function getInstanceClasses(domEl: DomElement) {\n        const newInstance = await editorEngine.ast.getTemplateNodeById(domEl.instanceId);\n\n        if (newInstance) {\n            const instanceClasses: ClassParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_CLASS,\n                newInstance,\n            );\n\n            if (instanceClasses.type === 'error') {\n                console.warn(instanceClasses.reason);\n            }\n\n            setInstanceHistory({\n                past: [],\n                present:\n                    instanceClasses.type === 'classes'\n                        ? instanceClasses.value.join(' ')\n                        : instanceClasses.type,\n                future: [],\n                error: instanceClasses.type === 'error' ? instanceClasses.reason : undefined,\n            });\n        }\n    }\n\n    async function getRootClasses(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootClasses: ClassParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_CLASS,\n                newRoot,\n            );\n\n            if (rootClasses.type === 'error') {\n                console.warn(rootClasses.reason);\n            }\n\n            setRootHistory({\n                past: [],\n                present:\n                    rootClasses.type === 'classes' ? rootClasses.value.join(' ') : rootClasses.type,\n                future: [],\n                error: rootClasses.type === 'error' ? rootClasses.reason : undefined,\n            });\n        }\n    }\n\n    async function getPrevRootClasses(domEl: DomElement): Promise<string[]> {\n        try {\n            const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n            if (newRoot) {\n                const rootClasses: ClassParsingResult = await invokeMainChannel(\n                    MainChannels.GET_TEMPLATE_NODE_CLASS,\n                    newRoot,\n                );\n\n                if (rootClasses.type === 'error') {\n                    console.warn(rootClasses.reason);\n                }\n\n                return rootClasses.type === 'classes' ? rootClasses.value : [];\n            }\n            return [];\n        } catch (err) {\n            console.log('erpr ', err);\n            return [];\n        }\n    }\n\n    const createCodeDiffRequest = async (oid: string | undefined, className: string) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n        const selectedElements = editorEngine.elements.selected;\n        const selectedElprevClasses = await getPrevRootClasses(selectedElements[0]);\n        const computedClass = compareClassNames(selectedElprevClasses, className.split(' '));\n\n        for (const ele of selectedElements) {\n            let computedClassName: string = '';\n            const isNonSelectedElement = ele.oid !== oid;\n\n            if (isNonSelectedElement) {\n                const prevClasses = await getPrevRootClasses(ele);\n                computedClassName = computeClassForNonSelectedElement(\n                    computedClass.added,\n                    computedClass.removed,\n                    prevClasses,\n                );\n            } else {\n                computedClassName = className;\n            }\n\n            request.push({\n                oid: ele.oid || '',\n                attributes: { className: computedClassName },\n                textContent: null,\n                overrideClasses: true,\n                structureChanges: [],\n            });\n        }\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('tailwind action');\n        }\n    };\n\n    function computeClassForNonSelectedElement(\n        addedClasses: string[],\n        removedClasses: string[],\n        originalClasses: string[],\n    ): string {\n        const finalClasses: string[] = [...originalClasses];\n        let classRemoved: boolean = false;\n\n        if (removedClasses.length > 0) {\n            removedClasses.forEach((cls) => {\n                const index = finalClasses.indexOf(cls);\n                if (index !== -1) {\n                    finalClasses.splice(index, 1);\n                    classRemoved = true;\n                }\n            });\n        }\n\n        if (removedClasses.length > 0 && classRemoved) {\n            addedClasses.forEach((cls) => {\n                if (!finalClasses.includes(cls)) {\n                    finalClasses.push(cls);\n                }\n            });\n        } else {\n            if (removedClasses.length === 0) {\n                addedClasses.forEach((cls) => {\n                    if (!finalClasses.includes(cls)) {\n                        finalClasses.push(cls);\n                    }\n                });\n            }\n        }\n\n        return finalClasses.join(' ');\n    }\n\n    function compareClassNames(\n        oldClasses: string[],\n        newClasses: string[],\n    ): {\n        added: string[];\n        removed: string[];\n    } {\n        const addedClasses = newClasses.filter((cls) => !oldClasses.includes(cls));\n\n        const removedClasses = oldClasses.filter((cls) => !newClasses.includes(cls));\n\n        return {\n            added: addedClasses,\n            removed: removedClasses,\n        };\n    }\n\n    const handleInput = (\n        e: React.FormEvent<HTMLTextAreaElement>,\n        history: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        const { value, selectionStart } = e.currentTarget;\n        updateHistory(value, history, setHistory);\n        suggestionRef.current?.handleInput(value, selectionStart);\n    };\n\n    const adjustHeight = (textarea: HTMLTextAreaElement) => {\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight + 20}px`;\n    };\n\n    const navigateToTemplateNode = async (oid: string | null) => {\n        if (!oid) {\n            console.error('No templateNode ID provided for navigation.');\n            return;\n        }\n\n        try {\n            await window.api.invoke(MainChannels.VIEW_SOURCE_CODE, oid);\n        } catch (error) {\n            console.error('Error opening TemplateNode in IDE:', error);\n        }\n    };\n\n    useEffect(() => {\n        if (instanceRef.current) {\n            adjustHeight(instanceRef.current);\n        }\n    }, [instanceHistory.present]);\n\n    useEffect(() => {\n        if (rootRef.current) {\n            adjustHeight(rootRef.current);\n        }\n\n        if (rootRef.current) {\n            resizeObserver?.disconnect();\n            resizeObserver = new ResizeObserver(() => {\n                adjustHeight(rootRef.current!);\n            });\n            resizeObserver.observe(rootRef.current);\n\n            return () => {\n                resizeObserver?.disconnect();\n            };\n        }\n    }, [rootHistory.present]);\n\n    const EnterIndicator = ({ isInstance = false }: { isInstance?: boolean }) => {\n        return (\n            <div\n                className={cn(\n                    'absolute bottom-1 right-2 text-xs flex items-center',\n                    isInstance\n                        ? 'text-purple-300 dark:text-purple-300 selection:text-purple-50 selection:bg-purple-500/50 dark:selection:text-purple-50 dark:selection:bg-purple-500/50'\n                        : 'text-gray-500 selection:bg-gray-200 dark:selection:bg-gray-700',\n                )}\n            >\n                <span>enter to apply</span>\n                <Icons.Return className=\"ml-0.5\" />\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2 text-xs text-foreground-onlook shadow-none\">\n            {selectedEl?.oid && (\n                <div className=\"relative\">\n                    <div className=\"group cursor-pointer\">\n                        {selectedEl.instanceId && (\n                            <Tooltip>\n                                <TooltipTrigger asChild>\n                                    <button\n                                        className={cn(\n                                            'w-full flex items-center rounded-t h-6 px-1.5 gap-1 transition-colors border-[0.5px]',\n                                            editorEngine.style.mode === StyleMode.Root\n                                                ? 'bg-background-primary text-foreground-active border-background-tertiary'\n                                                : 'bg-background-secondary text-foreground-muted border-background-secondary group-hover:bg-background-primary/20 group-hover:text-foreground-active group-hover:border-background-tertiary/90 cursor-pointer',\n                                        )}\n                                        onClick={() => {\n                                            editorEngine.style.mode = StyleMode.Root;\n                                            rootRef.current?.focus();\n                                        }}\n                                    >\n                                        <Icons.Component className=\"h-3 w-3\" />{' '}\n                                        {'Main Component Classes'}\n                                    </button>\n                                </TooltipTrigger>\n                                <TooltipPortal container={document.getElementById('style-tab-id')}>\n                                    <TooltipContent>\n                                        {'Changes apply to component code. This is the default.'}\n                                    </TooltipContent>\n                                </TooltipPortal>\n                            </Tooltip>\n                        )}\n                        <Textarea\n                            ref={rootRef}\n                            className={cn(\n                                'w-full text-xs break-normal p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px]',\n                                'transition-colors duration-150',\n                                editorEngine.style.mode === StyleMode.Root\n                                    ? 'bg-background-tertiary text-foreground-active border-background-tertiary cursor-text'\n                                    : 'bg-background-secondary/75 text-foreground-muted border-background-secondary/75 group-hover:bg-background-tertiary/50 group-hover:text-foreground-active group-hover:border-background-tertiary/50 cursor-pointer',\n                                selectedEl.instanceId\n                                    ? 'rounded-t-none'\n                                    : 'bg-background-secondary/75 focus:bg-background-tertiary',\n                            )}\n                            placeholder=\"Add tailwind classes here\"\n                            value={\n                                rootHistory.error\n                                    ? 'Warning: ' + rootHistory.error + ' Open the code to edit.'\n                                    : rootHistory.present\n                            }\n                            readOnly={!!rootHistory.error}\n                            onInput={(e) => handleInput(e, rootHistory, setRootHistory)}\n                            onKeyDown={(e) => handleKeyDown(e, rootHistory, setRootHistory)}\n                            onBlur={(e) => {\n                                setShowSuggestions(false);\n                                setIsRootFocused(false);\n                                selectedEl.oid &&\n                                    didChangeFromOriginal(rootHistory, e.target.value) &&\n                                    createCodeDiffRequest(selectedEl.oid, e.target.value);\n                            }}\n                            onFocus={() => {\n                                editorEngine.style.mode = StyleMode.Root;\n                                setIsRootFocused(true);\n                            }}\n                            onClick={() => {\n                                if (editorEngine.style.mode !== StyleMode.Root) {\n                                    editorEngine.style.mode = StyleMode.Root;\n                                    rootRef.current?.focus();\n                                }\n                            }}\n                        />\n                        {isRootFocused && (\n                            <AutoComplete\n                                ref={suggestionRef}\n                                showSuggestions={showSuggestions}\n                                currentInput={rootHistory.present}\n                                setShowSuggestions={setShowSuggestions}\n                                setCurrentInput={(newValue: string) => {\n                                    updateHistory(newValue, rootHistory, setRootHistory);\n                                    selectedEl.oid &&\n                                        didChangeFromOriginal(rootHistory, newValue) &&\n                                        createCodeDiffRequest(selectedEl.oid, newValue);\n                                }}\n                            />\n                        )}\n                    </div>\n                    {rootHistory.error ? (\n                        <div className=\"absolute bottom-1 right-2 text-xs flex items-center text-blue-500 cursor-pointer\">\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation(); // Prevents unfocusing the textarea\n                                    navigateToTemplateNode(selectedEl?.oid);\n                                }}\n                                className=\"underline\"\n                            >\n                                Go to source\n                            </button>\n                        </div>\n                    ) : (\n                        isRootFocused && <EnterIndicator />\n                    )}\n                </div>\n            )}\n\n            {selectedEl?.instanceId && (\n                <div className=\"relative\">\n                    <div\n                        className={cn(\n                            'group',\n                            editorEngine.style.mode !== StyleMode.Instance && 'cursor-pointer',\n                        )}\n                    >\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <button\n                                    className={cn(\n                                        'w-full flex items-center rounded-t h-6 px-1.5 gap-1 transition-colors border-[0.5px]',\n                                        editorEngine.style.mode === StyleMode.Instance\n                                            ? 'bg-purple-600 text-purple-50 border-purple-600 dark:bg-purple-700 dark:text-purple-50 dark:border-purple-700'\n                                            : 'bg-background-secondary text-foreground-muted border-background-secondary/90 group-hover:bg-purple-200 group-hover:text-purple-900 group-hover:border-purple-200 dark:group-hover:bg-purple-900/50 dark:group-hover:text-purple-100 dark:group-hover:border-purple-900/50',\n                                    )}\n                                    onClick={() => {\n                                        editorEngine.style.mode = StyleMode.Instance;\n                                        instanceRef.current?.focus();\n                                    }}\n                                >\n                                    <Icons.ComponentInstance className=\"h-3 w-3\" /> Instance Classes\n                                </button>\n                            </TooltipTrigger>\n                            <TooltipPortal container={document.getElementById('style-tab-id')}>\n                                <TooltipContent>{'Changes apply to instance code.'}</TooltipContent>\n                            </TooltipPortal>\n                        </Tooltip>\n                        <Textarea\n                            ref={instanceRef}\n                            className={cn(\n                                'w-full text-xs break-normal p-1.5 focus-visible:ring-0 resize-none shadow-none rounded-t-none border-[0.5px]',\n                                'transition-colors duration-150',\n                                editorEngine.style.mode === StyleMode.Instance\n                                    ? 'bg-purple-100 text-purple-900 border-purple-300 dark:bg-purple-900/75 dark:text-purple-100 dark:border-purple-600'\n                                    : 'bg-background-secondary/75 text-foreground-muted border-background-secondary/75 group-hover:bg-purple-100/50 group-hover:text-purple-900 group-hover:border-purple-200 dark:group-hover:bg-purple-900/30 dark:group-hover:text-purple-100 dark:group-hover:border-purple-900/30 cursor-pointer',\n                            )}\n                            placeholder=\"Add tailwind classes here\"\n                            value={\n                                instanceHistory.error\n                                    ? 'Warning: ' +\n                                      instanceHistory.error +\n                                      ' Open the code to edit.'\n                                    : instanceHistory.present\n                            }\n                            readOnly={!!instanceHistory.error}\n                            onInput={(e) => handleInput(e, instanceHistory, setInstanceHistory)}\n                            onKeyDown={(e) => handleKeyDown(e, instanceHistory, setInstanceHistory)}\n                            onBlur={(e) => {\n                                setShowSuggestions(false);\n                                setIsInstanceFocused(false);\n                                selectedEl?.instanceId &&\n                                    didChangeFromOriginal(instanceHistory, e.target.value) &&\n                                    createCodeDiffRequest(selectedEl.instanceId, e.target.value);\n                            }}\n                            onFocus={() => {\n                                editorEngine.style.mode = StyleMode.Instance;\n                                setIsInstanceFocused(true);\n                            }}\n                            onClick={() => {\n                                if (editorEngine.style.mode !== StyleMode.Instance) {\n                                    editorEngine.style.mode = StyleMode.Instance;\n                                    instanceRef.current?.focus();\n                                }\n                            }}\n                        />\n                        {isInstanceFocused && (\n                            <AutoComplete\n                                ref={suggestionRef}\n                                showSuggestions={showSuggestions}\n                                currentInput={instanceHistory.present}\n                                setShowSuggestions={setShowSuggestions}\n                                setCurrentInput={(newValue: string) => {\n                                    updateHistory(newValue, instanceHistory, setInstanceHistory);\n                                    selectedEl?.instanceId &&\n                                        didChangeFromOriginal(instanceHistory, newValue) &&\n                                        createCodeDiffRequest(selectedEl?.instanceId, newValue);\n                                }}\n                            />\n                        )}\n                    </div>\n                    {instanceHistory.error ? (\n                        <div className=\"absolute bottom-1 right-2 text-xs flex items-center text-blue-500 cursor-pointer\">\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation(); // Prevents unfocusing the textarea\n                                    navigateToTemplateNode(selectedEl?.oid);\n                                }}\n                                className=\"underline\"\n                            >\n                                Go to source\n                            </button>\n                        </div>\n                    ) : (\n                        isInstanceFocused && <EnterIndicator />\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default TailwindInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/twClassGen.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TextInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":41,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":41,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    getDefaultUnit,\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { toast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\n\nconst TextInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n        className,\n        disabled,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n        className?: string;\n        disabled?: boolean;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n        const [isFocused, setIsFocused] = useState(false);\n        const [prevValue, setPrevValue] = useState(elementStyle.defaultValue);\n        useEffect(() => {\n            if (isFocused || !editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle, isFocused]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const emitValue = (newValue: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(newValue);\n            const parsedNum = parseFloat(numberVal);\n            const newUnit = getDefaultUnit(unitVal);\n\n            newValue = parsedValueToString(parsedNum.toString(), newUnit);\n\n            const { min, max } = elementStyle.params || {};\n            if (min !== undefined && parsedNum < min) {\n                toast({\n                    title: 'Invalid Input',\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n            if (max !== undefined && parsedNum > max) {\n                toast({\n                    title: 'Invalid Input',\n                    description: `Value for ${elementStyle.displayName} cannot be greater than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            setValue(newValue);\n            sendStyleUpdate(newValue);\n        };\n\n        const handleFocus = () => {\n            setPrevValue(value);\n            setIsFocused(true);\n            editorEngine.history.startTransaction();\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            setIsFocused(false);\n            if (prevValue !== e.currentTarget.value) {\n                emitValue(e.currentTarget.value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n        return (\n            <input\n                type=\"text\"\n                className={cn(\n                    'w-full p-[6px] text-xs px-2 rounded border-none text-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 appearance-none',\n                    className,\n                )}\n                placeholder=\"--\"\n                value={value}\n                onChange={(e) => setValue(e.currentTarget.value)}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                onKeyDown={(e) =>\n                    handleNumberInputKeyDown(e, elementStyle, value, setValue, sendStyleUpdate)\n                }\n                disabled={disabled}\n            />\n        );\n    },\n);\n\nexport default TextInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/HotkeysModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/BrandTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ComponentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/HelpDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/DeleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/RenameModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/LayersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/OpenCodeMini/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/PageTab/PageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/PageTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/NodeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/PageTreeNode.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { PageNode } from '@onlook/models/pages';\nimport {\n    ContextMenu,\n    ContextMenuContent,\n    ContextMenuItem,\n    ContextMenuTrigger,\n} from '@onlook/ui/context-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { motion } from 'motion/react';\nimport { useState } from 'react';\nimport type { NodeApi } from 'react-arborist';\nimport { PageModal } from '../PageTab/PageModal';\ninterface PageTreeNodeProps {\n    node: NodeApi<PageNode>;\n    style: React.CSSProperties;\n}\n\nconst PageTreeNode: React.FC<PageTreeNodeProps> = ({ node, style }) => {\n    const hasChildren = node.data.children && node.data.children.length > 0;\n    const editorEngine = useEditorEngine();\n    const isActive = !hasChildren && editorEngine.pages.isNodeActive(node.data);\n    const [showModal, setShowModal] = useState(false);\n    const [modalMode, setModalMode] = useState<'create' | 'rename'>('create');\n\n    const getBaseName = (fullPath: string) => {\n        return fullPath.split('/').pop() || '';\n    };\n\n    const handleClick = async (e: React.MouseEvent) => {\n        if (hasChildren) {\n            node.toggle();\n            return;\n        }\n\n        const webviewId = editorEngine.webviews.selected?.[0]?.id;\n        if (webviewId) {\n            editorEngine.pages.setActivePath(webviewId, node.data.path);\n        }\n\n        editorEngine.pages.setCurrentPath(node.data.path);\n        node.select();\n\n        await editorEngine.pages.navigateTo(node.data.path);\n    };\n\n    const handleRename = () => {\n        setModalMode('rename');\n        setShowModal(true);\n    };\n\n    const handleCreate = () => {\n        setModalMode('create');\n        setShowModal(true);\n    };\n\n    const handleDelete = async () => {\n        try {\n            await editorEngine.pages.deletePage(\n                node.data.path,\n                node.data.children && node.data.children?.length > 0 ? true : false,\n            );\n        } catch (error) {\n            console.error('Failed to delete page:', error);\n            toast({\n                title: 'Failed to delete page',\n                description: error instanceof Error ? error.message : String(error),\n                variant: 'destructive',\n            });\n        }\n    };\n\n    const handleDuplicate = async () => {\n        try {\n            await editorEngine.pages.duplicatePage(node.data.path, node.data.path);\n\n            toast({\n                title: 'Page duplicated',\n                description: 'Page has been successfully duplicated.',\n                variant: 'default',\n            });\n        } catch (error) {\n            console.error('Failed to duplicate page:', error);\n            toast({\n                title: 'Failed to duplicate page',\n                description: error instanceof Error ? error.message : String(error),\n                variant: 'destructive',\n            });\n        }\n    };\n\n    const menuItems = [\n        {\n            label: 'Create New Page',\n            action: handleCreate,\n            icon: <Icons.File className=\"mr-2 h-4 w-4\" />,\n        },\n        {\n            label: 'Duplicate Page',\n            action: () => {\n                handleDuplicate();\n            },\n            icon: <Icons.Copy className=\"mr-2 h-4 w-4\" />,\n            disabled: node.data.isRoot,\n        },\n        {\n            label: 'Rename',\n            action: handleRename,\n            icon: <Icons.Pencil className=\"mr-2 h-4 w-4\" />,\n            disabled: node.data.isRoot,\n        },\n        {\n            label: 'Delete',\n            action: handleDelete,\n            icon: <Icons.Trash className=\"mr-2 h-4 w-4\" />,\n            destructive: true,\n            disabled: node.data.isRoot,\n        },\n    ];\n\n    return (\n        <>\n            <ContextMenu>\n                <ContextMenuTrigger>\n                    <div\n                        style={style}\n                        className={cn(\n                            'flex items-center h-6 cursor-pointer hover:bg-background-hover rounded',\n                            !hasChildren && isActive && 'bg-red-500 text-white',\n                            isActive && 'hover:bg-red-500',\n                        )}\n                        onClick={handleClick}\n                    >\n                        <span className=\"w-4 h-4 flex-none relative\">\n                            {hasChildren && (\n                                <div className=\"w-4 h-4 flex items-center justify-center absolute z-50\">\n                                    <motion.div\n                                        initial={false}\n                                        animate={{ rotate: node.isOpen ? 90 : 0 }}\n                                    >\n                                        <Icons.ChevronRight className=\"h-2.5 w-2.5\" />\n                                    </motion.div>\n                                </div>\n                            )}\n                        </span>\n                        {!node.data.isRoot &&\n                            (hasChildren ? (\n                                <Icons.Directory className=\"w-4 h-4 mr-2\" />\n                            ) : (\n                                <Icons.File className=\"w-4 h-4 mr-2\" />\n                            ))}\n                        <span>{node.data.name}</span>\n                    </div>\n                </ContextMenuTrigger>\n                <ContextMenuContent>\n                    {menuItems.map((item) => (\n                        <ContextMenuItem\n                            key={item.label}\n                            onClick={item.action}\n                            className=\"cursor-pointer\"\n                            disabled={item.disabled}\n                        >\n                            <span\n                                className={cn(\n                                    'flex w-full items-center gap-1',\n                                    item.destructive && 'text-red',\n                                )}\n                            >\n                                {item.icon}\n\n                                {item.label}\n                            </span>\n                        </ContextMenuItem>\n                    ))}\n                </ContextMenuContent>\n            </ContextMenu>\n\n            <PageModal\n                open={showModal}\n                onOpenChange={setShowModal}\n                mode={modalMode}\n                baseRoute={node.data.path}\n                initialName={modalMode === 'rename' ? getBaseName(node.data.path) : ''}\n            />\n        </>\n    );\n};\n\nexport default observer(PageTreeNode);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/PageTreeRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/TreeNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/TreeRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/DeviceSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":37,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { Theme } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\n\nconst DeviceSettings = ({ settings }: { settings: FrameSettings }) => {\n    const editorEngine = useEditorEngine();\n    const [deviceTheme, setDeviceTheme] = useState(settings.theme);\n\n    useEffect(() => {\n        setDeviceTheme(settings.theme);\n    }, [settings.id]);\n\n    useEffect(() => {\n        const observer = (newSettings: FrameSettings) => {\n            if (newSettings.theme !== deviceTheme) {\n                setDeviceTheme(newSettings.theme);\n            }\n        };\n\n        editorEngine.canvas.observeSettings(settings.id, observer);\n\n        return editorEngine.canvas.unobserveSettings(settings.id, observer);\n    }, []);\n\n    async function changeTheme(theme: Theme) {\n        const webview = editorEngine.webviews.getWebview(settings.id);\n        if (!webview) {\n            return;\n        }\n\n        const themeValue =\n            theme === Theme.System ? 'device' : theme === Theme.Dark ? 'dark' : 'light';\n\n        webview.executeJavaScript(`window.api?.setTheme(\"${themeValue}\")`).then((res) => {\n            setDeviceTheme(theme);\n        });\n\n        editorEngine.canvas.saveFrame(settings.id, {\n            theme: theme,\n        });\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-smallPlus text-foreground-primary\">Device Settings</p>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Theme</span>\n                <div className=\"flex flex-row p-0.5 w-3/5 bg-background-secondary rounded\">\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.System\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.System)}\n                    >\n                        <Icons.Laptop />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.Dark\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.Dark)}\n                    >\n                        <Icons.Moon />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.Light\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.Light)}\n                    >\n                        <Icons.Sun />\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DeviceSettings;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/FrameDimensions.tsx","messages":[{"ruleId":"no-unsafe-optional-chaining","severity":2,"message":"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.","line":128,"column":45,"nodeType":"ChainExpression","messageId":"unsafeOptionalChain","endLine":128,"endColumn":101},{"ruleId":"no-unsafe-optional-chaining","severity":2,"message":"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.","line":146,"column":45,"nodeType":"ChainExpression","messageId":"unsafeOptionalChain","endLine":146,"endColumn":101}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { DefaultSettings, Orientation } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Input } from '@onlook/ui/input';\nimport {\n    Select,\n    SelectContent,\n    SelectGroup,\n    SelectItem,\n    SelectLabel,\n    SelectTrigger,\n    SelectValue,\n} from '@onlook/ui/select';\nimport { Separator } from '@onlook/ui/separator';\nimport { Fragment, useEffect, useState } from 'react';\n\ntype DeviceOptions = {\n    [category: string]: {\n        [deviceName: string]: string;\n    };\n};\n\nconst deviceOptions: DeviceOptions = {\n    Custom: {\n        Custom: 'Custom',\n    },\n    Phone: {\n        'Android Compact': '412x917',\n        'Android Medium': '700x840',\n        'Android Small': '360x640',\n        'Android Large': '360x800',\n        'iPhone 16': '393x852',\n        'iPhone 16 Pro': '402x874',\n        'iPhone 16 Pro Max': '440x956',\n        'iPhone 16 Plus': '430x932',\n        'iPhone 14 & 15 Pro': '430x932',\n        'iPhone 14 & 15': '393x852',\n        'iPhone 13 & 14': '390x844',\n        'iPhone 13 Pro Max': '428x926',\n        'iPhone 13 / 13 Pro': '390x844',\n        'iPhone 11 Pro Max': '414x896',\n        'iPhone 11 Pro / X': '375x812',\n        'iPhone 8 Plus': '414x736',\n        'iPhone 8': '375x667',\n        'iPhone SE': '320x568',\n    },\n    Tablet: {\n        'Android Expanded': '1280x800',\n        'Surface Pro 8': '1440x960',\n        'Surface Pro 4': '1368x912',\n        'iPad Mini 8.3': '744x1133',\n        'iPad Mini 5': '768x1024',\n        'iPad Pro 11': '834x1194',\n        'iPad Pro 12.9': '1024x1366',\n    },\n    Laptop: {\n        'MacBook Air': '1280x832',\n        MacBook: '1152x700',\n        'MacBook Pro 14': '1512x982',\n        'MacBook Pro 16': '1728x1117',\n        'MacBook Pro': '1440x900',\n        'Surface Book': '1500x1000',\n    },\n    Desktop: {\n        Desktop: '1440x1024',\n        Wireframe: '1440x1024',\n        TV: '1280x720',\n        iMac: '1280x720',\n    },\n};\n\nconst FrameDimensions = ({ settings }: { settings: FrameSettings }) => {\n    const editorEngine = useEditorEngine();\n    const [device, setDevice] = useState(settings.device || DefaultSettings.DEVICE);\n    const [orientation, setOrientation] = useState(\n        settings.orientation || DefaultSettings.ORIENTATION,\n    );\n    const [width, setWidth] = useState(\n        settings.dimension.width || DefaultSettings.FRAME_DIMENSION.width,\n    );\n    const [height, setHeight] = useState(\n        settings.dimension.height || DefaultSettings.FRAME_DIMENSION.height,\n    );\n    // const [responsive, setResponsive] = useState('Closest Size');\n    const [aspectRatioLocked, setAspectRatioLocked] = useState(\n        settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n    );\n    const [aspectRatio, setAspectRatio] = useState(width / height);\n    const [step, setStep] = useState(1);\n    const [minDimensionsAspectRatio, setMinDimensionsAspectRatio] = useState({\n        height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n        width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n    });\n\n    useEffect(() => {\n        const observer = (newSettings: FrameSettings) => {\n            if (newSettings.dimension.width !== width) {\n                setWidth(newSettings.dimension.width);\n            }\n            if (newSettings.dimension.height !== height) {\n                setHeight(newSettings.dimension.height);\n            }\n        };\n\n        editorEngine.canvas.observeSettings(settings.id, observer);\n\n        return editorEngine.canvas.unobserveSettings(settings.id, observer);\n    }, []);\n\n    useEffect(() => {\n        setDevice(settings.device || DefaultSettings.DEVICE);\n        setOrientation(settings.orientation || DefaultSettings.ORIENTATION);\n        setWidth(settings.dimension.width || DefaultSettings.FRAME_DIMENSION.width);\n        setHeight(settings.dimension.height || DefaultSettings.FRAME_DIMENSION.height);\n        setAspectRatioLocked(settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED);\n    }, [settings.id]);\n\n    useEffect(() => {\n        const [deviceCategory, deviceName] = device.split(':');\n        if (deviceName === 'Custom') {\n            editorEngine.canvas.saveFrame(settings.id, {\n                device: device,\n            });\n            return;\n        }\n        const [deviceWidth, deviceHeight] = deviceOptions?.[deviceCategory]?.[deviceName].split('x');\n        if (width === parseInt(deviceHeight) && height === parseInt(deviceWidth)) {\n            return;\n        } else {\n            setWidth(parseInt(deviceWidth));\n            setHeight(parseInt(deviceHeight));\n            editorEngine.canvas.saveFrame(settings.id, {\n                dimension: { width: parseInt(deviceWidth), height: parseInt(deviceHeight) },\n                device: device,\n            });\n            if (aspectRatioLocked) {\n                setAspectRatio(parseInt(deviceWidth) / parseInt(deviceHeight));\n            }\n        }\n    }, [device]);\n\n    useEffect(() => {\n        const [deviceCategory, deviceName] = device.split(':');\n        const [deviceWidth, deviceHeight] = deviceOptions?.[deviceCategory]?.[deviceName].split('x');\n\n        if (\n            deviceName !== 'Custom' &&\n            ((width !== parseInt(deviceWidth) && width !== parseInt(deviceHeight)) ||\n                (height !== parseInt(deviceHeight) && height !== parseInt(deviceWidth)))\n        ) {\n            setDevice('Custom:Custom');\n        }\n        if (height > width && orientation !== Orientation.Potrait && !aspectRatioLocked) {\n            setOrientation(Orientation.Potrait);\n        }\n        if (width > height && orientation !== Orientation.Landscape && !aspectRatioLocked) {\n            setOrientation(Orientation.Landscape);\n        }\n\n        editorEngine.canvas.saveFrame(settings.id, {\n            dimension: { width: width, height: height },\n        });\n    }, [height, width]);\n\n    useEffect(() => {\n        setAspectRatio(width / height);\n        if (aspectRatioLocked) {\n            setMinDimensionsAspectRatio({\n                height: Math.max(\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                    Math.floor(parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio),\n                ),\n                width: Math.max(\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                    Math.floor(parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio),\n                ),\n            });\n        } else {\n            setMinDimensionsAspectRatio({\n                height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n            });\n        }\n        editorEngine.canvas.saveFrame(settings.id, {\n            aspectRatioLocked: aspectRatioLocked,\n        });\n    }, [aspectRatioLocked]);\n\n    useEffect(() => {\n        editorEngine.canvas.saveFrame(settings.id, {\n            orientation: orientation,\n        });\n    }, [orientation]);\n\n    const handleOrientationChange = () => {\n        if (\n            width >= parseInt(DefaultSettings.MIN_DIMENSIONS.width) &&\n            height >= parseInt(DefaultSettings.MIN_DIMENSIONS.height)\n        ) {\n            setHeight(width);\n            setWidth(height);\n            setOrientation(\n                orientation === Orientation.Landscape ? Orientation.Potrait : Orientation.Landscape,\n            );\n        }\n    };\n\n    const handleDimensionInput = (\n        event: React.ChangeEvent<HTMLInputElement>,\n        dimension: string,\n    ) => {\n        const value = event.target.value;\n        if (dimension === 'width') {\n            setWidth(parseInt(value));\n            if (aspectRatioLocked) {\n                setHeight(Math.floor(parseInt(value) / aspectRatio));\n            }\n        } else if (dimension === 'height') {\n            setHeight(parseInt(value));\n            if (aspectRatioLocked) {\n                setWidth(Math.floor(parseInt(value) * aspectRatio));\n            }\n        }\n    };\n\n    const handleDimensionKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.shiftKey) {\n            setStep(10);\n        }\n    };\n\n    const handleDimensionKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.shiftKey) {\n            setStep(1);\n        }\n    };\n\n    const handleDimensionInputBlur = (\n        event: React.FocusEvent<HTMLInputElement>,\n        dimension: string,\n    ) => {\n        const value = event.target.value;\n        if (dimension === 'width') {\n            if (aspectRatioLocked) {\n                if (\n                    parseInt(value) / aspectRatio <\n                        parseInt(DefaultSettings.MIN_DIMENSIONS.height) ||\n                    parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.width)\n                ) {\n                    const dimensionsAspectRatio =\n                        aspectRatio >= 1\n                            ? {\n                                  height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                                  width: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio,\n                                  ),\n                              }\n                            : {\n                                  height: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio,\n                                  ),\n                                  width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                              };\n                    setHeight(dimensionsAspectRatio.height);\n                    setWidth(dimensionsAspectRatio.width);\n                }\n            } else if (parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                event.target.value = parseInt(DefaultSettings.MIN_DIMENSIONS.width).toString();\n                setWidth(parseInt(DefaultSettings.MIN_DIMENSIONS.width));\n            }\n        } else if (dimension === 'height') {\n            if (aspectRatioLocked) {\n                if (\n                    parseInt(value) * aspectRatio <\n                        parseInt(DefaultSettings.MIN_DIMENSIONS.width) ||\n                    parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.height)\n                ) {\n                    const dimensionsAspectRatio =\n                        aspectRatio >= 1\n                            ? {\n                                  height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                                  width: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio,\n                                  ),\n                              }\n                            : {\n                                  height: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio,\n                                  ),\n                                  width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                              };\n                    setHeight(dimensionsAspectRatio.height);\n                    setWidth(dimensionsAspectRatio.width);\n                }\n            } else if (parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                event.target.value = parseInt(DefaultSettings.MIN_DIMENSIONS.height).toString();\n                setHeight(parseInt(DefaultSettings.MIN_DIMENSIONS.height));\n            }\n        }\n    };\n\n    const handleAspectRatioLock = () => {\n        setAspectRatioLocked((prev) => !prev);\n        editorEngine.canvas.saveFrame(settings.id, {\n            aspectRatioLocked: !aspectRatioLocked,\n        });\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-smallPlus text-foreground-primary\">Frame Dimensions</p>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Device</span>\n                <Select value={device} onValueChange={setDevice}>\n                    <SelectTrigger className=\"w-3/5 bg-background-secondary border-background-secondary py-1.5 px-2 h-fit text-xs rounded focus:outline-none focus:ring-0\">\n                        <SelectValue placeholder=\"Select device\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"rounded-md bg-background-secondary\">\n                        {Object.entries(deviceOptions).map(([category, devices], index) =>\n                            category !== 'Custom' ? (\n                                <Fragment key={index}>\n                                    <SelectGroup key={index}>\n                                        <SelectLabel>{category}</SelectLabel>\n                                        {Object.entries(devices).map(([deviceName], index) => (\n                                            <SelectItem\n                                                key={index}\n                                                value={category + ':' + deviceName}\n                                                className=\"focus:bg-background-tertiary rounded-md text-xs cursor-pointer\"\n                                            >\n                                                {deviceName}\n                                            </SelectItem>\n                                        ))}\n                                    </SelectGroup>\n                                    {index < Object.entries(deviceOptions).length - 1 && (\n                                        <Separator className=\"text-white\" />\n                                    )}\n                                </Fragment>\n                            ) : (\n                                <SelectItem\n                                    key={'Custom'}\n                                    value={'Custom:Custom'}\n                                    className=\"focus:bg-background-tertiary rounded-md text-xs cursor-pointer\"\n                                >\n                                    {'Custom'}\n                                </SelectItem>\n                            ),\n                        )}\n                    </SelectContent>\n                </Select>\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Orientation</span>\n                <div className=\"flex flex-row p-0.5 w-3/5 bg-background-secondary rounded\">\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${orientation === Orientation.Potrait ? 'bg-background-tertiary hover:bg-background-tertiary' : 'hover:bg-background-tertiary/50'}`}\n                        variant={'ghost'}\n                        onClick={handleOrientationChange}\n                    >\n                        <Icons.Potrait\n                            className={`h-4 w-4 ${orientation !== Orientation.Potrait ? 'text-foreground-secondary hover:text-foreground-onlook' : ''}`}\n                        />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${orientation === 'Landscape' ? 'bg-background-tertiary hover:bg-background-tertiary' : 'hover:bg-background-tertiary/50'}`}\n                        variant={'ghost'}\n                        onClick={handleOrientationChange}\n                    >\n                        <Icons.Landscape\n                            className={`h-4 w-4 ${orientation !== Orientation.Landscape ? 'text-foreground-secondary hover:text-foreground-onlook' : ''}`}\n                        />\n                    </Button>\n                </div>\n            </div>\n            <div className=\"flex flex-row justify-between items-center relative\">\n                <span className=\"text-xs text-foreground-secondary\">Width</span>\n                <Icons.CornerTopLeft\n                    className=\"absolute h-4 w-4 text-foreground-quadranary top-3 left-16 cursor-pointer z-50\"\n                    onClick={handleAspectRatioLock}\n                />\n                {aspectRatioLocked ? (\n                    <Icons.LockClosed\n                        className=\"absolute h-3 w-3 text-foreground-primary top-[30px] left-[61.5px] cursor-pointer z-50\"\n                        onClick={handleAspectRatioLock}\n                    />\n                ) : (\n                    <Icons.LockOpen\n                        className=\"absolute h-3 w-3 text-foreground-primary top-[30px] left-[61.5px] cursor-pointer z-50\"\n                        onClick={handleAspectRatioLock}\n                    />\n                )}\n\n                <div className=\"relative w-3/5\">\n                    <Input\n                        className=\"w-full px-2 h-8 text-xs rounded border-none text-foreground-active bg-background-secondary text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                        value={width}\n                        min={minDimensionsAspectRatio.width}\n                        type=\"number\"\n                        step={step}\n                        onChange={(event) => handleDimensionInput(event, 'width')}\n                        onKeyDown={(event) => handleDimensionKeyDown(event)}\n                        onKeyUp={(event) => handleDimensionKeyUp(event)}\n                        onBlur={(event) => handleDimensionInputBlur(event, 'width')}\n                    />\n                    <p className=\"p-0 h-fit w-fit absolute right-2 top-1/2 transform -translate-y-1/2 text-foreground-secondary text-xs\">\n                        px\n                    </p>\n                </div>\n            </div>\n            <div className=\"flex flex-row justify-between items-center relative\">\n                <span className=\"text-xs text-foreground-secondary\">Height</span>\n                <Icons.CornerBottomLeft\n                    className=\"absolute h-4 w-4 text-foreground-quadranary bottom-3 left-16 cursor-pointer z-50\"\n                    onClick={() => setAspectRatioLocked((prev) => !prev)}\n                />\n                <div className=\"relative w-3/5\">\n                    <Input\n                        className=\"w-full px-2 h-8 text-xs rounded border-none text-foreground-active bg-background-secondary text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                        value={height}\n                        min={minDimensionsAspectRatio.height}\n                        type=\"number\"\n                        step={step}\n                        onChange={(event) => handleDimensionInput(event, 'height')}\n                        onKeyDown={(event) => handleDimensionKeyDown(event)}\n                        onKeyUp={(event) => handleDimensionKeyUp(event)}\n                        onBlur={(event) => handleDimensionInputBlur(event, 'height')}\n                    />\n                    <p className=\"p-0 h-fit w-fit absolute right-2 top-1/2 transform -translate-y-1/2 text-foreground-secondary text-xs\">\n                        px\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FrameDimensions;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ZoomControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/RightClickMenu/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Base.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/Verification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":88,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { invokeMainChannel } from '@/lib/utils';\nimport {\n    FREESTYLE_IP_ADDRESS,\n    FRESTYLE_CUSTOM_HOSTNAME,\n    MainChannels,\n} from '@onlook/models/constants';\nimport type {\n    CreateDomainVerificationResponse,\n    VerifyDomainResponse,\n} from '@onlook/models/hosting';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { getValidUrl } from '@onlook/utility';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\n\nenum VerificationStatus {\n    NO_DOMAIN = 'no_domain',\n    VERIFYING = 'verifying',\n    VERIFIED = 'verified',\n    LOADING = 'loading',\n}\n\ninterface DNSRecord {\n    type: 'A' | 'CNAME' | 'TXT';\n    host: string;\n    value: string;\n}\n\nexport const Verification = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const domainsManager = projectsManager.domains;\n\n    const [status, setStatus] = useState(VerificationStatus.NO_DOMAIN);\n    const [domain, setDomain] = useState('');\n    const [records, setRecords] = useState<DNSRecord[]>([]);\n    const [error, setError] = useState<string | null>();\n    const [ownedDomains, setOwnedDomains] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (domainsManager) {\n            domainsManager.getOwnedDomains().then((domains) => {\n                setOwnedDomains(domains);\n            });\n        }\n    }, [editorEngine.isSettingsOpen]);\n\n    function editDomain() {\n        setStatus(VerificationStatus.NO_DOMAIN);\n        setRecords([]);\n    }\n\n    function validateDomain(): string | false {\n        if (!domain) {\n            setError('Domain is required');\n            return false;\n        }\n\n        try {\n            const url = new URL(getValidUrl(domain.trim()));\n            const hostname = url.hostname.toLowerCase();\n\n            // Split hostname into parts and ensure only two parts (domain + TLD)\n            const parts = hostname.split('.');\n            if (parts.length !== 2) {\n                setError('Please enter a domain without subdomains (e.g., example.com)');\n                return false;\n            }\n\n            // Basic domain validation regex for the final format\n            const domainRegex = /^[a-z0-9]+(-[a-z0-9]+)*\\.[a-z]{2,}$/;\n            if (!domainRegex.test(hostname)) {\n                setError('Please enter a valid domain name (e.g., example.com)');\n                return false;\n            }\n\n            setError(null);\n            return hostname;\n        } catch (err) {\n            setError('Invalid domain format');\n            return false;\n        }\n    }\n\n    async function setupDomain() {\n        const validDomain = validateDomain();\n        if (!validDomain) {\n            return;\n        }\n\n        setDomain(validDomain);\n        setStatus(VerificationStatus.LOADING);\n\n        // Send verification request to server\n        const response: CreateDomainVerificationResponse = await invokeMainChannel(\n            MainChannels.CREATE_DOMAIN_VERIFICATION,\n            {\n                domain: validDomain,\n            },\n        );\n\n        if (!response.success || !response.verificationCode) {\n            setError(response.message ?? 'Failed to create domain verification');\n            setStatus(VerificationStatus.NO_DOMAIN);\n            return;\n        }\n\n        setStatus(VerificationStatus.VERIFYING);\n        const verificationRecord = getVerificationRecord(validDomain, response.verificationCode);\n        const aRecords = getARecords();\n        setRecords([verificationRecord, ...aRecords]);\n        setError(null);\n    }\n\n    async function verifyDomain() {\n        setStatus(VerificationStatus.LOADING);\n        const response: VerifyDomainResponse = await invokeMainChannel(MainChannels.VERIFY_DOMAIN, {\n            domain: domain,\n        });\n\n        if (!response.success) {\n            setError(response.message ?? 'Failed to verify domain');\n            setStatus(VerificationStatus.VERIFYING);\n            return;\n        }\n\n        setStatus(VerificationStatus.VERIFIED);\n        setError(null);\n        addCustomDomain(domain);\n    }\n\n    const addCustomDomain = (url: string) => {\n        if (!domainsManager) {\n            setError('Failed to add custom domain');\n            return;\n        }\n        domainsManager.addCustomDomainToProject(url);\n        setStatus(VerificationStatus.VERIFIED);\n        setDomain(url);\n        setError(null);\n    };\n\n    function removeDomain() {\n        setStatus(VerificationStatus.NO_DOMAIN);\n        setDomain('');\n        setRecords([]);\n    }\n\n    function getVerificationRecord(domain: string, verificationCode: string) {\n        const verificationRecord: DNSRecord = {\n            type: 'TXT',\n            host: `${FRESTYLE_CUSTOM_HOSTNAME}.${domain}`,\n            value: verificationCode,\n        };\n        return verificationRecord;\n    }\n\n    function getARecords() {\n        const aRecords: DNSRecord[] = [];\n        const apexRecord: DNSRecord = {\n            type: 'A',\n            host: '@',\n            value: FREESTYLE_IP_ADDRESS,\n        };\n\n        const wwwRecord: DNSRecord = {\n            type: 'A',\n            host: 'www',\n            value: FREESTYLE_IP_ADDRESS,\n        };\n\n        aRecords.push(apexRecord, wwwRecord);\n        return aRecords;\n    }\n\n    function renderExistingDomains() {\n        if (ownedDomains.length === 0 || status !== VerificationStatus.NO_DOMAIN) {\n            return null;\n        }\n        return (\n            <div className=\"flex flex-col gap-2 flex-1\">\n                {ownedDomains.map((domain) => (\n                    <div\n                        key={domain}\n                        className=\"flex items-center text-small text-muted-foreground\"\n                    >\n                        <p>{domain}</p>\n                        <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"ml-auto\"\n                            onClick={() => {\n                                addCustomDomain(domain);\n                            }}\n                        >\n                            Use Domain\n                        </Button>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    function renderNoDomainInput() {\n        return (\n            <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-start gap-2\">\n                    <div className=\"w-1/3\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Custom URL</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Input your domain{' '}\n                            {status === VerificationStatus.NO_DOMAIN && ownedDomains.length > 0\n                                ? 'or reuse previous'\n                                : ''}\n                        </p>\n                    </div>\n                    <div className=\"flex flex-col gap-4 flex-1\">\n                        <div className=\"flex gap-2\">\n                            <Input\n                                disabled={status !== VerificationStatus.NO_DOMAIN}\n                                value={domain}\n                                onChange={(e) => setDomain(e.target.value)}\n                                placeholder=\"example.com\"\n                                className=\"bg-background placeholder:text-muted-foreground\"\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        setupDomain();\n                                    }\n                                }}\n                            />\n                            <Button\n                                onClick={() => {\n                                    if (status === VerificationStatus.NO_DOMAIN) {\n                                        setupDomain();\n                                    } else {\n                                        editDomain();\n                                    }\n                                }}\n                                variant=\"secondary\"\n                                size=\"sm\"\n                                className=\"h-8 text-sm\"\n                                disabled={status === VerificationStatus.LOADING}\n                            >\n                                {status === VerificationStatus.LOADING && (\n                                    <Icons.Shadow className=\"h-4 w-4 animate-spin mr-2\" />\n                                )}\n                                {status === VerificationStatus.NO_DOMAIN ? 'Setup' : 'Edit'}\n                            </Button>\n                        </div>\n                        {renderExistingDomains()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    function renderConfigureHeader() {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Configure</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Your DNS records must be set up with these values.\n                        </p>\n                    </div>\n                    <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        className=\"h-8 px-3 text-sm\"\n                        onClick={verifyDomain}\n                        disabled={status === VerificationStatus.LOADING}\n                    >\n                        {status === VerificationStatus.LOADING && (\n                            <Icons.Shadow className=\"h-4 w-4 animate-spin mr-2\" />\n                        )}\n                        Verify Setup\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    function renderVerifiedHeader() {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Verified</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Your domain is verified and ready to use.\n                        </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <div className=\"flex items-center gap-1\">\n                            <Icons.CheckCircled className=\"h-4 w-4 text-green-500\" />\n                            <span className=\"text-xs text-muted-foreground\">Verified</span>\n                        </div>\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                    <Icons.DotsVertical className=\"h-4 w-4\" />\n                                </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem className=\"hover:bg-muted focus:bg-muted cursor-pointer hidden\">\n                                    <Icons.Reset className=\"mr-2 h-4 w-4\" />\n                                    Reconfigure DNS\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                    onClick={removeDomain}\n                                    className=\"hover:bg-destructive/10 focus:bg-destructive/10 text-red-500 cursor-pointer\"\n                                >\n                                    <Icons.Trash className=\"mr-2 h-4 w-4\" />\n                                    Remove Domain\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    function renderRecords() {\n        if (records.length === 0) {\n            return null;\n        }\n        return (\n            <div className=\"grid grid-cols-7 gap-4 rounded-lg border p-4\">\n                <div className=\"text-sm font-medium col-span-1\">Type</div>\n                <div className=\"text-sm font-medium col-span-3\">Host</div>\n                <div className=\"text-sm font-medium col-span-3\">Value</div>\n\n                {records.map((record) => (\n                    <>\n                        <p className=\"text-sm col-span-1 overflow-auto\">{record.type}</p>\n                        <p className=\"text-sm col-span-3 overflow-auto\">{record.host}</p>\n                        <p className=\"text-sm col-span-3 overflow-auto\">{record.value}</p>\n                    </>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            {renderNoDomainInput()}\n            {status === VerificationStatus.VERIFYING && renderConfigureHeader()}\n            {status === VerificationStatus.VERIFIED && renderVerifiedHeader()}\n            {(status === VerificationStatus.VERIFYING || status === VerificationStatus.VERIFIED) &&\n                renderRecords()}\n            {error && <p className=\"text-sm text-red-500\">{error}</p>}\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/Verified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/DangerZone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/UpgradePrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/PreferencesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nextTheme' is assigned a value but never used.","line":22,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleBackButtonClick' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager, useUserManager } from '@/components/Context';\nimport { useTheme } from '@/components/ThemeProvider';\nimport { ProjectTabs } from '@/lib/projects';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { MainChannels, Theme } from '@onlook/models/constants';\nimport { DEFAULT_IDE } from '@onlook/models/ide';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { IDE } from '/common/ide';\n\nconst PreferencesTab = observer(() => {\n    const userManager = useUserManager();\n    const projectsManager = useProjectsManager();\n    const { theme, nextTheme, setTheme } = useTheme();\n    const [isAnalyticsEnabled, setIsAnalyticsEnabled] = useState(false);\n    const [ide, setIde] = useState<IDE>(IDE.fromType(DEFAULT_IDE));\n    const [shouldWarnDelete, setShouldWarnDelete] = useState(true);\n\n    const IDEIcon = Icons[ide.icon];\n\n    useEffect(() => {\n        setIde(IDE.fromType(userManager.settings.settings?.editor?.ideType || DEFAULT_IDE));\n        setIsAnalyticsEnabled(userManager.settings.settings?.enableAnalytics || false);\n        setShouldWarnDelete(userManager.settings.settings?.editor?.shouldWarnDelete ?? true);\n    }, []);\n\n    function updateIde(ide: IDE) {\n        userManager.settings.updateEditor({ ideType: ide.type });\n        setIde(ide);\n    }\n\n    function updateAnalytics(enabled: boolean) {\n        userManager.settings.update({ enableAnalytics: enabled });\n        invokeMainChannel(MainChannels.UPDATE_ANALYTICS_PREFERENCE, enabled);\n        setIsAnalyticsEnabled(enabled);\n    }\n\n    function updateDeleteWarning(enabled: boolean) {\n        userManager.settings.updateEditor({ shouldWarnDelete: enabled });\n        setShouldWarnDelete(enabled);\n    }\n\n    function handleBackButtonClick() {\n        projectsManager.projectsTab = ProjectTabs.PROJECTS;\n    }\n\n    return (\n        <div className=\"flex flex-col gap-8\">\n            <div className=\"flex justify-between items-center\">\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">Theme</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        Choose your preferred appearance\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {theme === Theme.Dark && <Icons.Moon className=\"mr-2 h-4 w-4\" />}\n                            {theme === Theme.Light && <Icons.Sun className=\"mr-2 h-4 w-4\" />}\n                            {theme === Theme.System && <Icons.Laptop className=\"mr-2 h-4 w-4\" />}\n                            <span className=\"capitalize\">{theme}</span>\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => setTheme(Theme.Light)}>\n                            <Icons.Sun className=\"mr-2 h-4 w-4\" />\n                            <span>Light</span>\n                            {theme === Theme.Light && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setTheme(Theme.Dark)}>\n                            <Icons.Moon className=\"mr-2 h-4 w-4\" />\n                            <span>Dark</span>\n                            {theme === Theme.Dark && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setTheme(Theme.System)}>\n                            <Icons.Laptop className=\"mr-2 h-4 w-4\" />\n                            <span>System</span>\n                            {theme === Theme.System && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"flex justify-between items-center\">\n                <p className=\"text-foreground-onlook text-largePlus\">Default Code Editor</p>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"min-w-[150px]\">\n                            <IDEIcon className=\"text-default h-3 w-3 mr-2\" />\n                            <span className=\"smallPlus\">{ide.displayName}</span>\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                        {IDE.getAll().map((item) => {\n                            const ItemIcon = Icons[item.icon];\n                            return (\n                                <DropdownMenuItem\n                                    key={item.displayName}\n                                    className=\"text-smallPlus min-w-[140px]\"\n                                    onSelect={() => {\n                                        updateIde(item);\n                                    }}\n                                >\n                                    <ItemIcon className=\"text-default h-3 w-3 mr-2\" />\n                                    <span>{item.displayName}</span>\n                                    {ide === item && <Icons.CheckCircled className=\"ml-auto\" />}\n                                </DropdownMenuItem>\n                            );\n                        })}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\" flex justify-between items-center gap-4\">\n                <div className=\" flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">{'Warn before delete'}</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        {'This adds a warning before deleting elements in the editor'}\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {shouldWarnDelete ? 'On' : 'Off'}\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"text-smallPlus min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => updateDeleteWarning(true)}>\n                            {'Warning On'}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateDeleteWarning(false)}>\n                            {'Warning Off'}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"flex justify-between items-center gap-4\">\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">Analytics</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        This helps our small team of two know what we need to improve with the\n                        product.\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {isAnalyticsEnabled ? 'On' : 'Off'}\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"text-smallPlus min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => updateAnalytics(true)}>\n                            {'Analytics On'}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateAnalytics(false)}>\n                            {'Analytics Off'}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n        </div>\n    );\n});\n\nexport default PreferencesTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/ProjectTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":13,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'controlledOpen' is defined but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'controlledOnOpenChange' is defined but never used.","line":16,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { DefaultSettings, MainChannels } from '@onlook/models/constants';\nimport type { Project } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { observer } from 'mobx-react-lite';\nimport { useState } from 'react';\n\nconst ProjectTab = observer(\n    ({\n        children,\n        project,\n        open: controlledOpen,\n        onOpenChange: controlledOnOpenChange,\n    }: {\n        children?: React.ReactNode;\n        project?: Project | null;\n        open?: boolean;\n        onOpenChange?: (open: boolean) => void;\n    }) => {\n        const projectsManager = useProjectsManager();\n        const projectToUpdate = project || projectsManager.project;\n        const [formValues, setFormValues] = useState({\n            name: projectToUpdate?.name || '',\n            url: projectToUpdate?.url || '',\n            folderPath: projectToUpdate?.folderPath || '',\n            commands: projectToUpdate?.commands || DefaultSettings.COMMANDS,\n        });\n        const [canSave, setCanSave] = useState(false);\n\n        const handleUpdatePath = async () => {\n            const path = (await invokeMainChannel(MainChannels.PICK_COMPONENTS_DIRECTORY)) as\n                | string\n                | null;\n            if (path) {\n                setFormValues((prev) => ({ ...prev, folderPath: path }));\n                setCanSave(true);\n            }\n        };\n\n        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            const { id, value } = e.target;\n            setFormValues((prev) => {\n                if (id === 'run' || id === 'build' || id === 'install') {\n                    return {\n                        ...prev,\n                        commands: {\n                            ...prev.commands,\n                            [id]: value,\n                        },\n                    };\n                }\n                return {\n                    ...prev,\n                    [id]: value,\n                };\n            });\n            setCanSave(true);\n        };\n\n        const handleSave = () => {\n            if (projectToUpdate) {\n                projectsManager.updateProject({\n                    ...projectToUpdate,\n                    ...formValues,\n                });\n                setCanSave(false);\n            }\n        };\n\n        return (\n            <div className=\"space-y-8\">\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-medium\">Metadata</h2>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Name</p>\n                            <Input\n                                id=\"name\"\n                                value={formValues.name}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">URL</p>\n                            <Input\n                                id=\"url\"\n                                value={formValues.url}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Path</p>\n                            <div className=\"flex items-center gap-2 w-2/3\">\n                                <Input\n                                    id=\"folderPath\"\n                                    value={formValues.folderPath}\n                                    onChange={handleChange}\n                                />\n                                <Button\n                                    size={'icon'}\n                                    variant={'outline'}\n                                    onClick={handleUpdatePath}\n                                >\n                                    <Icons.Directory />\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Add divider */}\n                <div className=\"border-t border-border\" />\n\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-medium\">Commands</h2>\n                    <p className=\"text-small text-foreground-secondary\">\n                        {\" Only update these if you know what you're doing!\"}\n                    </p>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Install</p>\n                            <Input\n                                id=\"install\"\n                                value={\n                                    formValues.commands.install || DefaultSettings.COMMANDS.install\n                                }\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Run</p>\n                            <Input\n                                id=\"run\"\n                                value={formValues.commands.run || DefaultSettings.COMMANDS.run}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Build</p>\n                            <Input\n                                id=\"build\"\n                                value={formValues.commands.build || DefaultSettings.COMMANDS.build}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                    <Button size={'sm'} onClick={handleSave} disabled={!canSave}>\n                        {canSave ? 'Save' : 'Saved'}\n                    </Button>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default ProjectTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/PortWarningModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/RunButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":113,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { useTheme } from '@/components/ThemeProvider';\nimport type { RunManager, TerminalMessage } from '@/lib/projects/run';\nimport { MainChannels } from '@onlook/models/constants';\nimport { RunState } from '@onlook/models/run';\nimport { cn } from '@onlook/ui/utils';\nimport { Terminal as XTerm, type ITheme } from '@xterm/xterm';\nimport '@xterm/xterm/css/xterm.css';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface TerminalProps {\n    hidden?: boolean;\n}\n\nconst TERMINAL_THEME: Record<'LIGHT' | 'DARK', ITheme> = {\n    LIGHT: {\n        background: '#ffffff',\n        foreground: '#2d2d2d',\n        cursor: '#333333',\n        cursorAccent: '#ffffff',\n        black: '#2d2d2d',\n        red: '#d64646',\n        green: '#4e9a06',\n        yellow: '#c4a000',\n        blue: '#3465a4',\n        magenta: '#75507b',\n        cyan: '#06989a',\n        white: '#d3d7cf',\n        brightBlack: '#555753',\n        brightRed: '#ef2929',\n        brightGreen: '#8ae234',\n        brightYellow: '#fce94f',\n        brightBlue: '#729fcf',\n        brightMagenta: '#ad7fa8',\n        brightCyan: '#34e2e2',\n        brightWhite: '#eeeeec',\n        selectionBackground: '#bfbfbf',\n    },\n    DARK: {}, // Use default dark theme\n};\n\nconst Terminal = observer(({ hidden = false }: TerminalProps) => {\n    const terminalRef = useRef<HTMLDivElement>(null);\n    const [terminal, setTerminal] = useState<XTerm | null>(null);\n    const projectsManager = useProjectsManager();\n    const runner = projectsManager.runner;\n    const { theme } = useTheme();\n\n    useEffect(() => {\n        if (terminal) {\n            terminal.options.theme = theme === 'light' ? TERMINAL_THEME.LIGHT : TERMINAL_THEME.DARK;\n        }\n    }, [theme]);\n\n    useEffect(() => {\n        if (!terminalRef.current || !runner || terminal) {\n            return;\n        }\n\n        const { term, terminalDataListener, stateListener } = initTerminal(\n            runner,\n            terminalRef.current,\n        );\n        setTerminal(term);\n\n        return () => {\n            term.dispose();\n            setTerminal(null);\n            window.api.removeListener(MainChannels.TERMINAL_ON_DATA, terminalDataListener);\n            window.api.removeListener(MainChannels.RUN_STATE_CHANGED, stateListener);\n        };\n    }, []);\n\n    function initTerminal(runner: RunManager, container: HTMLDivElement) {\n        const term = new XTerm({\n            cursorBlink: true,\n            fontSize: 12,\n            fontFamily: 'monospace',\n            theme: theme === 'light' ? TERMINAL_THEME.LIGHT : TERMINAL_THEME.DARK,\n            convertEol: true,\n            allowTransparency: true,\n            disableStdin: false,\n            allowProposedApi: true,\n            macOptionIsMeta: true,\n        });\n\n        term.open(container);\n        const { cols, rows } = term;\n        runner.resizeTerminal(cols, rows);\n\n        runner.getHistory().then((history) => {\n            if (history) {\n                term.write(history);\n            }\n        });\n\n        // Set up event listeners\n        term.onData((data) => {\n            runner.handleTerminalInput(data);\n        });\n\n        term.onResize(({ cols, rows }) => {\n            runner.resizeTerminal(cols, rows);\n        });\n\n        const terminalDataListener = (message: TerminalMessage) => {\n            if (message.id === projectsManager.project?.id) {\n                term.write(message.data);\n            }\n        };\n\n        const stateListener = ({ state, message }: { state: RunState; message: string }) => {\n            term.write('\\x1b[96m' + message + '\\x1b[0m\\n');\n        };\n\n        window.api.on(MainChannels.TERMINAL_ON_DATA, terminalDataListener);\n        window.api.on(MainChannels.RUN_STATE_CHANGED, stateListener);\n        return { term, terminalDataListener, stateListener };\n    }\n\n    return (\n        <div\n            className={cn(\n                'bg-background rounded-lg overflow-auto transition-all duration-300',\n                hidden ? 'h-0 w-0 invisible' : 'h-[22rem] w-[37rem]',\n            )}\n        >\n            <div\n                ref={terminalRef}\n                className={cn(\n                    'h-full w-full p-2 transition-opacity duration-200',\n                    hidden ? 'opacity-0' : 'opacity-100 delay-300',\n                )}\n            />\n        </div>\n    );\n});\n\nexport default Terminal;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ModeToggle/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/OpenCode/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ProjectSelect/ProjectNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ProjectSelect/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSubscriptionOpen' is assigned a value but never used.","line":27,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsSubscriptionOpen' is assigned a value but never used.","line":27,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager, useRouteManager } from '@/components/Context';\nimport { ProjectTabs } from '@/lib/projects';\nimport { Route } from '@/lib/routes';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuSub,\n    DropdownMenuSubContent,\n    DropdownMenuSubTrigger,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useRef, useState } from 'react';\n\nconst ProjectBreadcrumb = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const routeManager = useRouteManager();\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const [isSubscriptionOpen, setIsSubscriptionOpen] = useState(false);\n    const closeTimeoutRef = useRef<Timer>();\n\n    async function handleNavigateToProject(tab?: ProjectTabs) {\n        try {\n            await saveScreenshot();\n        } catch (error) {\n            console.error('Failed to take screenshot:', error);\n        }\n        setTimeout(() => {\n            projectsManager.project = null;\n            if (tab) {\n                projectsManager.projectsTab = tab;\n            }\n            routeManager.route = Route.PROJECTS;\n        }, 100);\n    }\n\n    async function handleReturn() {\n        handleNavigateToProject();\n    }\n\n    const handleOpenProjectFolder = () => {\n        const project = projectsManager.project;\n        if (project && project.folderPath) {\n            invokeMainChannel(MainChannels.OPEN_IN_EXPLORER, project.folderPath);\n        }\n    };\n\n    async function saveScreenshot() {\n        const project = projectsManager.project;\n        if (!project) {\n            console.error('No project selected');\n            return;\n        }\n        const projectId = project.id;\n        const result = await editorEngine.takeActiveWebviewScreenshot(projectId, {\n            save: true,\n        });\n        if (!result || !result.name) {\n            console.error('Failed to take screenshot');\n            return;\n        }\n        project.previewImg = result.name;\n        project.updatedAt = new Date().toISOString();\n        projectsManager.updateProject(project);\n    }\n\n    return (\n        <div className=\"mx-2 flex flex-row items-center text-small gap-2\">\n            <DropdownMenu open={isDropdownOpen} onOpenChange={setIsDropdownOpen}>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        variant={'ghost'}\n                        className=\"mx-0 px-0 gap-2 text-foreground-onlook text-small hover:text-foreground-active hover:bg-transparent\"\n                    >\n                        <Icons.OnlookLogo className=\"w-6 h-6 hidden md:block\" />\n                        <span className=\"mx-0 max-w-[60px] md:max-w-[100px] lg:max-w-[200px] px-0 text-foreground-onlook text-small truncate cursor-pointer\">\n                            {projectsManager.project?.name}\n                        </span>\n                        <Icons.ChevronDown className=\"transition-all rotate-0 group-data-[state=open]:-rotate-180 duration-200 ease-in-out text-foreground-onlook \" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                    align=\"start\"\n                    className=\"w-48\"\n                    onMouseEnter={() => {\n                        if (closeTimeoutRef.current) {\n                            clearTimeout(closeTimeoutRef.current);\n                        }\n                    }}\n                    onMouseLeave={() => {\n                        closeTimeoutRef.current = setTimeout(() => {\n                            setIsDropdownOpen(false);\n                        }, 300);\n                    }}\n                >\n                    <DropdownMenuItem onClick={handleReturn}>\n                        <div className=\"flex row center items-center group\">\n                            <Icons.Tokens className=\"mr-2 group-hover:rotate-12 transition-transform\" />\n                            {'Go to all Projects'}\n                        </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuSub>\n                        <DropdownMenuSubTrigger>New Project</DropdownMenuSubTrigger>\n                        <DropdownMenuSubContent>\n                            <DropdownMenuItem\n                                onClick={() => handleNavigateToProject(ProjectTabs.PROMPT_CREATE)}\n                                className={cn(\n                                    'focus:bg-blue-100 focus:text-blue-900',\n                                    'hover:bg-blue-100 hover:text-blue-900',\n                                    'dark:focus:bg-blue-900 dark:focus:text-blue-100',\n                                    'dark:hover:bg-blue-900 dark:hover:text-blue-100',\n                                )}\n                            >\n                                <Icons.FilePlus className=\"mr-2 h-4 w-4\" />\n                                Start from scratch\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                                onClick={() => handleNavigateToProject(ProjectTabs.IMPORT_PROJECT)}\n                                className={cn(\n                                    'focus:bg-teal-100 focus:text-teal-900',\n                                    'hover:bg-teal-100 hover:text-teal-900',\n                                    'dark:focus:bg-teal-900 dark:focus:text-teal-100',\n                                    'dark:hover:bg-teal-900 dark:hover:text-teal-100',\n                                )}\n                            >\n                                <Icons.Download className=\"mr-2 h-4 w-4\" />\n                                Import a project\n                            </DropdownMenuItem>\n                        </DropdownMenuSubContent>\n                    </DropdownMenuSub>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleOpenProjectFolder}>\n                        {'Show in Explorer'}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                        onClick={() => {\n                            editorEngine.isPlansOpen = true;\n                        }}\n                    >\n                        Subscriptions\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                        onClick={() => {\n                            editorEngine.isSettingsOpen = true;\n                        }}\n                    >\n                        Settings\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n    );\n});\n\nexport default ProjectBreadcrumb;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/AdvancedSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/Domain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/Url.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customDomain' is assigned a value but never used.","line":17,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customDomainState' is assigned a value but never used.","line":23,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { PublishStatus } from '@onlook/models/hosting';\nimport { DomainType } from '@onlook/models/projects';\nimport { Separator } from '@onlook/ui/separator';\nimport { observer } from 'mobx-react-lite';\nimport { AdvancedSettingsSection } from './AdvancedSettings';\nimport { DomainSection } from './Domain';\n\nexport const PublishDropdown = observer(\n    ({ setIsOpen }: { setIsOpen: (isOpen: boolean) => void }) => {\n        const projectsManager = useProjectsManager();\n        if (!projectsManager.project) {\n            return null;\n        }\n\n        const baseDomain = projectsManager.project?.domains?.base || null;\n        const customDomain = projectsManager.project?.domains?.custom || null;\n\n        const baseDomainState = projectsManager.domains?.base?.state || {\n            status: PublishStatus.UNPUBLISHED,\n            message: null,\n        };\n        const customDomainState = projectsManager.domains?.custom?.state || {\n            status: PublishStatus.UNPUBLISHED,\n            message: null,\n        };\n\n        return (\n            <div className=\"rounded-md flex flex-col text-foreground-secondary\">\n                <DomainSection\n                    setIsOpen={setIsOpen}\n                    domain={baseDomain}\n                    type={DomainType.BASE}\n                    state={baseDomainState}\n                />\n\n                {/* TODO: Uncomment after freestyle bug is fixed */}\n                {/* <Separator />\n                <DomainSection\n                    setIsOpen={setIsOpen}\n                    domain={customDomain}\n                    type={DomainType.CUSTOM}\n                    state={customDomainState}\n                /> */}\n                <Separator />\n                <AdvancedSettingsSection setIsOpen={setIsOpen} />\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/TriggerButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Subscription/PricingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used.","line":44,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { MotionCard } from '@onlook/ui/motion-card';\nimport { motion } from 'framer-motion';\nimport { useTranslation } from 'react-i18next';\n\nexport const PricingCard = ({\n    plan,\n    price,\n    description,\n    features,\n    buttonText,\n    buttonProps,\n    delay,\n    isLoading,\n}: {\n    plan: string;\n    price: string;\n    description: string;\n    features: string[];\n    buttonText: string;\n    buttonProps: React.ButtonHTMLAttributes<HTMLButtonElement>;\n    delay: number;\n    isLoading?: boolean;\n}) => {\n    const { t } = useTranslation();\n\n    return (\n        <MotionCard\n            className=\"w-[360px]\"\n            initial={{ opacity: 0, y: 40 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay }}\n        >\n            <motion.div className=\"p-6 flex flex-col h-full\">\n                <div className=\"space-y-1\">\n                    <h2 className=\"text-title2\">{plan}</h2>\n                    <p className=\"text-foreground-onlook text-largePlus\">{price}</p>\n                </div>\n                <div className=\"border-[0.5px] border-border-primary -mx-6 my-6\" />\n                <p className=\"text-foreground-primary text-title3 text-balance\">{description}</p>\n                <div className=\"border-[0.5px] border-border-primary -mx-6 my-6\" />\n                <div className=\"space-y-4 mb-6\">\n                    {features.map((feature, i) => (\n                        <div\n                            key={feature}\n                            className=\"flex items-center gap-3 text-sm text-foreground-secondary/80\"\n                        >\n                            <Icons.Check className=\"w-5 h-5 text-foreground-secondary/80\" />\n                            <span>{feature}</span>\n                        </div>\n                    ))}\n                </div>\n                <Button\n                    className=\"mt-auto w-full\"\n                    {...buttonProps}\n                    disabled={isLoading || buttonProps.disabled}\n                >\n                    {isLoading ? (\n                        <div className=\"flex items-center gap-2\">\n                            <Icons.Shadow className=\"w-4 h-4 animate-spin\" />\n                            <span>{t('pricing.loading.checkingPayment')}</span>\n                        </div>\n                    ) : (\n                        buttonText\n                    )}\n                </Button>\n            </motion.div>\n        </MotionCard>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Subscription/PricingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/BrowserControl/EnabledButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assertNever' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Popover, PopoverContent, PopoverTrigger } from '@onlook/ui/popover';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { assertNever } from '/common/helpers';\n\nconst EnabledButton = observer(({ webviewId }: { webviewId: string }) => {\n    const editorEngine = useEditorEngine();\n    const selected = editorEngine.webviews.isSelected(webviewId);\n    const state = editorEngine.webviews.getState(webviewId);\n\n    // Only show button for error states\n    if (state !== WebviewState.DOM_NO_ONLOOK) {\n        return null;\n    }\n\n    const button = (\n        <Button\n            variant=\"ghost\"\n            className=\"group px-1 text-amber-300 hover:text-amber-100 hover:bg-amber-400/10\"\n            size={'icon'}\n        >\n            <Icons.ExclamationTriangle\n                className={cn('fill-inherit', selected && 'group-hover:text-amber-100')}\n            />\n        </Button>\n    );\n\n    return (\n        <Popover>\n            <PopoverTrigger asChild>{button}</PopoverTrigger>\n            <PopoverContent>\n                <div className=\"space-y-2 flex flex-col w-80 items-center\">\n                    <div className=\"flex gap-2 justify-center\">\n                        <p className=\"text-active text-regularPlus\">\n                            {\"Onlook won't work on this page\"}\n                        </p>\n                        <Icons.CircleBackslash className=\"mt-[3px] text-red-500\" />\n                    </div>\n                    <p className=\"text-foreground-onlook text-small text-left\">\n                        {\n                            \"This url is not linked to Onlook's editor. Please navigate to a url that is linked to Onlook's editor.\"\n                        }\n                    </p>\n                </div>\n            </PopoverContent>\n        </Popover>\n    );\n});\n\nexport default EnabledButton;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/BrowserControl/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":162,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":170,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport { EditorMode } from '@/lib/models';\nimport { DefaultSettings, Theme } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { cn } from '@onlook/ui/utils';\nimport { getValidUrl } from '@onlook/utility';\nimport clsx from 'clsx';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport EnabledButton from './EnabledButton';\n\ninterface BrowserControlsProps {\n    webviewRef: React.RefObject<Electron.WebviewTag> | null;\n    webviewSrc: string;\n    setWebviewSrc: React.Dispatch<React.SetStateAction<string>>;\n    selected: boolean;\n    hovered: boolean;\n    setHovered: React.Dispatch<React.SetStateAction<boolean>>;\n    setDarkmode: React.Dispatch<React.SetStateAction<boolean>>;\n    settings: FrameSettings;\n    startMove: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n    domState: WebviewState;\n    webviewSize: {\n        width: number;\n        height: number;\n    };\n}\n\nconst BrowserControls = observer(\n    ({\n        webviewRef,\n        webviewSrc,\n        setWebviewSrc,\n        selected,\n        hovered,\n        setHovered,\n        setDarkmode,\n        settings,\n        startMove,\n        domState,\n        webviewSize,\n    }: BrowserControlsProps) => {\n        const editorEngine = useEditorEngine();\n        const [urlInputValue, setUrlInputValue] = useState(webviewSrc);\n        const [editingURL, setEditingURL] = useState(false);\n        const [theme, setTheme] = useState(Theme.System);\n        const [state, setState] = useState<WebviewState>(WebviewState.NOT_RUNNING);\n        const [editorMode, setEditorMode] = useState(EditorMode.DESIGN);\n        const inputRef = useRef<HTMLInputElement>(null);\n\n        useEffect(() => {\n            const observer = (state: WebviewState) => {\n                setState(state);\n            };\n\n            editorEngine.webviews.observeState(settings.id, observer);\n\n            return editorEngine.webviews.unobserveState(settings.id, observer);\n        });\n\n        useEffect(() => {\n            const observer = (newSettings: FrameSettings) => {\n                if (newSettings.theme !== theme) {\n                    setTheme(newSettings.theme || DefaultSettings.THEME);\n                }\n            };\n\n            editorEngine.canvas.observeSettings(settings.id, observer);\n\n            return editorEngine.canvas.unobserveSettings(settings.id, observer);\n        }, []);\n\n        useEffect(() => {\n            setEditorMode(editorEngine.mode);\n        }, [editorEngine.mode]);\n\n        useEffect(() => {\n            setUrlInputValue(webviewSrc);\n        }, [webviewSrc]);\n\n        useEffect(() => {\n            if (editingURL) {\n                inputRef.current?.focus();\n            }\n        }, [editingURL]);\n\n        function goForward() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            if (webview.canGoForward()) {\n                webview.goForward();\n            }\n        }\n\n        function reload() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.errors.clear();\n            webview.reload();\n        }\n\n        function goBack() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            if (webview.canGoBack()) {\n                webview.goBack();\n            }\n        }\n\n        function handleKeydown(e: React.KeyboardEvent<HTMLInputElement>) {\n            if (e.key === 'Enter') {\n                e.currentTarget.blur();\n                setEditingURL(false);\n                return;\n            }\n        }\n\n        function handleBlur(e: React.FocusEvent<HTMLInputElement>) {\n            const validUrl = getValidUrl(e.currentTarget.value);\n            setWebviewSrc(validUrl);\n            setEditingURL(false);\n        }\n\n        async function changeTheme(theme: Theme) {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n\n            const themeValue =\n                theme === Theme.System ? 'device' : theme === Theme.Dark ? 'dark' : 'light';\n\n            webview.executeJavaScript(`window.api?.setTheme(\"${themeValue}\")`).then((res) => {\n                setDarkmode(res);\n                setTheme(theme);\n            });\n\n            editorEngine.canvas.saveFrame(settings.id, {\n                theme: theme,\n            });\n        }\n\n        function canGoBack() {\n            try {\n                return webviewRef?.current?.canGoBack();\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function canGoForward() {\n            try {\n                return webviewRef?.current?.canGoForward();\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function getCleanURL(url: string) {\n            try {\n                const urlWithScheme = url.includes('://') ? url : 'http://' + url;\n                const urlObject = new URL(urlWithScheme);\n                const hostname = urlObject.hostname.replace(/^www\\./, '');\n                const port = urlObject.port ? ':' + urlObject.port : '';\n                const path = urlObject.pathname + urlObject.search;\n                return hostname + port + path;\n            } catch (error) {\n                console.error(error);\n                return url;\n            }\n        }\n\n        function handleSelect() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webview);\n            editorEngine.elements.clear();\n        }\n\n        function getSelectedColor() {\n            if (editorEngine.mode === EditorMode.INTERACT) {\n                return 'text-blue-400 fill-blue-400';\n            }\n            if (domState === WebviewState.DOM_ONLOOK_ENABLED) {\n                return 'text-teal-400 fill-teal-400';\n            }\n            if (domState === WebviewState.DOM_NO_ONLOOK) {\n                return 'text-amber-400 fill-amber-400';\n            }\n            if (domState === WebviewState.NOT_RUNNING && editorEngine.mode === EditorMode.DESIGN) {\n                return 'text-foreground-secondary fill-foreground-secondary';\n            }\n            return '';\n        }\n\n        return (\n            <div\n                className={clsx(\n                    'm-auto flex flex-row items-center backdrop-blur-sm overflow-hidden relative shadow-sm rounded-md border-input text-foreground',\n                    selected ? ' bg-active/60 ' : '',\n                    hovered ? ' bg-hover/20 ' : '',\n                    selected\n                        ? getSelectedColor()\n                        : editorMode === EditorMode.INTERACT\n                          ? 'text-foreground-secondary fill-foreground-secondary'\n                          : 'fill-[#f7f7f7]',\n                )}\n                onMouseOver={() => setHovered(true)}\n                onMouseOut={() => setHovered(false)}\n                onClick={handleSelect}\n                style={{\n                    transform: `scale(${1 / editorEngine.canvas.scale})`,\n                    width: `${webviewSize.width * editorEngine.canvas.scale}px`,\n                    marginBottom: `${10 / editorEngine.canvas.scale}px`,\n                }}\n            >\n                {/* Making sure the dropdown arrow is visible */}\n                <div className=\"absolute right-0 bottom-0 top-0 bg-gradient-to-r from-transparent dark:via-background-primary via-background-tertiary dark:to-background-primary to-background-tertiary w-20 z-50\"></div>\n                <div\n                    className={`absolute left-0 flex flex-row z-50`}\n                    style={{\n                        transition: 'opacity 0.5s, transform 0.5s',\n                        transform: editingURL\n                            ? 'translateX(-100%)'\n                            : selected\n                              ? 'translateX(0)'\n                              : 'translateX(-100%)',\n                        opacity: editingURL ? 0 : selected ? 1 : 0,\n                    }}\n                >\n                    <Button\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={goBack}\n                        disabled={!canGoBack()}\n                    >\n                        <Icons.ArrowLeft className=\"text-inherit h-4 w-4 transition-none\" />\n                    </Button>\n\n                    <Button\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={goForward}\n                        style={{\n                            transition: 'display 0.5s',\n                            display: canGoForward() ? 'flex' : 'none',\n                        }}\n                    >\n                        <Icons.ArrowRight className=\"text-inherit h-4 w-4\" />\n                    </Button>\n                    <Button size={'icon'} variant={'ghost'} onClick={reload}>\n                        {webviewRef?.current?.isLoading() ? (\n                            <Icons.CrossL className=\"text-inherit\" />\n                        ) : (\n                            <Icons.Reload className=\"text-inherit h-4 w-4\" />\n                        )}\n                    </Button>\n                </div>\n\n                <div\n                    className={`relative w-full items-center flex flex-row min-h-9 cursor-pointer`}\n                    style={{\n                        transition: 'padding 0.5s',\n                        paddingLeft:\n                            selected && canGoForward()\n                                ? '7.25rem'\n                                : selected && editingURL\n                                  ? '0'\n                                  : selected\n                                    ? '5rem'\n                                    : '0',\n                        paddingRight: editingURL ? '0' : '5.625rem',\n                    }}\n                    onMouseDown={(e) => {\n                        if (e.target instanceof HTMLInputElement) {\n                            return;\n                        }\n                        if (editingURL) {\n                            setEditingURL(false);\n                            const validUrl = getValidUrl(urlInputValue);\n                            setWebviewSrc(validUrl);\n                        }\n                        startMove(e);\n                    }}\n                    onDoubleClick={(e) => {\n                        if (\n                            e.target instanceof HTMLInputElement ||\n                            e.target instanceof HTMLButtonElement ||\n                            (e.target as HTMLElement).closest('button')\n                        ) {\n                            return;\n                        }\n                        setEditingURL(true);\n                    }}\n                >\n                    <Input\n                        ref={inputRef}\n                        className=\"text-small text-foreground-primary bg-background-secondary/60 w-full overflow-hidden text-ellipsis whitespace-nowrap min-w-[20rem] border-none focus:ring-0 focus:border-0 px-0 leading-none py-0 rounded-none\"\n                        value={urlInputValue}\n                        onChange={(e) => setUrlInputValue(e.target.value)}\n                        onKeyDown={handleKeydown}\n                        onBlur={handleBlur}\n                        style={{\n                            transition: 'display 0.5s',\n                            display: editingURL ? 'flex' : 'none',\n                        }}\n                    />\n                    <Button\n                        className=\"absolute right-0.5 px-1 group\"\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={() => setEditingURL(false)}\n                        style={{\n                            transition: 'transform 0.5s, visibility 0.5s, opacity 0.5s',\n                            transform: editingURL ? 'translateX(0)' : 'translateX(-5.625rem)',\n                            visibility: editingURL ? 'visible' : 'hidden',\n                            opacity: editingURL ? 1 : 0,\n                        }}\n                    >\n                        <Icons.ArrowRight className=\"text-foreground-secondary group-hover:text-foreground-active h-4 w-4\" />\n                    </Button>\n                    <p\n                        className=\"text-small text-inherit hover:text-opacity-80 transition-colors px-0 h-auto leading-none py-0\"\n                        style={{\n                            transition: 'display 0.5s',\n                            display: editingURL ? 'none' : 'flex',\n                        }}\n                    >\n                        {getCleanURL(urlInputValue)}\n                    </p>\n                </div>\n\n                <div\n                    className=\"absolute right-0 flex flex-row z-50\"\n                    style={{\n                        transition: 'opacity 0.5s, transform 0.5s',\n                        transform: editingURL ? 'translateX(100%)' : 'translateX(0)',\n                        opacity: editingURL ? 0 : 1,\n                    }}\n                >\n                    <EnabledButton webviewId={settings.id} />\n                    <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button\n                                className={cn(\n                                    'group transition-none',\n                                    state === WebviewState.DOM_ONLOOK_ENABLED && selected\n                                        ? 'hover:text-teal-200 hover:bg-teal-400/10'\n                                        : state === WebviewState.DOM_NO_ONLOOK && selected\n                                          ? 'hover:text-amber-200 hover:bg-amber-400/10'\n                                          : '',\n                                )}\n                                size={'icon'}\n                                variant={'ghost'}\n                            >\n                                <Icons.ChevronDown className=\"text-inherit h-4 w-4 rotate-0 group-data-[state=open]:-rotate-180 duration-200 ease-in-out\" />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent className=\"rounded-md bg-background\">\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={() => editorEngine.duplicateWindow(settings.id)}\n                                >\n                                    <span className=\"flex w-full items-center text-smallPlus\">\n                                        <Icons.Copy className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>Duplicate Window</span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={reload}\n                                >\n                                    <span className=\"flex w-full items-center text-smallPlus\">\n                                        <Icons.Reload className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>Refresh Window</span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild className=\"p-0\">\n                                <div className=\"flex flex-row hover:bg-transparent focus:bg-transparent w-full\">\n                                    <Button\n                                        variant={'ghost'}\n                                        className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                        onClick={goBack}\n                                        disabled={!canGoBack()}\n                                    >\n                                        <Icons.ArrowLeft className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />{' '}\n                                        Back\n                                    </Button>\n                                    <Button\n                                        variant={'ghost'}\n                                        className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                        onClick={goForward}\n                                        disabled={!canGoForward()}\n                                    >\n                                        <span className=\"flex w-full items-center text-smallPlus\">\n                                            <span>Next</span>\n                                            <Icons.ArrowRight className=\"ml-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        </span>\n                                    </Button>\n                                </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild className=\"p-0\">\n                                <div className=\"flex flex-row hover:bg-transparent focus:bg-transparent w-full\">\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.System ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.System)}\n                                    >\n                                        <Icons.Laptop\n                                            className={`${theme === Theme.System ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.Dark ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.Dark)}\n                                    >\n                                        <Icons.Moon\n                                            className={`${theme === Theme.Dark ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.Light ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.Light)}\n                                    >\n                                        <Icons.Sun\n                                            className={`${theme === Theme.Light ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={() => editorEngine.deleteWindow(settings.id)}\n                                    disabled={!editorEngine.canDeleteWindow()}\n                                >\n                                    <span className=\"flex w-full items-center\">\n                                        <Icons.Trash className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>\n                                            {editorEngine.canDeleteWindow()\n                                                ? 'Delete Window'\n                                                : \"Can't delete this!\"}\n                                        </span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default BrowserControls;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/Frame.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'darkmode' is assigned a value but never used.","line":39,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deregisterWebview' is defined but never used.","line":223,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport type { WebviewMessageBridge } from '@/lib/editor/messageBridge';\nimport { EditorMode } from '@/lib/models';\nimport type { SizePreset } from '@/lib/sizePresets';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { RunState } from '@onlook/models/run';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { ShineBorder } from '@onlook/ui/shine-border';\nimport { cn } from '@onlook/ui/utils';\nimport { motion } from 'framer-motion';\nimport debounce from 'lodash/debounce';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useRef, useState, type MouseEvent } from 'react';\nimport BrowserControls from './BrowserControl';\nimport GestureScreen from './GestureScreen';\nimport ResizeHandles from './ResizeHandles';\n\nconst Frame = observer(\n    ({\n        messageBridge,\n        settings,\n    }: {\n        messageBridge: WebviewMessageBridge;\n        settings: FrameSettings;\n    }) => {\n        const RETRY_TIMEOUT = 3000;\n        const DOM_FAILED_DELAY = 3000;\n        const editorEngine = useEditorEngine();\n        const projectsManager = useProjectsManager();\n        const webviewRef = useRef<Electron.WebviewTag | null>(null);\n        let domState = editorEngine.webviews.getState(settings.id);\n        const [selected, setSelected] = useState<boolean>(\n            editorEngine.webviews.isSelected(settings.id),\n        );\n        const [hovered, setHovered] = useState<boolean>(false);\n        const [darkmode, setDarkmode] = useState<boolean>(false);\n        const [domReady, setDomReady] = useState(false);\n        const [domFailed, setDomFailed] = useState(false);\n        const [shouldShowDomFailed, setShouldShowDomFailed] = useState(false);\n        const [selectedPreset, setSelectedPreset] = useState<SizePreset | null>(null);\n        const [lockedPreset, setLockedPreset] = useState<SizePreset | null>(null);\n\n        const [webviewSize, setWebviewSize] = useState(settings.dimension);\n        const [webviewSrc, setWebviewSrc] = useState<string>(settings.url);\n        const [webviewPosition, setWebviewPosition] = useState(settings.position);\n        const [isResizing, setIsResizing] = useState<boolean>(false);\n        const [aspectRatioLocked, setAspectRatioLocked] = useState(\n            settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n        );\n\n        const clampedDimensions = useMemo(\n            () => ({\n                width: Math.max(webviewSize.width, parseInt(DefaultSettings.MIN_DIMENSIONS.width)),\n                height: Math.max(\n                    webviewSize.height,\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                ),\n            }),\n            [webviewSize],\n        );\n\n        const debouncedSaveFrame = useCallback(\n            debounce((id: string, frameData: Partial<FrameSettings>) => {\n                editorEngine.canvas.saveFrame(id, frameData);\n            }, 100),\n            [editorEngine.canvas],\n        );\n\n        const handleUrlChange = useCallback(\n            (e: any) => {\n                setWebviewSrc(e.url);\n\n                editorEngine.pages.handleWebviewUrlChange(settings.id);\n            },\n            [editorEngine.pages, settings.id],\n        );\n\n        const handleDomReady = useCallback(async () => {\n            const webview = webviewRef.current;\n            if (!webview) {\n                return;\n            }\n            await webview.executeJavaScript(`window.api?.setWebviewId('${webview.id}')`);\n            setDomReady(true);\n            webview.setZoomLevel(0);\n\n            const body = await editorEngine.ast.getBodyFromWebview(webview);\n\n            setDomFailed(body.children.length === 0);\n\n            const state = editorEngine.webviews.computeState(body);\n            editorEngine.webviews.setState(webview, state);\n\n            if (state === WebviewState.DOM_ONLOOK_ENABLED) {\n                setTimeout(() => {\n                    selectFirstElement(webview);\n                    editorEngine.takeActiveWebviewScreenshot(settings.id, {\n                        save: true,\n                    });\n                }, 1000);\n            }\n\n            setTimeout(() => {\n                getDarkMode(webview);\n            }, 100);\n            webview.executeJavaScript(`window.api?.processDom()`);\n        }, [editorEngine.ast, editorEngine.webviews]);\n\n        useEffect(() => {\n            const observer = (newSettings: FrameSettings) => {\n                const newDimensions = {\n                    width: newSettings.dimension.width,\n                    height: newSettings.dimension.height,\n                };\n                if (newSettings.aspectRatioLocked !== aspectRatioLocked) {\n                    setAspectRatioLocked(\n                        newSettings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n                    );\n                }\n                if (\n                    newSettings.dimension.width !== webviewSize.width ||\n                    newSettings.dimension.height !== webviewSize.height\n                ) {\n                    setWebviewSize(newDimensions);\n                }\n            };\n\n            editorEngine.canvas.observeSettings(settings.id, observer);\n\n            return editorEngine.canvas.unobserveSettings(settings.id, observer);\n        }, []);\n\n        useEffect(setupFrame, [webviewRef]);\n        useEffect(\n            () => setSelected(editorEngine.webviews.isSelected(settings.id)),\n            [editorEngine.webviews.webviews],\n        );\n\n        useEffect(() => {\n            if (projectsManager.runner?.state === RunState.STOPPING) {\n                const refresh = () => {\n                    const webview = webviewRef.current as Electron.WebviewTag | null;\n                    if (webview) {\n                        try {\n                            webview.reload();\n                        } catch (error) {\n                            console.error('Failed to reload webview', error);\n                        }\n                    }\n                };\n                setTimeout(refresh, RETRY_TIMEOUT);\n                setTimeout(refresh, 500);\n            }\n        }, [projectsManager.runner?.state]);\n\n        useEffect(() => {\n            if (\n                settings.dimension.width !== webviewSize.width ||\n                settings.dimension.height !== webviewSize.height ||\n                settings.position.x !== webviewPosition.x ||\n                settings.position.y !== webviewPosition.y ||\n                settings.url !== webviewSrc\n            ) {\n                debouncedSaveFrame(settings.id, {\n                    url: webviewSrc,\n                    dimension: webviewSize,\n                    position: webviewPosition,\n                });\n            }\n        }, [webviewSize, webviewSrc, webviewPosition]);\n\n        useEffect(() => {\n            let timer: Timer;\n\n            if (domFailed) {\n                timer = setTimeout(() => {\n                    setShouldShowDomFailed(true);\n                }, DOM_FAILED_DELAY);\n            } else {\n                setShouldShowDomFailed(false);\n            }\n\n            return () => {\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            };\n        }, [domFailed]);\n\n        useEffect(() => {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n\n            setWebviewSize(settings.dimension);\n            setWebviewPosition(settings.position);\n            setWebviewSrc(settings.url);\n            setAspectRatioLocked(settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED);\n            if (webview) {\n                webview.id = settings.id;\n                setupFrame();\n                domState = editorEngine.webviews.getState(settings.id);\n            }\n        }, [settings.id]);\n\n        function setupFrame() {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.register(webview);\n            messageBridge.register(webview, settings.id);\n            setBrowserEventListeners(webview);\n\n            return () => {\n                editorEngine.webviews.deregister(webview);\n                messageBridge.deregister(webview);\n                webview.removeEventListener('did-navigate', handleUrlChange);\n            };\n        }\n\n        function deregisterWebview() {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.deregister(webview);\n            messageBridge.deregister(webview);\n            webview.removeEventListener('did-navigate', handleUrlChange);\n        }\n\n        function setBrowserEventListeners(webview: Electron.WebviewTag) {\n            webview.addEventListener('did-navigate', handleUrlChange);\n            webview.addEventListener('did-navigate-in-page', handleUrlChange);\n            webview.addEventListener('dom-ready', handleDomReady);\n            webview.addEventListener('did-fail-load', handleDomFailed);\n            webview.addEventListener('focus', handleWebviewFocus);\n            webview.addEventListener('console-message', handleConsoleMessage);\n        }\n\n        async function getDarkMode(webview: Electron.WebviewTag) {\n            const darkmode = (await webview.executeJavaScript(`window.api?.getTheme()`)) || 'light';\n            setDarkmode(darkmode === 'dark');\n        }\n\n        function handleDomFailed() {\n            setDomFailed(true);\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.setState(webview, WebviewState.RUNNING_NO_DOM);\n\n            setTimeout(() => {\n                if (webview) {\n                    try {\n                        webview.reload();\n                    } catch (error) {\n                        console.error('Failed to reload webview', error);\n                    }\n                }\n            }, RETRY_TIMEOUT);\n        }\n\n        function handleWebviewFocus() {\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webviewRef.current as Electron.WebviewTag);\n        }\n\n        function handleConsoleMessage(event: Electron.ConsoleMessageEvent) {\n            if (event.sourceId === 'chrome-error://chromewebdata/') {\n                // This is a chrome error from renderer, we don't want to show it\n                return;\n            }\n            if (event.level === 3) {\n                editorEngine.errors.addError(settings.id, event);\n            }\n        }\n\n        function startMove(e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            editorEngine.overlay.clear();\n\n            const startX = e.clientX;\n            const startY = e.clientY;\n\n            const move: any = (e: MouseEvent) => {\n                const scale = editorEngine.canvas.scale;\n                const deltaX = (e.clientX - startX) / scale;\n                const deltaY = (e.clientY - startY) / scale;\n\n                setWebviewPosition({\n                    x: webviewPosition.x + deltaX,\n                    y: webviewPosition.y + deltaY,\n                });\n            };\n\n            const stopMove = (e: any) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                window.removeEventListener('mousemove', move);\n                window.removeEventListener('mouseup', stopMove);\n            };\n\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', stopMove);\n        }\n\n        function getSelectedOutlineColor() {\n            if (editorEngine.mode === EditorMode.INTERACT) {\n                return 'outline-blue-400';\n            }\n            if (domState === WebviewState.DOM_ONLOOK_ENABLED) {\n                return 'outline-teal-400';\n            }\n            if (domState === WebviewState.DOM_NO_ONLOOK) {\n                return 'outline-amber-400';\n            }\n            if (domState === WebviewState.NOT_RUNNING && editorEngine.mode === EditorMode.DESIGN) {\n                return 'outline-foreground-secondary';\n            }\n            return 'outline-transparent';\n        }\n\n        function renderNotRunning() {\n            return (\n                <>\n                    {projectsManager.runner?.state === RunState.RUNNING ? (\n                        <ShineBorder\n                            className=\"w-full absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-t from-gray-800/40 via-gray-500/40 to-gray-400/40 border-gray-500 border-[0.5px] space-y-10 rounded-xl\"\n                            color={[\n                                'var(--color-teal-300)',\n                                'var(--color-blue-400)',\n                                'var(--color-purple-200)',\n                            ]}\n                            autoShine={true}\n                        >\n                            <motion.p\n                                className=\"text-active text-title1 text-center text-balance pb-24\"\n                                initial={{ opacity: 0, y: 10 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                transition={{ duration: 0.5, delay: 0.2 }}\n                            >\n                                {'Waiting for the App to start...'}\n                            </motion.p>\n                        </ShineBorder>\n                    ) : (\n                        <div className=\"w-full absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-t from-gray-800/40 via-gray-500/40 to-gray-400/40 border-gray-500 border-[0.5px] space-y-10 rounded-xl\">\n                            <p className=\"text-active text-title1 text-center text-balance\">\n                                {'Press '}\n                                <span className=\"text-teal-600 dark:text-teal-300\">Play</span>\n                                {' to start designing your App'}\n                            </p>\n                            <Button\n                                className={cn(\n                                    'h-14 overflow-hidden',\n                                    'text-teal-700 dark:text-teal-100 relative border-teal-700 dark:border-teal-400 hover:border-teal-500 dark:hover:border-teal-200 hover:shadow-xl shadow-2xl shadow-teal-700/50 dark:shadow-teal-400/50 hover:shadow-teal-500/50 dark:hover:shadow-teal-200/50 transition-all duration-300',\n                                    'before:absolute before:inset-0 before:bg-[radial-gradient(169.40%_89.55%_at_94.76%_6.29%,theme(colors.teal.200/80)_0%,theme(colors.teal.300/80)_100%)] dark:before:bg-[radial-gradient(169.40%_89.55%_at_94.76%_6.29%,theme(colors.teal.800/80)_0%,theme(colors.teal.500/80)_100%)]',\n                                    'after:absolute after:inset-0 after:bg-[radial-gradient(169.40%_89.55%_at_90%_10%,theme(colors.teal.300/50)_0%,theme(colors.teal.200/50)_100%)] dark:after:bg-[radial-gradient(169.40%_89.55%_at_90%_10%,theme(colors.teal.500/50)_0%,theme(colors.teal.400/50)_100%)]',\n                                    'after:opacity-0 hover:after:opacity-100',\n                                    'before:transition-all after:transition-all before:duration-300 after:duration-300',\n                                    'before:z-0 after:z-0',\n                                )}\n                                onClick={() => {\n                                    projectsManager.runner?.start();\n                                }}\n                            >\n                                <span className=\"relative z-10 flex items-center gap-x-1.5 px-3 py-2.5\">\n                                    <Icons.Play className=\"w-8 h-8\" />\n                                    <span className=\"text-title3\">Play</span>\n                                </span>\n                            </Button>\n                        </div>\n                    )}\n                </>\n            );\n        }\n\n        async function selectFirstElement(webview: Electron.WebviewTag) {\n            const domEl = await webview.executeJavaScript(`window.api?.getFirstOnlookElement()`);\n            if (domEl) {\n                editorEngine.elements.click([domEl], webview);\n            }\n        }\n\n        return (\n            <div\n                className=\"flex flex-col fixed\"\n                style={{ transform: `translate(${webviewPosition.x}px, ${webviewPosition.y}px)` }}\n            >\n                <BrowserControls\n                    webviewRef={domReady ? webviewRef : null}\n                    webviewSrc={webviewSrc}\n                    setWebviewSrc={setWebviewSrc}\n                    selected={selected}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setDarkmode={setDarkmode}\n                    settings={settings}\n                    startMove={startMove}\n                    domState={domState}\n                    webviewSize={webviewSize}\n                />\n                <div className=\"relative\">\n                    <ResizeHandles\n                        webviewRef={webviewRef}\n                        webviewSize={webviewSize}\n                        setWebviewSize={setWebviewSize}\n                        selectedPreset={selectedPreset}\n                        setSelectedPreset={setSelectedPreset}\n                        lockedPreset={lockedPreset}\n                        setLockedPreset={setLockedPreset}\n                        setIsResizing={setIsResizing}\n                        aspectRatioLocked={aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED}\n                        webviewId={settings.id}\n                    />\n                    <webview\n                        id={settings.id}\n                        ref={webviewRef}\n                        className={cn(\n                            'w-[96rem] h-[60rem] backdrop-blur-sm transition outline outline-4',\n                            shouldShowDomFailed ? 'bg-transparent' : 'bg-white',\n                            selected ? getSelectedOutlineColor() : 'outline-transparent',\n                        )}\n                        src={settings.url}\n                        preload={`file://${window.env.WEBVIEW_PRELOAD_PATH}`}\n                        allowpopups={'true' as any}\n                        style={{\n                            width: clampedDimensions.width,\n                            height: clampedDimensions.height,\n                        }}\n                    ></webview>\n                    <GestureScreen\n                        isResizing={isResizing}\n                        webviewRef={webviewRef}\n                        setHovered={setHovered}\n                    />\n                    {domFailed && shouldShowDomFailed && renderNotRunning()}\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default Frame;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/GestureScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropElementProperties' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":111,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { getRelativeMousePositionToWebview } from '@/lib/editor/engine/overlay/utils';\nimport { EditorMode } from '@/lib/models';\nimport { MouseAction } from '@onlook/models/editor';\nimport type { DomElement, DropElementProperties, ElementPosition } from '@onlook/models/element';\nimport { cn } from '@onlook/ui/utils';\nimport throttle from 'lodash/throttle';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport RightClickMenu from '../RightClickMenu';\n\ninterface GestureScreenProps {\n    webviewRef: React.RefObject<Electron.WebviewTag>;\n    setHovered: React.Dispatch<React.SetStateAction<boolean>>;\n    isResizing: boolean;\n}\n\nconst GestureScreen = observer(({ webviewRef, setHovered, isResizing }: GestureScreenProps) => {\n    const editorEngine = useEditorEngine();\n\n    const getWebview = useCallback((): Electron.WebviewTag => {\n        const webview = webviewRef.current as Electron.WebviewTag | null;\n        if (!webview) {\n            throw Error('No webview found');\n        }\n        return webview;\n    }, [webviewRef]);\n\n    const getRelativeMousePosition = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>): ElementPosition => {\n            const webview = getWebview();\n            return getRelativeMousePositionToWebview(e, webview);\n        },\n        [getWebview],\n    );\n\n    const handleMouseEvent = useCallback(\n        async (e: React.MouseEvent<HTMLDivElement>, action: MouseAction) => {\n            const webview = getWebview();\n            const pos = getRelativeMousePosition(e);\n            const el: DomElement = await webview.executeJavaScript(\n                `window.api?.getElementAtLoc(${pos.x}, ${pos.y}, ${action === MouseAction.MOUSE_DOWN || action === MouseAction.DOUBLE_CLICK})`,\n            );\n            if (!el) {\n                return;\n            }\n\n            switch (action) {\n                case MouseAction.MOVE:\n                    editorEngine.elements.mouseover(el, webview);\n                    if (e.altKey) {\n                        editorEngine.elements.showMeasurement();\n                    } else {\n                        editorEngine.overlay.removeMeasurement();\n                    }\n                    break;\n                case MouseAction.MOUSE_DOWN:\n                    if (el.tagName.toLocaleLowerCase() === 'body') {\n                        editorEngine.webviews.select(webview);\n                        return;\n                    }\n                    // Ignore right-clicks\n                    if (e.button == 2) {\n                        break;\n                    }\n                    if (editorEngine.text.isEditing) {\n                        editorEngine.text.end();\n                    }\n                    if (e.shiftKey) {\n                        editorEngine.elements.shiftClick(el, webview);\n                    } else {\n                        editorEngine.move.start(el, pos, webview);\n                        editorEngine.elements.click([el], webview);\n                    }\n                    break;\n                case MouseAction.DOUBLE_CLICK:\n                    editorEngine.text.start(el, webview);\n                    break;\n            }\n        },\n        [getWebview, getRelativeMousePosition, editorEngine],\n    );\n\n    const throttledMouseMove = useMemo(\n        () =>\n            throttle((e: React.MouseEvent<HTMLDivElement>) => {\n                if (editorEngine.move.isDragging) {\n                    editorEngine.move.drag(e, getRelativeMousePosition);\n                } else if (\n                    editorEngine.mode === EditorMode.DESIGN ||\n                    ((editorEngine.mode === EditorMode.INSERT_DIV ||\n                        editorEngine.mode === EditorMode.INSERT_TEXT ||\n                        editorEngine.mode === EditorMode.INSERT_IMAGE) &&\n                        !editorEngine.insert.isDrawing)\n                ) {\n                    handleMouseEvent(e, MouseAction.MOVE);\n                } else if (editorEngine.insert.isDrawing) {\n                    editorEngine.insert.draw(e);\n                }\n            }, 16),\n        [editorEngine, getRelativeMousePosition, handleMouseEvent],\n    );\n\n    useEffect(() => {\n        return () => {\n            throttledMouseMove.cancel();\n        };\n    }, [throttledMouseMove]);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const webview = getWebview();\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webview);\n        },\n        [getWebview, editorEngine.webviews],\n    );\n\n    function handleDoubleClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (editorEngine.mode !== EditorMode.DESIGN) {\n            return;\n        }\n        handleMouseEvent(e, MouseAction.DOUBLE_CLICK);\n    }\n\n    function handleMouseDown(e: React.MouseEvent<HTMLDivElement>) {\n        if (editorEngine.mode === EditorMode.DESIGN) {\n            handleMouseEvent(e, MouseAction.MOUSE_DOWN);\n        } else if (\n            editorEngine.mode === EditorMode.INSERT_DIV ||\n            editorEngine.mode === EditorMode.INSERT_TEXT ||\n            editorEngine.mode === EditorMode.INSERT_IMAGE\n        ) {\n            editorEngine.insert.start(e);\n        }\n    }\n\n    async function handleMouseUp(e: React.MouseEvent<HTMLDivElement>) {\n        editorEngine.insert.end(e, webviewRef.current);\n        editorEngine.move.end(e);\n    }\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleMouseEvent(e, MouseAction.MOVE);\n    };\n\n    const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        try {\n            const propertiesData = e.dataTransfer.getData('application/json');\n            if (!propertiesData) {\n                console.error('No element properties in drag data');\n                return;\n            }\n\n            const properties = JSON.parse(propertiesData);\n\n            if (properties.type === 'image') {\n                const webview = getWebview();\n                const dropPosition = getRelativeMousePosition(e);\n                await editorEngine.insert.insertDroppedImage(webview, dropPosition, properties);\n            } else {\n                const webview = getWebview();\n                const dropPosition = getRelativeMousePosition(e);\n                await editorEngine.insert.insertDroppedElement(webview, dropPosition, properties);\n            }\n\n            editorEngine.mode = EditorMode.DESIGN;\n        } catch (error) {\n            console.error('drop operation failed:', error);\n        }\n    };\n\n    const gestureScreenClassName = useMemo(() => {\n        return cn(\n            'absolute inset-0 bg-transparent',\n            editorEngine.mode === EditorMode.INTERACT && !isResizing ? 'hidden' : 'visible',\n            editorEngine.mode === EditorMode.INSERT_DIV && 'cursor-crosshair',\n            editorEngine.mode === EditorMode.INSERT_TEXT && 'cursor-text',\n        );\n    }, [editorEngine.mode, isResizing]);\n\n    return (\n        <RightClickMenu>\n            <div\n                className={gestureScreenClassName}\n                onClick={handleClick}\n                onMouseOver={() => setHovered(true)}\n                onMouseOut={useCallback(() => {\n                    setHovered(false);\n                    editorEngine.elements.clearHoveredElement();\n                    editorEngine.overlay.state.updateHoverRect(null);\n                }, [editorEngine, setHovered])}\n                onMouseLeave={handleMouseUp}\n                onMouseMove={throttledMouseMove}\n                onMouseDown={handleMouseDown}\n                onMouseUp={handleMouseUp}\n                onDoubleClick={handleDoubleClick}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n            ></div>\n        </RightClickMenu>\n    );\n});\n\nexport default GestureScreen;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webviewRef' is defined but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webviewId' is defined but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode } from '@/lib/models';\nimport type { SizePreset } from '@/lib/sizePresets';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { ToastAction } from '@onlook/ui/toast';\nimport { useToast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { type MouseEvent, useRef } from 'react';\n\ninterface ResizeHandleProps {\n    webviewRef: React.RefObject<Electron.WebviewTag>;\n    webviewSize: { width: number; height: number };\n    setWebviewSize: React.Dispatch<React.SetStateAction<{ width: number; height: number }>>;\n    selectedPreset: SizePreset | null;\n    setSelectedPreset: React.Dispatch<React.SetStateAction<SizePreset | null>>;\n    lockedPreset: SizePreset | null;\n    setLockedPreset: React.Dispatch<React.SetStateAction<SizePreset | null>>;\n    setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;\n    aspectRatioLocked: boolean;\n    webviewId: string;\n}\n\nenum HandleType {\n    Right = 'right',\n    Bottom = 'bottom',\n}\n\nconst ResizeHandles = observer(\n    ({\n        webviewRef,\n        webviewSize,\n        setWebviewSize,\n        setSelectedPreset,\n        lockedPreset,\n        setLockedPreset,\n        setIsResizing,\n        aspectRatioLocked,\n        webviewId,\n    }: ResizeHandleProps) => {\n        const editorEngine = useEditorEngine();\n        const resizeHandleRef = useRef(null);\n        const { toast } = useToast();\n\n        const startResize = (\n            e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>,\n            types: HandleType[],\n        ) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            setIsResizing(true);\n\n            const startX = e.clientX;\n            const startY = e.clientY;\n            const startWidth = webviewSize.width;\n            const startHeight = webviewSize.height;\n            const aspectRatio = startWidth / startHeight;\n\n            const resize: any = (e: MouseEvent) => {\n                const scale = editorEngine.canvas.scale;\n                let heightDelta = types.includes(HandleType.Bottom)\n                    ? (e.clientY - startY) / scale\n                    : 0;\n                let widthDelta = types.includes(HandleType.Right)\n                    ? (e.clientX - startX) / scale\n                    : 0;\n\n                let currentWidth = startWidth + widthDelta;\n                let currentHeight = startHeight + heightDelta;\n\n                if (aspectRatioLocked) {\n                    if (types.includes(HandleType.Right) && !types.includes(HandleType.Bottom)) {\n                        heightDelta = widthDelta / aspectRatio;\n                    } else if (\n                        !types.includes(HandleType.Right) &&\n                        types.includes(HandleType.Bottom)\n                    ) {\n                        widthDelta = heightDelta * aspectRatio;\n                    } else {\n                        if (Math.abs(widthDelta) > Math.abs(heightDelta)) {\n                            heightDelta = widthDelta / aspectRatio;\n                        } else {\n                            widthDelta = heightDelta * aspectRatio;\n                        }\n                    }\n\n                    currentWidth = startWidth + widthDelta;\n                    currentHeight = startHeight + heightDelta;\n\n                    if (currentWidth < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                        currentWidth = parseInt(DefaultSettings.MIN_DIMENSIONS.width);\n                        currentHeight = currentWidth / aspectRatio;\n                    }\n                    if (currentHeight < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                        currentHeight = parseInt(DefaultSettings.MIN_DIMENSIONS.height);\n                        currentWidth = currentHeight * aspectRatio;\n                    }\n                } else {\n                    if (currentWidth < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                        currentWidth = parseInt(DefaultSettings.MIN_DIMENSIONS.width);\n                    }\n                    if (currentHeight < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                        currentHeight = parseInt(DefaultSettings.MIN_DIMENSIONS.height);\n                    }\n                }\n\n                setWebviewSize({\n                    width: Math.floor(currentWidth),\n                    height: Math.floor(currentHeight),\n                });\n\n                setSelectedPreset(null);\n            };\n\n            const stopResize = (e: any) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                setIsResizing(false);\n\n                window.removeEventListener('mousemove', resize);\n                window.removeEventListener('mouseup', stopResize);\n            };\n\n            window.addEventListener('mousemove', resize);\n            window.addEventListener('mouseup', stopResize);\n        };\n\n        const handleLockedResize = () => {\n            const unlockPresetToast = () => {\n                setLockedPreset(null);\n            };\n\n            toast({\n                title: 'Preset dimensions locked.',\n                description: 'Unlock to resize.',\n                action: (\n                    <ToastAction altText=\"Unlock\" onClick={unlockPresetToast}>\n                        Unlock\n                    </ToastAction>\n                ),\n            });\n        };\n\n        return (\n            <div\n                className={cn(\n                    'absolute inset-0 opacity-40 transition min-w-0',\n                    editorEngine.mode === EditorMode.INTERACT ? 'visible' : 'visible',\n                    { 'hover:opacity-60': !lockedPreset },\n                )}\n            >\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -bottom-10 w-full h-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-s-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset ? handleLockedResize() : startResize(e, [HandleType.Bottom])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-48 h-1\"></div>\n                </div>\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -right-10 h-full w-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-e-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset ? handleLockedResize() : startResize(e, [HandleType.Right])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-1 h-48\"></div>\n                </div>\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -bottom-10 -right-10 w-10 h-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-se-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset\n                            ? handleLockedResize()\n                            : startResize(e, [HandleType.Right, HandleType.Bottom])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-2 h-2\"></div>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default ResizeHandles;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Name.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MainChannels' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'invokeMainChannel' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n} from '@onlook/ui/card';\nimport { Input } from '@onlook/ui/input';\nimport { Label } from '@onlook/ui/label';\nimport type { StepProps } from '..';\nimport { getRandomPlaceholder } from '../../../helpers';\nimport { invokeMainChannel } from '@/lib/utils';\n\nexport const LoadNameProject = ({\n    props: { projectData, currentStep, setProjectData, totalSteps, prevStep, nextStep },\n}: {\n    props: StepProps;\n}) => {\n    function setProjectName(name: string) {\n        setProjectData({\n            ...projectData,\n            name,\n        });\n    }\n\n    function goBack() {\n        prevStep();\n    }\n\n    return (\n        <Card className=\"w-[30rem]\">\n            <CardHeader>\n                <CardTitle>{'Letâ€™s name your project'}</CardTitle>\n                <CardDescription>\n                    {\n                        \"This is your Onlook project name. Don't worry, This will not rename your actual folder.\"\n                    }\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-24 flex items-center w-full\">\n                <div className=\"flex flex-col w-full gap-2\">\n                    <Label htmlFor=\"text\">Project Name</Label>\n                    <Input\n                        type=\"text\"\n                        placeholder={getRandomPlaceholder()}\n                        value={projectData.name || ''}\n                        onInput={(e) => setProjectName(e.currentTarget.value)}\n                    />\n                </div>\n            </CardContent>\n            <CardFooter className=\"text-sm\">\n                <p className=\"text-foreground-onlook\">{`${currentStep + 1} of ${totalSteps}`}</p>\n                <div className=\"flex ml-auto gap-2\">\n                    <Button type=\"button\" onClick={goBack} variant=\"ghost\">\n                        Back\n                    </Button>\n                    <Button\n                        disabled={!projectData.name || projectData.name.length === 0}\n                        type=\"button\"\n                        onClick={nextStep}\n                        variant=\"outline\"\n                    >\n                        Next\n                    </Button>\n                </div>\n            </CardFooter>\n        </Card>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/SelectFolder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/SetUrl.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":76,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { invokeMainChannel } from '@/lib/utils';\nimport { DefaultSettings, MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport { CardDescription, CardTitle } from '@onlook/ui/card';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@onlook/ui/collapsible';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { Label } from '@onlook/ui/label';\nimport { cn } from '@onlook/ui/utils';\nimport type React from 'react';\nimport { useState } from 'react';\nimport type { StepComponent } from '../withStepProps';\n\nconst LoadSetUrl: StepComponent = ({ props, variant }) => {\n    const { projectData, setProjectData, prevStep, nextStep } = props;\n    const [projectUrl, setProjectUrl] = useState<string>(projectData.url || '');\n    const [runCommand, setRunCommand] = useState<string>(projectData.commands?.run || '');\n    const [buildCommand, setBuildCommand] = useState<string>(projectData.commands?.build || '');\n    const [installCommand, setInstallCommand] = useState<string>(\n        projectData.commands?.install || '',\n    );\n    const [error, setError] = useState<string | null>(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n    function handleUrlInput(e: React.FormEvent<HTMLInputElement>) {\n        setProjectUrl(e.currentTarget.value);\n        if (!validateUrl(e.currentTarget.value)) {\n            setError('Please use a valid URL');\n            return;\n        } else {\n            setError(null);\n        }\n        setProjectData({\n            ...projectData,\n            url: e.currentTarget.value,\n        });\n    }\n\n    function handleInstallCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setInstallCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                install: e.currentTarget.value,\n            },\n        });\n    }\n\n    function handleRunCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setRunCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                run: e.currentTarget.value,\n            },\n        });\n    }\n\n    function handleBuildCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setBuildCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                build: e.currentTarget.value,\n            },\n        });\n    }\n\n    function validateUrl(url: string): boolean {\n        try {\n            const parsedUrl = new URL(url);\n            return ['http:', 'https:'].includes(parsedUrl.protocol);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    function goBack() {\n        prevStep();\n    }\n\n    function handleNext() {\n        if (!projectData.folderPath) {\n            setError('No project folder path found');\n            return;\n        }\n\n        const updatedInstallCommand = projectData.commands?.install || installCommand;\n\n        if (!updatedInstallCommand) {\n            setError('Please enter a valid install command');\n            return;\n        }\n\n        invokeMainChannel(MainChannels.INSTALL_PROJECT_DEPENDENCIES, {\n            folderPath: projectData.folderPath,\n            installCommand: updatedInstallCommand,\n        });\n        nextStep();\n    }\n\n    const renderHeader = () => (\n        <>\n            <CardTitle>{'Configure your project (optional)'}</CardTitle>\n            <CardDescription>\n                {'Update your project URL and commands or keep the defaults.'}\n            </CardDescription>\n        </>\n    );\n\n    const renderContent = () => (\n        <div className=\"flex flex-col w-full gap-6\">\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"projectUrl\">Local URL</Label>\n                <Input\n                    id=\"projectUrl\"\n                    className=\"bg-secondary\"\n                    value={projectUrl}\n                    type=\"text\"\n                    placeholder=\"http://localhost:3000\"\n                    onInput={handleUrlInput}\n                />\n            </div>\n\n            <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n                <CollapsibleTrigger className=\"flex items-center gap-2 text-sm font-medium\">\n                    <Icons.ChevronDown\n                        className={cn(\n                            'h-4 w-4 transition-transform duration-200',\n                            isOpen ? '' : '-rotate-90',\n                        )}\n                    />\n                    Project Commands\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"pt-4\">\n                    <div className=\"space-y-3\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"installCommand\">Install</Label>\n                            <Input\n                                id=\"installCommand\"\n                                className=\"bg-secondary\"\n                                value={installCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.install}\n                                onInput={handleInstallCommandInput}\n                            />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"runCommand\">Run</Label>\n                            <Input\n                                id=\"runCommand\"\n                                className=\"bg-secondary\"\n                                value={runCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.run}\n                                onInput={handleRunCommandInput}\n                            />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"buildCommand\">Build</Label>\n                            <Input\n                                id=\"buildCommand\"\n                                className=\"bg-secondary\"\n                                value={buildCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.build}\n                                onInput={handleBuildCommandInput}\n                            />\n                        </div>\n                    </div>\n                </CollapsibleContent>\n            </Collapsible>\n\n            <p className=\"text-red-500 text-sm\">{error || ''}</p>\n        </div>\n    );\n\n    const renderFooter = () => (\n        <>\n            <Button type=\"button\" onClick={goBack} variant=\"ghost\">\n                Back\n            </Button>\n            <Button\n                disabled={\n                    !projectData.url ||\n                    projectData.url.length === 0 ||\n                    !projectData.commands?.run ||\n                    projectData.commands?.run.length === 0 ||\n                    !projectData.commands?.build ||\n                    projectData.commands?.build.length === 0\n                }\n                type=\"button\"\n                onClick={handleNext}\n                variant=\"outline\"\n            >\n                {'Next'}\n            </Button>\n        </>\n    );\n\n    switch (variant) {\n        case 'header':\n            return renderHeader();\n        case 'content':\n            return renderContent();\n        case 'footer':\n            return renderFooter();\n    }\n};\n\nLoadSetUrl.Header = (props) => <LoadSetUrl props={props} variant=\"header\" />;\nLoadSetUrl.Content = (props) => <LoadSetUrl props={props} variant=\"content\" />;\nLoadSetUrl.Footer = (props) => <LoadSetUrl props={props} variant=\"footer\" />;\nLoadSetUrl.Header.displayName = 'LoadSetUrl.Header';\nLoadSetUrl.Content.displayName = 'LoadSetUrl.Content';\nLoadSetUrl.Footer.displayName = 'LoadSetUrl.Footer';\n\nexport { LoadSetUrl };\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Warning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/Name.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/SelectFolder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/Setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/stepContents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/withStepProps.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/NoProjectsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/Carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/EditAppButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/Info.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/ProjectSettingsButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/CreateError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/CreateLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/PromptingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":258,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { ProjectTabs } from '@/lib/projects';\nimport { compressImage } from '@/lib/utils';\nimport { MessageContextType, type ImageMessageContext } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { CardContent, CardHeader } from '@onlook/ui/card';\nimport { Icons } from '@onlook/ui/icons';\nimport { MotionCard } from '@onlook/ui/motion-card';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { AnimatePresence, motion, MotionConfig } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport useResizeObserver from 'use-resize-observer';\nimport { DraftImagePill } from '../../editor/EditPanel/ChatTab/ContextPills/DraftingImagePill';\n\nexport const PromptingCard = () => {\n    const projectsManager = useProjectsManager();\n    const { ref: diffRef, height: diffHeight } = useResizeObserver();\n    const [inputValue, setInputValue] = useState('');\n    const [isDragging, setIsDragging] = useState(false);\n    const [selectedImages, setSelectedImages] = useState<ImageMessageContext[]>([]);\n    const [imageTooltipOpen, setImageTooltipOpen] = useState(false);\n    const [isHandlingFile, setIsHandlingFile] = useState(false);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const isInputInvalid = !inputValue || inputValue.trim().length < 10;\n    const [isComposing, setIsComposing] = useState(false);\n    const imageRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        const handleEscapeKey = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                projectsManager.projectsTab = ProjectTabs.PROJECTS;\n            }\n        };\n\n        window.addEventListener('keydown', handleEscapeKey);\n        return () => window.removeEventListener('keydown', handleEscapeKey);\n    }, []);\n\n    const handleSubmit = async () => {\n        if (isInputInvalid) {\n            console.warn('Input is too short');\n            return;\n        }\n        projectsManager.create.sendPrompt(inputValue, selectedImages, false);\n    };\n\n    const handleBlankSubmit = async () => {\n        projectsManager.create.sendPrompt('', [], true);\n    };\n\n    const handleDragOver = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(true);\n    };\n\n    const handleDragLeave = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(false);\n    };\n\n    const handleDrop = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(false);\n        setImageTooltipOpen(false);\n        // Find and reset the container's data attribute\n        const container = e.currentTarget.closest('.bg-background-secondary');\n        if (container) {\n            container.setAttribute('data-dragging-image', 'false');\n        }\n        const files = Array.from(e.dataTransfer.files);\n        handleNewImageFiles(files);\n    };\n\n    const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIsHandlingFile(true);\n        setImageTooltipOpen(false);\n        const files = Array.from(e.target.files || []);\n        handleNewImageFiles(files);\n    };\n\n    const handleNewImageFiles = async (files: File[]) => {\n        const imageFiles = files.filter((file) => file.type.startsWith('image/'));\n\n        const imageContexts: ImageMessageContext[] = [];\n        if (imageFiles.length > 0) {\n            // Handle the dropped image files\n            for (const file of imageFiles) {\n                const imageContext = await createImageMessageContext(file);\n                if (imageContext) {\n                    imageContexts.push(imageContext);\n                }\n            }\n        }\n        setSelectedImages([...selectedImages, ...imageContexts]);\n        setIsHandlingFile(false);\n    };\n\n    const handleRemoveImage = (imageContext: ImageMessageContext) => {\n        if (imageRef && imageRef.current) {\n            imageRef.current.value = '';\n        }\n        setSelectedImages(selectedImages.filter((f) => f !== imageContext));\n    };\n\n    const createImageMessageContext = async (file: File): Promise<ImageMessageContext | null> => {\n        try {\n            const compressedImage = await compressImage(file);\n\n            // If compression failed, fall back to original file\n            const base64 =\n                compressedImage ||\n                (await new Promise<string>((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.onloadend = () => {\n                        resolve(reader.result as string);\n                    };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(file);\n                }));\n\n            return {\n                type: MessageContextType.IMAGE,\n                content: base64,\n                displayName: file.name,\n                mimeType: file.type,\n            };\n        } catch (error) {\n            console.error('Error reading file:', error);\n            return null;\n        }\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            // Find the container div with the bg-background-secondary class\n            const container = e.currentTarget.closest('.bg-background-secondary');\n            if (container) {\n                container.setAttribute('data-dragging-image', isDragging.toString());\n            }\n        }\n    };\n\n    const handleContainerClick = (e: React.MouseEvent) => {\n        // Don't focus if clicking on a button, pill, or the textarea itself\n        if (\n            e.target instanceof Element &&\n            (e.target.closest('button') ||\n                e.target.closest('.group') || // Pills have 'group' class\n                e.target === textareaRef.current)\n        ) {\n            return;\n        }\n\n        textareaRef.current?.focus();\n    };\n\n    const adjustTextareaHeight = () => {\n        if (textareaRef.current) {\n            // Reset height to auto to get the correct scrollHeight\n            textareaRef.current.style.height = 'auto';\n\n            const lineHeight = 20; // Approximate line height in pixels\n            const maxHeight = lineHeight * 10; // 10 lines maximum\n\n            const newHeight = Math.min(textareaRef.current.scrollHeight, maxHeight);\n            textareaRef.current.style.height = `${newHeight}px`;\n        }\n    };\n\n    return (\n        <MotionConfig transition={{ duration: 0.5, type: 'spring', bounce: 0 }}>\n            <div className=\"flex flex-col gap-4 mb-12\">\n                <MotionCard\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ height: diffHeight, opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: 20 }}\n                    className={cn(\n                        'w-[600px] backdrop-blur-md bg-background/30 overflow-hidden',\n                        isDragging && 'bg-background',\n                    )}\n                >\n                    <motion.div ref={diffRef} layout=\"position\" className=\"flex flex-col\">\n                        <CardHeader>\n                            <motion.h2\n                                initial={{ opacity: 0, y: 20 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                className=\"text-2xl text-foreground-primary\"\n                            >\n                                What kind of website do you want to make?\n                            </motion.h2>\n                            <motion.p\n                                initial={{ opacity: 0, y: 20 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                transition={{ delay: 0.1 }}\n                                className=\"text-sm text-foreground-secondary\"\n                            >\n                                Tell us a bit about your project. Be as detailed as possible.\n                            </motion.p>\n                        </CardHeader>\n                        <CardContent>\n                            <div\n                                className={cn(\n                                    'flex flex-col gap-3 rounded p-0 transition-colors duration-200 cursor-text',\n                                    'backdrop-blur-sm bg-background-secondary/80',\n                                    '[&[data-dragging-image=true]]:bg-teal-500/40',\n                                    isDragging && 'bg-teal-500/40 cursor-copy',\n                                )}\n                                onClick={handleContainerClick}\n                                onDragOver={handleDragOver}\n                                onDragLeave={handleDragLeave}\n                                onDrop={handleDrop}\n                            >\n                                <div\n                                    className={`flex flex-col w-full ${selectedImages.length > 0 ? 'p-4' : 'px-4 pt-1'}`}\n                                >\n                                    <div\n                                        className={cn(\n                                            'flex flex-row flex-wrap w-full gap-1.5 text-micro text-foreground-secondary',\n                                            selectedImages.length > 0 ? 'min-h-6' : 'h-0',\n                                        )}\n                                    >\n                                        <AnimatePresence mode=\"popLayout\">\n                                            {selectedImages.map((imageContext, index) => (\n                                                <DraftImagePill\n                                                    key={`image-${index}-${imageContext.content}`}\n                                                    context={imageContext}\n                                                    onRemove={() => handleRemoveImage(imageContext)}\n                                                />\n                                            ))}\n                                        </AnimatePresence>\n                                    </div>\n                                    <Textarea\n                                        ref={textareaRef}\n                                        className={cn(\n                                            'mt-2 overflow-auto min-h-[60px] text-small p-0 border-0 shadow-none rounded-none caret-[#FA003C]',\n                                            'selection:bg-[#FA003C]/30 selection:text-[#FA003C] text-foreground-primary',\n                                            'placeholder:text-foreground-primary/50',\n                                            'cursor-text',\n                                            'transition-[height] duration-300 ease-in-out',\n                                        )}\n                                        placeholder=\"Paste a reference screenshot, write a novel, get creative...\"\n                                        value={inputValue}\n                                        onChange={(e) => {\n                                            setInputValue(e.target.value);\n                                            adjustTextareaHeight();\n                                        }}\n                                        onCompositionStart={() => setIsComposing(true)}\n                                        onCompositionEnd={(e) => {\n                                            setIsComposing(false);\n                                        }}\n                                        onKeyDown={(e) => {\n                                            if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n                                                e.preventDefault();\n                                                handleSubmit();\n                                            }\n                                        }}\n                                        onDragEnter={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            handleDragStateChange(true, e);\n                                        }}\n                                        onDragOver={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            handleDragStateChange(true, e);\n                                        }}\n                                        onDragLeave={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            if (\n                                                !e.currentTarget.contains(e.relatedTarget as Node)\n                                            ) {\n                                                handleDragStateChange(false, e);\n                                            }\n                                        }}\n                                        onDrop={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            handleDragStateChange(false, e);\n                                            handleDrop(e);\n                                        }}\n                                        rows={3}\n                                        style={{ resize: 'none' }}\n                                    />\n                                </div>\n                                <div className=\"flex flex-row w-full justify-between pt-0 pb-2 px-2\">\n                                    <div className=\"flex flex-row justify-start gap-1.5\">\n                                        <Tooltip\n                                            open={imageTooltipOpen && !isHandlingFile}\n                                            onOpenChange={(open) =>\n                                                !isHandlingFile && setImageTooltipOpen(open)\n                                            }\n                                        >\n                                            <TooltipTrigger asChild>\n                                                <Button\n                                                    variant=\"ghost\"\n                                                    size=\"icon\"\n                                                    className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                                    onClick={() =>\n                                                        document\n                                                            .getElementById('image-input')\n                                                            ?.click()\n                                                    }\n                                                >\n                                                    <input\n                                                        id=\"image-input\"\n                                                        type=\"file\"\n                                                        ref={imageRef}\n                                                        accept=\"image/*\"\n                                                        multiple\n                                                        className=\"hidden\"\n                                                        onChange={handleFileSelect}\n                                                    />\n                                                    <Icons.Image\n                                                        className={cn(\n                                                            'w-5 h-5',\n                                                            'group-hover:text-foreground',\n                                                        )}\n                                                    />\n                                                </Button>\n                                            </TooltipTrigger>\n                                            <TooltipPortal>\n                                                <TooltipContent side=\"top\" sideOffset={5}>\n                                                    Upload Image Reference\n                                                </TooltipContent>\n                                            </TooltipPortal>\n                                        </Tooltip>\n                                        <Button\n                                            variant=\"outline\"\n                                            className=\"w-fit h-fit py-0.5 px-2.5 text-foreground-tertiary hidden\"\n                                        >\n                                            <Icons.FilePlus className=\"mr-2\" />\n                                            <span className=\"text-smallPlus\">File Reference</span>\n                                        </Button>\n                                    </div>\n                                    <Tooltip>\n                                        <TooltipTrigger asChild>\n                                            <Button\n                                                size=\"icon\"\n                                                variant=\"secondary\"\n                                                className={cn(\n                                                    'text-smallPlus w-fit h-full py-2 px-2',\n                                                    isInputInvalid\n                                                        ? 'text-primary'\n                                                        : 'bg-foreground-primary text-white hover:bg-foreground-hover',\n                                                )}\n                                                disabled={isInputInvalid}\n                                                onClick={handleSubmit}\n                                            >\n                                                <Icons.ArrowRight\n                                                    className={cn(\n                                                        'w-5 h-5',\n                                                        !isInputInvalid\n                                                            ? 'text-background'\n                                                            : 'text-foreground-primary',\n                                                    )}\n                                                />\n                                            </Button>\n                                        </TooltipTrigger>\n                                        <TooltipPortal>\n                                            <TooltipContent>\n                                                Start building your site\n                                            </TooltipContent>\n                                        </TooltipPortal>\n                                    </Tooltip>\n                                </div>\n                            </div>\n                        </CardContent>\n                    </motion.div>\n                </MotionCard>\n                <Button\n                    variant=\"outline\"\n                    className=\"w-fit mx-auto bg-background-secondary/90 text-sm border text-foreground-secondary\"\n                    onClick={handleBlankSubmit}\n                >\n                    <Icons.File className=\"w-4 h-4 mr-2\" /> Start from a blank page\n                </Button>\n            </div>\n        </MotionConfig>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/TopBar/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editorEngine' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuthManager, useEditorEngine, useProjectsManager } from '@/components/Context';\nimport UserProfileDropdown from '@/components/ui/UserProfileDropdown';\nimport { ProjectTabs } from '@/lib/projects';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\n\nexport const TopBar = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const authManager = useAuthManager();\n\n    function signOut() {\n        authManager.signOut();\n    }\n\n    function openPromptCreation() {\n        projectsManager.projectsTab = ProjectTabs.PROMPT_CREATE;\n    }\n\n    function openImportProject() {\n        projectsManager.projectsTab = ProjectTabs.IMPORT_PROJECT;\n    }\n\n    return (\n        <div className=\"flex flex-row h-12 px-12 items-center\">\n            <div className=\"flex-1 flex items-center justify-start mt-3\">\n                <Icons.OnlookTextLogo className=\"w-24\" viewBox=\"0 0 139 17\" />\n            </div>\n            <div className=\"flex-1 flex justify-end space-x-2 mt-4 items-center\">\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            className=\"text-sm text-foreground-onlook focus:outline-none\"\n                            variant=\"ghost\"\n                        >\n                            <Icons.Plus className=\"w-5 h-5 mr-2\" />\n                            New Project\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                        <DropdownMenuItem\n                            className={cn(\n                                'focus:bg-blue-100 focus:text-blue-900',\n                                'hover:bg-blue-100 hover:text-blue-900',\n                                'dark:focus:bg-blue-900 dark:focus:text-blue-100',\n                                'dark:hover:bg-blue-900 dark:hover:text-blue-100',\n                            )}\n                            onSelect={openPromptCreation}\n                        >\n                            <Icons.FilePlus className=\"w-4 h-4 mr-2\" />\n                            Start from scratch\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                            className={cn(\n                                'focus:bg-teal-100 focus:text-teal-900',\n                                'hover:bg-teal-100 hover:text-teal-900',\n                                'dark:focus:bg-teal-900 dark:focus:text-teal-100',\n                                'dark:hover:bg-teal-900 dark:hover:text-teal-100',\n                            )}\n                            onSelect={openImportProject}\n                        >\n                            <Icons.Download className=\"w-4 h-4 mr-2\" />\n                            Import existing project\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n                <UserProfileDropdown>\n                    <DropdownMenuItem disabled={!authManager.isAuthEnabled} onSelect={signOut}>\n                        <Icons.Exit className=\"w-4 h-4 mr-2\" />\n                        Sign out\n                    </DropdownMenuItem>\n                </UserProfileDropdown>\n            </div>\n        </div>\n    );\n});\n\nexport default TopBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":66,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { invokeMainChannel, platformSlash } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport { capitalizeFirstLetter } from '/common/helpers';\n\nexport enum CreateMethod {\n    LOAD = 'load',\n    NEW = 'new',\n}\n\nexport const PLACEHOLDER_NAMES = [\n    'The greatest app in the world',\n    'My epic project',\n    'The greatest project ever',\n    'A revolutionary idea',\n    'Project X',\n    'Genius React App',\n    'The next billion dollar idea',\n    'Mind-blowingly cool app',\n    'Earth-shatteringly great app',\n    'Moonshot project',\n];\n\nexport const SETTINGS_MESSAGE = [\n    'Set some dials and knobs and stuff',\n    'Fine-tune how you want to build',\n    'Swap out your default code editor if you dare',\n    \"You shouldn't be worried about this stuff, yet here you are\",\n    'Mostly a formality',\n    \"What's this button do?\",\n    'Customize how you want to build',\n    'Thanks for stopping by the Settings page',\n    'This is where the good stuff is',\n    'Open 24 hours, 7 days a week',\n    '*beep boop*',\n    \"Welcome. We've been expecting you.\",\n];\n\nexport function getRandomPlaceholder() {\n    return PLACEHOLDER_NAMES[Math.floor(Math.random() * PLACEHOLDER_NAMES.length)];\n}\n\nexport function getRandomSettingsMessage() {\n    return SETTINGS_MESSAGE[Math.floor(Math.random() * SETTINGS_MESSAGE.length)];\n}\n\nexport async function getPreviewImage(filename: string): Promise<string | null> {\n    const base64Img = (await invokeMainChannel(MainChannels.GET_IMAGE, filename)) as string | null;\n    if (!base64Img) {\n        return null;\n    }\n    return base64Img;\n}\n\nconst STEP_MAP = {\n    [CreateMethod.LOAD]: ['Select folder', 'Verify project', 'Name project', 'Set URL'],\n    [CreateMethod.NEW]: ['Name project', 'Select folder', 'Install project', 'Run project'],\n};\n\nexport function getStepName(method: CreateMethod | null, step: number): string {\n    try {\n        if (!method) {\n            return 'Unknown Method';\n        }\n\n        return STEP_MAP?.[method]?.[step];\n    } catch (e) {\n        return 'Unknown Step';\n    }\n}\n\nexport function getNameFromPath(path: string): string {\n    const parts = path.split(/[/\\\\]/);\n    const name = parts.pop() || '';\n    return capitalizeFirstLetter(name);\n}\n\nexport function getFolderNameAndTargetPath(fullPath: string): { name: string; path: string } {\n    const pathParts = fullPath.split(/[/\\\\]/);\n    const newFolderName = pathParts[pathParts.length - 1] || '';\n    const pathToFolders = pathParts.slice(0, -1).join(platformSlash);\n    return { name: newFolderName, path: pathToFolders };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/signin/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/binary.test.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":1,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":1,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-nocheck\nimport { describe, expect, test } from 'bun:test';\nimport { isBinary, isText } from 'istextorbinary';\n\ndescribe('istextorbinary', () => {\n    test('should identify text files', () => {\n        expect(isText('test.txt')).toBe(true);\n        expect(isText('test.js')).toBe(true);\n        expect(isText('test.html')).toBe(true);\n        expect(isText('test.css')).toBe(true);\n    });\n\n    test('should identify binary files', () => {\n        expect(isBinary('test.png')).toBe(true);\n        expect(isBinary('test.jpg')).toBe(true);\n        expect(isBinary('test.pdf')).toBe(true);\n    });\n\n    test('should identify text content', () => {\n        const textContent = Buffer.from('Hello, world!');\n        expect(isText(null, textContent)).toBe(true);\n    });\n\n    test('should identify binary content', () => {\n        // Create a small binary buffer with some non-text bytes\n        const binaryContent = Buffer.from([0xff, 0x00, 0x00, 0xff]);\n        expect(isBinary(null, binaryContent)).toBe(true);\n    });\n\n    test('should handle both filename and content together', () => {\n        const textContent = Buffer.from('Hello, world!');\n        const binaryContent = Buffer.from([0xff, 0x00, 0x00, 0xff]);\n\n        // Test text file with text content\n        expect(isText('test.txt', textContent)).toBe(true);\n\n        // Test binary file with binary content\n        expect(isBinary('test.png', binaryContent)).toBe(true);\n\n        // Test binary file with text content\n        expect(isBinary('test.png', textContent)).toBe(true);\n\n        // Test text file with binary content\n        expect(isText('test.txt', binaryContent)).toBe(true);\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/bun.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/gitignore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/styles.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
[36mâ””â”€[0m [36mRunning...[0m
[?2026l[?2026h[0G[K[1A[K[1A[K[1A[K[1m@onlook/studio[0m lint $ [2meslint --fix .[0m
[36mâ”‚[0m [{"filePath":"/home/ubuntu/repos/onlook/apps/studio/builder-config/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/template.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/timer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/helpers/twTranslator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/hotkeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/common/ide.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/e2e/example.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/electron-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/assets/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":126,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ImageContentData } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { promises as fs, readFileSync } from 'fs';\nimport mime from 'mime-lite';\nimport path from 'path';\nimport writeFileAtomic from 'write-file-atomic';\n\nasync function scanImagesDirectory(projectRoot: string): Promise<ImageContentData[]> {\n    const imagesPath = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const images: ImageContentData[] = [];\n\n    try {\n        const entries = await fs.readdir(imagesPath, { withFileTypes: true });\n\n        for (const entry of entries) {\n            if (entry.isFile()) {\n                const extension = path.extname(entry.name).toLowerCase();\n                // Common image extensions\n                if (\n                    ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.ico'].includes(extension)\n                ) {\n                    const imagePath = path.join(imagesPath, entry.name);\n                    const image = readFileSync(imagePath, { encoding: 'base64' });\n                    const mimeType = mime.getType(imagePath);\n                    if (!mimeType) {\n                        console.error(`Failed to get mime type for ${imagePath}`);\n                        continue;\n                    }\n                    images.push({\n                        fileName: entry.name,\n                        content: `data:${mimeType};base64,${image}`,\n                        mimeType,\n                    });\n                }\n            }\n        }\n\n        return images;\n    } catch (error) {\n        console.error('Error scanning images directory:', error);\n        return [];\n    }\n}\n\nexport async function scanNextJsImages(projectRoot: string): Promise<ImageContentData[]> {\n    try {\n        return await scanImagesDirectory(projectRoot);\n    } catch (error) {\n        console.error('Error scanning images:', error);\n        throw error;\n    }\n}\n\nexport async function saveImageToProject(\n    projectFolder: string,\n    content: string,\n    fileName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectFolder, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, fileName);\n\n        try {\n            await fs.access(imagePath);\n            throw new Error(`File ${fileName} already exists`);\n        } catch (err: any) {\n            if (err.code === 'ENOENT') {\n                const buffer = Buffer.from(content, 'base64');\n                await fs.writeFile(imagePath, buffer);\n                return imagePath;\n            }\n            throw err;\n        }\n    } catch (error) {\n        console.error('Error uploading image:', error);\n        throw error;\n    }\n}\n\nexport async function deleteImageFromProject(\n    projectRoot: string,\n    imageName: string,\n): Promise<string> {\n    try {\n        const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n        const imagePath = path.join(imageFolder, imageName);\n        await fs.unlink(imagePath);\n        return imagePath;\n    } catch (error) {\n        console.error('Error deleting image:', error);\n        throw error;\n    }\n}\n\nexport async function renameImageInProject(\n    projectRoot: string,\n    imageName: string,\n    newName: string,\n): Promise<string> {\n    if (!imageName || !newName) {\n        throw new Error('Image name and new name are required');\n    }\n\n    const imageFolder = path.join(projectRoot, DefaultSettings.IMAGE_FOLDER);\n    const oldImagePath = path.join(imageFolder, imageName);\n    const newImagePath = path.join(imageFolder, newName);\n\n    try {\n        await validateRename(oldImagePath, newImagePath);\n        await fs.rename(oldImagePath, newImagePath);\n\n        await updateImageReferences(projectRoot, imageName, newName);\n        return newImagePath;\n    } catch (error) {\n        console.error('Error renaming image:', error);\n        throw error;\n    }\n}\n\nconst MAX_FILENAME_LENGTH = 255;\nconst VALID_FILENAME_REGEX = /^[a-zA-Z0-9-_. ]+$/;\n\nasync function validateRename(oldImagePath: string, newImagePath: string): Promise<void> {\n    try {\n        await fs.access(oldImagePath);\n    } catch (err) {\n        throw new Error(`Source image does not exist`);\n    }\n\n    const newFileName = path.basename(newImagePath);\n\n    if (newFileName.length > MAX_FILENAME_LENGTH) {\n        throw new Error(`File name is too long (max ${MAX_FILENAME_LENGTH} characters)`);\n    }\n\n    if (!VALID_FILENAME_REGEX.test(newFileName)) {\n        throw new Error(\n            'File name can only contain letters, numbers, spaces, hyphens, underscores, and periods',\n        );\n    }\n\n    try {\n        await fs.access(newImagePath);\n        throw new Error(`A file with this name already exists`);\n    } catch (err: any) {\n        if (err.code !== 'ENOENT') {\n            throw err;\n        }\n    }\n}\n\nasync function updateImageReferences(\n    projectRoot: string,\n    oldName: string,\n    newName: string,\n): Promise<void> {\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const oldImageUrl = `/${prefix}/${oldName}`;\n    const newImageUrl = `/${prefix}/${newName}`;\n    const pattern = new RegExp(oldImageUrl.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g');\n\n    const sourceFiles = await findSourceFiles(projectRoot);\n    await Promise.all(\n        sourceFiles.map(async (file) => {\n            const content = await fs.readFile(file, 'utf8');\n            if (!content.includes(oldImageUrl)) {\n                return;\n            }\n            const updatedContent = content.replace(pattern, newImageUrl);\n            await writeFileAtomic(file, updatedContent, { encoding: 'utf8' });\n        }),\n    );\n}\n\nasync function findSourceFiles(\n    dirPath: string,\n    maxDepth: number = 10,\n    currentDepth: number = 0,\n): Promise<string[]> {\n    if (currentDepth >= maxDepth) {\n        console.warn(`Max directory depth (${maxDepth}) reached at: ${dirPath}`);\n        return [];\n    }\n\n    const files: string[] = [];\n    const entries = await fs.readdir(dirPath, { withFileTypes: true });\n\n    for (const entry of entries) {\n        const fullPath = path.join(dirPath, entry.name);\n        if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n            files.push(...(await findSourceFiles(fullPath, maxDepth, currentDepth + 1)));\n        } else if (\n            entry.isFile() &&\n            (entry.name.endsWith('.tsx') ||\n                entry.name.endsWith('.jsx') ||\n                entry.name.endsWith('.ts'))\n        ) {\n            files.push(fullPath);\n        }\n    }\n\n    return files;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/bun/parse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/chat/llmProvider.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/classes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/image.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is defined but never used.","line":32,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'action' is defined but never used.","line":32,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport * as t from '@babel/types';\nimport { type CodeInsertImage, type CodeRemoveImage } from '@onlook/models/actions';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { join } from 'path';\nimport { writeFile } from '../files';\nimport { addClassToNode } from './style';\n\nexport function insertImageToNode(path: NodePath<t.JSXElement>, action: CodeInsertImage): void {\n    const imageName = writeImageToFile(action);\n    if (!imageName) {\n        console.error('Failed to write image to file');\n        return;\n    }\n    const prefix = DefaultSettings.IMAGE_FOLDER.replace(/^public\\//, '');\n    const backgroundClass = `bg-[url(/${prefix}/${imageName})]`;\n    addClassToNode(path.node, backgroundClass);\n}\n\nfunction writeImageToFile(action: CodeInsertImage): string | null {\n    try {\n        const imageFolder = `${action.folderPath}/${DefaultSettings.IMAGE_FOLDER}`;\n        const imagePath = join(imageFolder, action.image.fileName);\n        writeFile(imagePath, action.image.content, 'base64');\n        return action.image.fileName;\n    } catch (error) {\n        console.error('Failed to write image to file', error);\n        return null;\n    }\n}\n\nexport function removeImageFromNode(path: NodePath<t.JSXElement>, action: CodeRemoveImage): void {}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/move.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/remove.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'element' is defined but never used.","line":6,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NodePath } from '@babel/traverse';\nimport type * as t from '@babel/types';\nimport type { CodeRemove } from '@onlook/models/actions';\nimport { addKeyToElement, jsxFilter } from './helpers';\n\nexport function removeElementFromNode(path: NodePath<t.JSXElement>, element: CodeRemove): void {\n    const parentPath = path.parentPath;\n\n    if (!parentPath) {\n        console.error('No parent path found');\n        return;\n    }\n\n    const siblings = (parentPath.node as t.JSXElement).children?.filter(jsxFilter) || [];\n    path.remove();\n\n    siblings.forEach((sibling) => {\n        addKeyToElement(sibling);\n    });\n\n    path.stop();\n}\n\nexport function removeElementAtIndex(\n    index: number,\n    jsxElements: Array<t.JSXElement | t.JSXFragment>,\n    children: t.Node[],\n) {\n    if (index >= 0 && index < jsxElements.length) {\n        const elementToRemove = jsxElements[index];\n        const indexInChildren = children.indexOf(elementToRemove);\n\n        if (indexInChildren !== -1) {\n            children.splice(indexInChildren, 1);\n        } else {\n            console.error('Element to be removed not found in children');\n        }\n    } else {\n        console.error('Invalid element index for removal');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/diff/transform.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/files.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/props.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/code/templateNode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/install.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/create/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/asset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":10,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":10,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { signIn, signOut } from '../auth';\n\nexport function listenForAuthMessages() {\n    ipcMain.handle(MainChannels.SIGN_IN, (e: Electron.IpcMainInvokeEvent, args) => {\n        signIn(args.provider);\n    });\n\n    ipcMain.handle(MainChannels.SIGN_OUT, (e: Electron.IpcMainInvokeEvent, args) => {\n        signOut();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ChatConversation, ProjectSuggestions, StreamRequestType } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { ipcMain } from 'electron';\nimport Chat from '../chat';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForChatMessages() {\n    ipcMain.handle(\n        MainChannels.SEND_CHAT_MESSAGES_STREAM,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { messages, requestType } = args as {\n                messages: CoreMessage[];\n                requestType: StreamRequestType;\n            };\n            return Chat.stream(messages, requestType);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_STOP_STREAM_REQUEST,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            return Chat.abortStream();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.GET_CONVERSATIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            return PersistentStorage.CONVERSATIONS.getCollection(projectId);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { conversation } = args as { conversation: ChatConversation };\n        return PersistentStorage.CONVERSATIONS.writeItem(conversation);\n    });\n\n    ipcMain.handle(MainChannels.DELETE_CONVERSATION, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return PersistentStorage.CONVERSATIONS.deleteItem(id);\n    });\n\n    ipcMain.handle(MainChannels.GENERATE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { messages } = args as {\n            messages: CoreMessage[];\n        };\n        return Chat.generateSuggestions(messages);\n    });\n\n    ipcMain.handle(\n        MainChannels.GET_SUGGESTIONS_BY_PROJECT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { projectId } = args as { projectId: string };\n            const suggestions = PersistentStorage.SUGGESTIONS.getCollection(\n                projectId,\n            ) as ProjectSuggestions[];\n            return suggestions.flatMap((suggestion) => suggestion.suggestions);\n        },\n    );\n\n    ipcMain.handle(MainChannels.SAVE_SUGGESTIONS, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { suggestions } = args as { suggestions: ProjectSuggestions };\n        return PersistentStorage.SUGGESTIONS.writeItem(suggestions);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/create.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":48,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CreateStage, SetupStage, type CreateCallback, type SetupCallback } from '@onlook/models';\nimport type { ImageMessageContext } from '@onlook/models/chat';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { mainWindow } from '..';\nimport projectCreator from '../create';\nimport { createProject } from '../create/install';\nimport { installProjectDependencies } from '../create/setup';\n\nexport function listenForCreateMessages() {\n    ipcMain.handle(MainChannels.CREATE_NEW_PROJECT, (e: Electron.IpcMainInvokeEvent, args) => {\n        const progressCallback: CreateCallback = (stage: CreateStage, message: string) => {\n            mainWindow?.webContents.send(MainChannels.CREATE_NEW_PROJECT_CALLBACK, {\n                stage,\n                message,\n            });\n        };\n\n        const { name, path } = args as { name: string; path: string };\n        return createProject(name, path, progressCallback);\n    });\n\n    ipcMain.handle(\n        MainChannels.INSTALL_PROJECT_DEPENDENCIES,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const progressCallback: SetupCallback = (stage: SetupStage, message: string) => {\n                mainWindow?.webContents.send(MainChannels.SETUP_PROJECT_CALLBACK, {\n                    stage,\n                    message,\n                });\n            };\n            const { folderPath, installCommand } = args;\n            return installProjectDependencies(folderPath, installCommand, progressCallback);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent, args) => {\n            const { prompt, images } = args as {\n                prompt: string;\n                images: ImageMessageContext[];\n            };\n            return projectCreator.createProject(prompt, images);\n        },\n    );\n\n    ipcMain.handle(MainChannels.CREATE_NEW_BLANK_PROJECT, (e: Electron.IpcMainInvokeEvent) => {\n        return projectCreator.createBlankProject();\n    });\n\n    ipcMain.handle(\n        MainChannels.CANCEL_CREATE_NEW_PROJECT_PROMPT,\n        (e: Electron.IpcMainInvokeEvent) => {\n            return projectCreator.cancel();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/hosting.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCustomDomains' is defined but never used.","line":7,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_e' is defined but never used.","line":44,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { PublishRequest, PublishResponse, UnpublishRequest } from '@onlook/models/hosting';\nimport { ipcMain } from 'electron';\nimport hostingManager from '../hosting';\nimport {\n    createDomainVerification,\n    getCustomDomains,\n    getOwnedDomains,\n    verifyDomain,\n} from '../hosting/domains';\n\nexport function listenForHostingMessages() {\n    ipcMain.handle(\n        MainChannels.PUBLISH_TO_DOMAIN,\n        async (_e: Electron.IpcMainInvokeEvent, args: PublishRequest): Promise<PublishResponse> => {\n            return await hostingManager.publish(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.UNPUBLISH_DOMAIN,\n        async (\n            e: Electron.IpcMainInvokeEvent,\n            args: UnpublishRequest,\n        ): Promise<PublishResponse> => {\n            const { urls } = args;\n            return await hostingManager.unpublish(urls);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CREATE_DOMAIN_VERIFICATION,\n        async (_e: Electron.IpcMainInvokeEvent, args) => {\n            const { domain } = args;\n            return await createDomainVerification(domain);\n        },\n    );\n\n    ipcMain.handle(MainChannels.VERIFY_DOMAIN, async (_e: Electron.IpcMainInvokeEvent, args) => {\n        const { domain } = args;\n        return await verifyDomain(domain);\n    });\n\n    ipcMain.handle(MainChannels.GET_OWNED_DOMAINS, async (_e: Electron.IpcMainInvokeEvent) => {\n        return await getOwnedDomains();\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":41,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":41,"column":78,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":61,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { WindowCommand } from '@onlook/models/projects';\nimport { BrowserWindow, ipcMain, shell } from 'electron';\nimport { mainWindow } from '..';\nimport { imageStorage } from '../storage/images';\nimport { updater } from '../update';\nimport { listenForAnalyticsMessages } from './analytics';\nimport { listenForAssetMessages } from './asset';\nimport { listenForAuthMessages } from './auth';\nimport { listenForChatMessages } from './chat';\nimport { listenForCodeMessages } from './code';\nimport { listenForCreateMessages } from './create';\nimport { listenForHostingMessages } from './hosting';\nimport { listenForPageMessages } from './page';\nimport { listenForPaymentMessages } from './payments';\nimport { listenForRunMessages } from './run';\nimport { listenForStorageMessages } from './storage';\n\nexport function listenForIpcMessages() {\n    listenForGeneralMessages();\n    listenForAnalyticsMessages();\n    listenForCodeMessages();\n    listenForStorageMessages();\n    listenForAuthMessages();\n    listenForCreateMessages();\n    listenForChatMessages();\n    listenForRunMessages();\n    listenForHostingMessages();\n    listenForPaymentMessages();\n    listenForPageMessages();\n    listenForAssetMessages();\n}\n\nexport function removeIpcListeners() {\n    Object.values(MainChannels).forEach((channel) => {\n        ipcMain.removeHandler(channel);\n    });\n}\n\nfunction listenForGeneralMessages() {\n    ipcMain.handle(MainChannels.RELOAD_APP, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return mainWindow?.reload();\n    });\n\n    ipcMain.handle(\n        MainChannels.OPEN_IN_EXPLORER,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.showItemInFolder(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.OPEN_EXTERNAL_WINDOW,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return shell.openExternal(args);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.QUIT_AND_INSTALL,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            return updater.quitAndInstall();\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_IMAGE, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return imageStorage.readImage(args);\n    });\n\n    ipcMain.handle(\n        MainChannels.SAVE_IMAGE,\n        (e: Electron.IpcMainInvokeEvent, args: { img: string; name: string }) => {\n            return imageStorage.writeImage(args.name, args.img);\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.SEND_WINDOW_COMMAND,\n        (e: Electron.IpcMainInvokeEvent, args: string) => {\n            const window = BrowserWindow.getFocusedWindow();\n\n            const command = args as WindowCommand;\n            switch (command) {\n                case WindowCommand.MINIMIZE:\n                    window?.minimize();\n                    break;\n                case WindowCommand.MAXIMIZE:\n                    window?.maximize();\n                    break;\n                case WindowCommand.UNMAXIMIZE:\n                    window?.unmaximize();\n                    break;\n                case WindowCommand.CLOSE:\n                    window?.close();\n                    break;\n            }\n        },\n    );\n\n    ipcMain.handle(MainChannels.DELETE_FOLDER, (e: Electron.IpcMainInvokeEvent, args: string) => {\n        return shell.trashItem(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/payments.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":8,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":8,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":15,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":15,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":22,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":22,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { checkoutWithStripe, checkSubscription, manageSubscription } from '../payment';\n\nexport function listenForPaymentMessages() {\n    ipcMain.handle(\n        MainChannels.CREATE_STRIPE_CHECKOUT,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkoutWithStripe();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.MANAGE_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await manageSubscription();\n        },\n    );\n\n    ipcMain.handle(\n        MainChannels.CHECK_SUBSCRIPTION,\n        async (e: Electron.IpcMainInvokeEvent, args) => {\n            return await checkSubscription();\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/run.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":37,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":37,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DetectedPortResults } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { ipcMain } from 'electron';\nimport { isPortAvailable, runBunCommand } from '../bun';\nimport run from '../run';\nimport terminal from '../run/terminal';\n\nexport async function listenForRunMessages() {\n    ipcMain.handle(MainChannels.RUN_START, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.start(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.RUN_STOP, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath } = args as { id: string; folderPath: string };\n        return run.stop(id, folderPath);\n    });\n\n    ipcMain.handle(MainChannels.RUN_RESTART, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id, folderPath, command } = args as {\n            id: string;\n            folderPath: string;\n            command: string;\n        };\n        return run.restart(id, folderPath, command);\n    });\n\n    ipcMain.handle(MainChannels.GET_TEMPLATE_NODE, (e: Electron.IpcMainInvokeEvent, args) => {\n        const { id } = args as { id: string };\n        return run.getTemplateNode(id);\n    });\n\n    ipcMain.handle(MainChannels.GET_RUN_STATE, (_, args) => {\n        return run.state;\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_INPUT, (_, args) => {\n        const { id, data } = args as { id: string; data: string };\n        return terminal.write(id, data);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_EXECUTE_COMMAND, (_, args) => {\n        const { id, command } = args as { id: string; command: string };\n        return terminal.executeCommand(id, command);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_RESIZE, (_, args) => {\n        const { id, cols, rows } = args as { id: string; cols: number; rows: number };\n        return terminal.resize(id, cols, rows);\n    });\n\n    ipcMain.handle(MainChannels.TERMINAL_GET_HISTORY, (_, args) => {\n        const { id } = args as { id: string };\n        return terminal.getHistory(id);\n    });\n\n    ipcMain.handle(MainChannels.RUN_COMMAND, async (_, args) => {\n        const { cwd, command } = args as { cwd: string; command: string };\n        return await runBunCommand(command, { cwd });\n    });\n\n    ipcMain.handle(\n        MainChannels.IS_PORT_AVAILABLE,\n        async (e: Electron.IpcMainInvokeEvent, args): Promise<DetectedPortResults> => {\n            const { port } = args as { port: number };\n            return await isPortAvailable(port);\n        },\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/events/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":9,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":20,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":47,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { AppState, UserMetadata, UserSettings } from '@onlook/models/settings';\nimport { ipcMain } from 'electron';\nimport mixpanel from '../analytics';\nimport { getRefreshedAuthTokens } from '../auth';\nimport { PersistentStorage } from '../storage';\n\nexport function listenForStorageMessages() {\n    ipcMain.handle(MainChannels.GET_USER_SETTINGS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_SETTINGS.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_SETTINGS,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserSettings>) => {\n            PersistentStorage.USER_SETTINGS.update(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_USER_METADATA, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.USER_METADATA.read();\n    });\n\n    ipcMain.handle(\n        MainChannels.UPDATE_USER_METADATA,\n        (e: Electron.IpcMainInvokeEvent, args: Partial<UserMetadata>) => {\n            PersistentStorage.USER_METADATA.update(args);\n            mixpanel.updateUserMetadata(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_APP_STATE, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.APP_STATE.read();\n    });\n\n    ipcMain.handle(MainChannels.IS_USER_SIGNED_IN, (e: Electron.IpcMainInvokeEvent) => {\n        return getRefreshedAuthTokens();\n    });\n\n    ipcMain.handle(\n        MainChannels.REPLACE_APP_STATE,\n        (e: Electron.IpcMainInvokeEvent, args: AppState) => {\n            PersistentStorage.APP_STATE.replace(args);\n        },\n    );\n\n    ipcMain.handle(MainChannels.GET_PROJECTS, (e: Electron.IpcMainInvokeEvent) => {\n        return PersistentStorage.PROJECTS.read();\n    });\n\n    ipcMain.handle(MainChannels.UPDATE_PROJECTS, (e: Electron.IpcMainInvokeEvent, args: any) => {\n        PersistentStorage.PROJECTS.update(args);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/domains.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/hosting/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'require' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAIN_DIST' is assigned a value but never used.","line":21,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":75,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":123,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":125,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { APP_NAME, APP_SCHEMA } from '@onlook/models/constants';\nimport { BrowserWindow, app, shell } from 'electron';\nimport fixPath from 'fix-path';\nimport { createRequire } from 'node:module';\nimport os from 'node:os';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { sendAnalytics } from './analytics';\nimport { handleAuthCallback, setupAuthAutoRefresh } from './auth';\nimport { listenForIpcMessages } from './events';\nimport { updater } from './update';\n\n// Help main inherit $PATH defined in dotfiles (.bashrc/.bash_profile/.zshrc/etc).\nfixPath();\n\nexport let mainWindow: BrowserWindow | null = null;\nconst require = createRequire(import.meta.url);\nexport const __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Constants\nconst MAIN_DIST = path.join(__dirname, '../../dist-electron');\nconst RENDERER_DIST = path.join(__dirname, '../../dist');\nconst PRELOAD_PATH = path.join(__dirname, '../preload/index.js');\nconst INDEX_HTML = path.join(RENDERER_DIST, 'index.html');\nconst VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;\n\n// Environment setup\nconst setupEnvironment = () => {\n    process.env.APP_ROOT = path.join(__dirname, '../..');\n    process.env.WEBVIEW_PRELOAD_PATH = path.join(__dirname, '../preload/webview.js');\n    process.env.APP_VERSION = app.getVersion();\n    process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n        ? path.join(process.env.APP_ROOT, 'public')\n        : RENDERER_DIST;\n};\n\n// Platform-specific configurations\nconst configurePlatformSpecifics = () => {\n    if (os.release().startsWith('6.1')) {\n        app.disableHardwareAcceleration();\n    }\n\n    if (process.platform === 'win32') {\n        app.setAppUserModelId(app.getName());\n    }\n};\n\n// Protocol setup\nconst setupProtocol = () => {\n    if (process.defaultApp && process.argv.length >= 2) {\n        app.setAsDefaultProtocolClient(APP_SCHEMA, process.execPath, [\n            path.resolve(process.argv?.[1]),\n        ]);\n    } else {\n        app.setAsDefaultProtocolClient(APP_SCHEMA);\n    }\n};\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        title: APP_NAME,\n        minWidth: 800,\n        icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n        titleBarStyle: 'hiddenInset',\n        frame: false,\n        webPreferences: {\n            preload: PRELOAD_PATH,\n            webviewTag: true,\n        },\n    });\n    return mainWindow;\n};\n\nconst loadWindowContent = (win: BrowserWindow) => {\n    VITE_DEV_SERVER_URL ? win.loadURL(VITE_DEV_SERVER_URL) : win.loadFile(INDEX_HTML);\n};\n\nconst initMainWindow = () => {\n    const win = createWindow();\n    win.maximize();\n    loadWindowContent(win);\n    win.webContents.setWindowOpenHandler(({ url }) => {\n        if (url.startsWith('https:')) {\n            shell.openExternal(url);\n        }\n        return { action: 'deny' };\n    });\n\n    setupAuthAutoRefresh();\n};\n\nconst setupAppEventListeners = () => {\n    app.whenReady().then(() => {\n        initMainWindow();\n    });\n\n    app.on('ready', () => {\n        updater.listen();\n        sendAnalytics('start app');\n    });\n\n    app.on('window-all-closed', async () => {\n        if (process.platform !== 'darwin') {\n            mainWindow = null;\n            app.quit();\n        }\n    });\n\n    app.on('second-instance', (_, commandLine) => {\n        if (mainWindow) {\n            if (mainWindow.isMinimized()) {\n                mainWindow.restore();\n            }\n            mainWindow.focus();\n        }\n        const url = commandLine.find((arg) => arg.startsWith(`${APP_SCHEMA}://`));\n        if (url && process.platform !== 'darwin') {\n            handleAuthCallback(url);\n        }\n    });\n\n    app.on('activate', () => {\n        BrowserWindow.getAllWindows().length\n            ? BrowserWindow.getAllWindows()?.[0]?.focus()\n            : initMainWindow();\n    });\n\n    app.on('open-url', (event, url) => {\n        event.preventDefault();\n        handleAuthCallback(url);\n    });\n\n    app.on('quit', () => sendAnalytics('quit app'));\n};\n\n// Main function\nconst main = async () => {\n    if (!app.requestSingleInstanceLock()) {\n        app.quit();\n        process.exit(0);\n    }\n\n    setupEnvironment();\n    configurePlatformSpecifics();\n    setupProtocol();\n    setupAppEventListeners();\n    listenForIpcMessages();\n};\n\nmain();\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/delete.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":22,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { promises as fs } from 'fs';\nimport * as path from 'path';\nimport { cleanupEmptyFolders, detectRouterType } from './helpers';\n\nexport async function deleteNextJsPage(projectRoot: string, pagePath: string, isDir: boolean) {\n    try {\n        const routerConfig = await detectRouterType(projectRoot);\n\n        if (!routerConfig) {\n            throw new Error('Could not detect Next.js router type');\n        }\n\n        if (routerConfig.type !== 'app') {\n            throw new Error('Page deletion is only supported for App Router projects for now.');\n        }\n\n        const fullPath = path.join(routerConfig.basePath, pagePath);\n\n        // Check if file/folder exists\n        let stats;\n        try {\n            stats = await fs.stat(fullPath);\n        } catch (err) {\n            if (err instanceof Error && 'code' in err && err.code === 'ENOENT') {\n                throw new Error('Selected page not found');\n            }\n            throw err;\n        }\n\n        if (isDir) {\n            await fs.rm(fullPath, { recursive: true, force: true });\n        } else {\n            const selectedFilePath = path.join(fullPath, 'page.tsx');\n            await fs.unlink(selectedFilePath);\n            await cleanupEmptyFolders(path.dirname(fullPath));\n        }\n\n        console.log(`Deleted: ${fullPath}`);\n        return true;\n    } catch (error) {\n        console.error('Error deleting page:', error);\n        throw error;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/duplicate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/rename.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/pages/scan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/run/terminal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/directory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/file.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/images.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/storage/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/main/update/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/browserview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/bundles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/group.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":56,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ActionTarget, GroupContainer } from '@onlook/models/actions';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement } from '../helpers';\nimport { elementFromDomId } from '/common/helpers';\n\nexport function groupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = createContainerElement(container);\n\n    // Find child elements and their positions\n    const childrenMap = new Set(children.map((c) => c.domId));\n    const childrenWithIndices = Array.from(parentEl.children)\n        .map((child, index) => ({\n            element: child as HTMLElement,\n            index,\n            domId: getOrAssignDomId(child as HTMLElement),\n        }))\n        .filter(({ domId }) => childrenMap.has(domId));\n\n    if (childrenWithIndices.length === 0) {\n        console.warn('No valid children found to group');\n        return null;\n    }\n\n    // Insert container at the position of the first child\n    const insertIndex = Math.min(...childrenWithIndices.map((c) => c.index));\n    parentEl.insertBefore(containerEl, parentEl.children?.[insertIndex]);\n\n    // Move children into container\n    childrenWithIndices.forEach(({ element }) => {\n        const newElement = element.cloneNode(true) as HTMLElement;\n\n        newElement.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        containerEl.appendChild(newElement);\n        element.style.display = 'none';\n        removeIdsFromChildElement(element);\n    });\n\n    return getDomElement(containerEl, true);\n}\n\nexport function ungroupElements(\n    parent: ActionTarget,\n    container: GroupContainer,\n    children: Array<ActionTarget>,\n): DomElement | null {\n    const parentEl = elementFromDomId(parent.domId);\n    if (!parentEl) {\n        console.warn('Failed to find parent element', parent.domId);\n        return null;\n    }\n\n    const containerEl = Array.from(parentEl.children).find(\n        (child) => child.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID) === container.domId,\n    ) as HTMLElement | undefined;\n    if (!containerEl) {\n        console.warn('Failed to find container element', parent.domId);\n        return null;\n    }\n\n    // Insert container children in order into parent behind container\n    Array.from(containerEl.children).forEach((child) => {\n        child.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n        parentEl.insertBefore(child, containerEl);\n    });\n    containerEl.style.display = 'none';\n    return getDomElement(parentEl, true);\n}\n\nfunction createContainerElement(target: GroupContainer): HTMLElement {\n    const containerEl = document.createElement(target.tagName);\n    Object.entries(target.attributes).forEach(([key, value]) => {\n        containerEl.setAttribute(key, value);\n    });\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, 'true');\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID, target.domId);\n    containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_ID, target.oid);\n    return containerEl;\n}\n\nfunction removeIdsFromChildElement(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_ID);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_INSERTED);\n\n    const children = Array.from(el.children);\n    if (children.length === 0) {\n        return;\n    }\n\n    children.forEach((child) => {\n        removeIdsFromChildElement(child as HTMLElement);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/image.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/dom/remove.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/drag.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDragElement' is defined but never used.","line":116,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorAttributes } from '@onlook/models/constants';\nimport type { DomElement } from '@onlook/models/element';\nimport { getOrAssignDomId } from '../../ids';\nimport { getDomElement, restoreElementStyle } from '../helpers';\nimport { getDisplayDirection } from './helpers';\nimport { createStub, getCurrentStubIndex, moveStub, removeStub } from './stub';\nimport { elementFromDomId, isValidHtmlElement } from '/common/helpers';\n\nexport function startDrag(domId: string): number | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn(`Start drag element not found: ${domId}`);\n        return null;\n    }\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('Start drag parent not found');\n        return null;\n    }\n    const htmlChildren = Array.from(parent.children).filter(isValidHtmlElement);\n    const originalIndex = htmlChildren.indexOf(el);\n    prepareElementForDragging(el);\n    createStub(el);\n    const pos = getAbsolutePosition(el);\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION, JSON.stringify(pos));\n    return originalIndex;\n}\n\nexport function drag(domId: string, dx: number, dy: number, x: number, y: number) {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('Dragging element not found');\n        return;\n    }\n    const styles = window.getComputedStyle(el);\n    const pos = JSON.parse(\n        el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION) || '{}',\n    );\n    const left = pos.left + dx - window.scrollX;\n    const top = pos.top + dy - window.scrollY;\n\n    el.style.left = `${left}px`;\n    el.style.top = `${top}px`;\n    el.style.width = styles.width + 1;\n    el.style.height = styles.height + 1;\n    el.style.position = 'fixed';\n\n    moveStub(el, x, y);\n}\n\nexport function endDrag(domId: string): {\n    newIndex: number;\n    child: DomElement;\n    parent: DomElement;\n} | null {\n    const el = elementFromDomId(domId);\n    if (!el) {\n        console.warn('End drag element not found');\n        endAllDrag();\n        return null;\n    }\n\n    const parent = el.parentElement;\n    if (!parent) {\n        console.warn('End drag parent not found');\n        cleanUpElementAfterDragging(el);\n        return null;\n    }\n\n    const stubIndex = getCurrentStubIndex(parent, el);\n    cleanUpElementAfterDragging(el);\n    removeStub();\n\n    if (stubIndex === -1) {\n        return null;\n    }\n\n    const elementIndex = Array.from(parent.children).indexOf(el);\n    if (stubIndex === elementIndex) {\n        return null;\n    }\n    return {\n        newIndex: stubIndex,\n        child: getDomElement(el, false),\n        parent: getDomElement(parent, false),\n    };\n}\n\nfunction prepareElementForDragging(el: HTMLElement) {\n    const saved = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    if (saved) {\n        return;\n    }\n\n    const style = {\n        position: el.style.position,\n        transform: el.style.transform,\n        width: el.style.width,\n        height: el.style.height,\n        left: el.style.left,\n        top: el.style.top,\n    };\n\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE, JSON.stringify(style));\n    el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING, 'true');\n\n    if (el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION) !== null) {\n        const parent = el.parentElement;\n        if (parent) {\n            const displayDirection = getDisplayDirection(parent);\n            el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION, displayDirection);\n        }\n    }\n}\n\nfunction getDragElement(): HTMLElement | undefined {\n    const el = document.querySelector(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    ) as HTMLElement | null;\n    if (!el) {\n        return;\n    }\n    return el;\n}\n\nfunction cleanUpElementAfterDragging(el: HTMLElement) {\n    restoreElementStyle(el);\n    removeDragAttributes(el);\n    getOrAssignDomId(el);\n}\n\nfunction removeDragAttributes(el: HTMLElement) {\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION);\n    el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION);\n}\n\nfunction getAbsolutePosition(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return {\n        left: rect.left + window.scrollX,\n        top: rect.top + window.scrollY,\n    };\n}\n\nexport function endAllDrag() {\n    const draggingElements = document.querySelectorAll(\n        `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`,\n    );\n    for (const el of draggingElements) {\n        cleanUpElementAfterDragging(el as HTMLElement);\n    }\n    removeStub();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/move/stub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/style.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/elements/text.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/dom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/events/publish.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/electron/preload/webview/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-plugin-unsafe-accessors/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/no-unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint-rules/unsafe-nested-access.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/UpdateButton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/WindowsControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/AppBar/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouteManager, useUpdateManager } from '@/components/Context';\nimport { Route } from '@/lib/routes';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport UpdateButton from './UpdateButton';\nimport { WindowsControls } from './WindowsControls';\n\nconst AppBar = observer(() => {\n    const routeManager = useRouteManager();\n    const updateManager = useUpdateManager();\n\n    const className = cn(\n        'opacity-50 hover:opacity-100',\n        updateManager.updateAvailable &&\n            'hover:bg-red-800 hover:text-red-100 dark:hover:text-red-100',\n    );\n\n    return (\n        <div\n            className={cn(\n                'flex flex-row items-center pl-20 h-10 border-b bg-background dark:bg-background-active transition-colors duration-300 ease-in-out',\n                routeManager.route === Route.SIGN_IN && 'bg-transparent border-b-0',\n                updateManager.updateAvailable &&\n                    'bg-red-950 dark:bg-red-950 dark:text-red-300 text-red-300 transition-opacity duration-300 ease-in-out',\n            )}\n        >\n            <div className=\"appbar w-full h-full\"></div>\n            <div className=\"flex mr-2 gap-2\">\n                <UpdateButton />\n            </div>\n            <WindowsControls />\n        </div>\n    );\n});\n\nexport default AppBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/Context/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ThemeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/UserProfileDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/dunes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/components/ui/hotkeys-label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/auth/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":31,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":31,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":36,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":36,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport type { UserMetadata } from '@onlook/models/settings';\nimport supabase from '@onlook/supabase/clients';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class AuthManager {\n    authenticated = false;\n    userMetadata: UserMetadata | null = null;\n    isAuthEnabled = !!supabase && !!supabase.auth;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.fetchUserMetadata();\n        this.listenForAuthEvents();\n    }\n\n    async fetchUserMetadata() {\n        this.userMetadata = (await invokeMainChannel(\n            MainChannels.GET_USER_METADATA,\n        )) as UserMetadata;\n\n        const signedIn = (await invokeMainChannel(MainChannels.IS_USER_SIGNED_IN)) as boolean;\n\n        if (this.userMetadata && signedIn) {\n            this.authenticated = true;\n        }\n    }\n\n    listenForAuthEvents() {\n        window.api.on(MainChannels.USER_SIGNED_IN, async (e, args) => {\n            this.authenticated = true;\n            this.fetchUserMetadata();\n        });\n\n        window.api.on(MainChannels.USER_SIGNED_OUT, async (e, args) => {\n            this.authenticated = false;\n            this.userMetadata = null;\n        });\n    }\n\n    async signIn(provider: 'github' | 'google') {\n        await invokeMainChannel(MainChannels.SIGN_IN, { provider });\n    }\n\n    async signOut() {\n        await invokeMainChannel(MainChannels.SIGN_OUT);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/action/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/ast/layers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/canvas/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/code.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/conversation.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":78,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatMessageType, type ChatConversation } from '@onlook/models/chat';\nimport { MAX_NAME_LENGTH } from '@onlook/models/constants';\nimport type { CoreMessage } from 'ai';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { AssistantChatMessageImpl } from '../message/assistant';\nimport { UserChatMessageImpl } from '../message/user';\n\nexport class ChatConversationImpl implements ChatConversation {\n    id: string;\n    projectId: string;\n    displayName: string | null = null;\n    messages: (UserChatMessageImpl | AssistantChatMessageImpl)[];\n    createdAt: string;\n    updatedAt: string;\n\n    constructor(projectId: string, messages: (UserChatMessageImpl | AssistantChatMessageImpl)[]) {\n        makeAutoObservable(this);\n        this.id = nanoid();\n        this.projectId = projectId;\n        this.messages = messages;\n        this.createdAt = new Date().toISOString();\n        this.updatedAt = new Date().toISOString();\n    }\n\n    getMessageById(id: string) {\n        return this.messages.find((m) => m.id === id);\n    }\n\n    static fromJSON(data: ChatConversation) {\n        const conversation = new ChatConversationImpl(data.projectId, []);\n        conversation.id = data.id;\n        conversation.displayName = data.displayName;\n        conversation.messages = data.messages.map((m) => {\n            if (m.type === ChatMessageType.USER) {\n                return UserChatMessageImpl.fromJSON(m);\n            } else {\n                return AssistantChatMessageImpl.fromJSON(m);\n            }\n        });\n        conversation.createdAt = data.createdAt;\n        conversation.updatedAt = data.updatedAt;\n        return conversation;\n    }\n\n    getMessagesForStream(): CoreMessage[] {\n        return this.messages.map((m) => m.toCoreMessage());\n    }\n\n    appendMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        this.messages = [...this.messages, message];\n        this.updatedAt = new Date().toISOString();\n    }\n\n    removeAllMessagesAfter(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages = this.messages.slice(0, index + 1);\n        this.updatedAt = new Date().toISOString();\n    }\n\n    updateName(name: string, override = false) {\n        if (override || !this.displayName) {\n            this.displayName = name.slice(0, MAX_NAME_LENGTH);\n        }\n    }\n\n    getLastUserMessage() {\n        return this.messages.findLast((message) => message.type === ChatMessageType.USER);\n    }\n\n    updateMessage(message: UserChatMessageImpl | AssistantChatMessageImpl) {\n        const index = this.messages.findIndex((m) => m.id === message.id);\n        this.messages?.[index] = message;\n        this.updatedAt = new Date().toISOString();\n        this.messages = [...this.messages];\n    }\n\n    updateCodeReverted(id: string) {\n        this.messages = [...this.messages];\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/conversation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/assistant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/message/user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/stream.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/chat/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/code/insert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/copy/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/element/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/error/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/group/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/history/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/image/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'path' is assigned a value but never used.","line":279,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EditorMode, EditorTabValue, SettingsTabValue } from '@/lib/models';\nimport type { ProjectsManager } from '@/lib/projects';\nimport type { UserManager } from '@/lib/user';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport type { NativeImage } from 'electron';\nimport { makeAutoObservable } from 'mobx';\nimport { nanoid } from 'nanoid/non-secure';\nimport { ActionManager } from './action';\nimport { AstManager } from './ast';\nimport { CanvasManager } from './canvas';\nimport { ChatManager } from './chat';\nimport { CodeManager } from './code';\nimport { CopyManager } from './copy';\nimport { ElementManager } from './element';\nimport { ErrorManager } from './error';\nimport { GroupManager } from './group';\nimport { HistoryManager } from './history';\nimport { ImageManager } from './image';\nimport { InsertManager } from './insert';\nimport { MoveManager } from './move';\nimport { OverlayManager } from './overlay';\nimport { PagesManager } from './pages';\nimport { ProjectInfoManager } from './projectinfo';\nimport { StyleManager } from './style';\nimport { TextEditingManager } from './text';\nimport { WebviewManager } from './webview';\n\nexport class EditorEngine {\n    private _editorMode: EditorMode = EditorMode.DESIGN;\n    private _plansOpen: boolean = false;\n    private _settingsOpen: boolean = false;\n    private _hotkeysOpen: boolean = false;\n    private _editorPanelTab: EditorTabValue = EditorTabValue.CHAT;\n    private _settingsTab: SettingsTabValue = SettingsTabValue.DOMAIN;\n\n    private canvasManager: CanvasManager;\n    private chatManager: ChatManager;\n    private webviewManager: WebviewManager;\n    private overlayManager: OverlayManager;\n    private codeManager: CodeManager;\n    private pagesManager: PagesManager;\n    private errorManager: ErrorManager;\n    private imageManager: ImageManager;\n\n    private astManager: AstManager = new AstManager(this);\n    private historyManager: HistoryManager = new HistoryManager(this);\n    private projectInfoManager: ProjectInfoManager = new ProjectInfoManager();\n    private elementManager: ElementManager = new ElementManager(this);\n    private textEditingManager: TextEditingManager = new TextEditingManager(this);\n    private actionManager: ActionManager = new ActionManager(this);\n    private insertManager: InsertManager = new InsertManager(this);\n    private moveManager: MoveManager = new MoveManager(this);\n    private styleManager: StyleManager = new StyleManager(this);\n    private copyManager: CopyManager = new CopyManager(this);\n    private groupManager: GroupManager = new GroupManager(this);\n\n    constructor(\n        private projectsManager: ProjectsManager,\n        private userManager: UserManager,\n    ) {\n        makeAutoObservable(this);\n        this.canvasManager = new CanvasManager(this.projectsManager);\n        this.chatManager = new ChatManager(this, this.projectsManager, this.userManager);\n        this.webviewManager = new WebviewManager(this, this.projectsManager);\n        this.overlayManager = new OverlayManager(this);\n        this.codeManager = new CodeManager(this, this.projectsManager);\n        this.pagesManager = new PagesManager(this, this.projectsManager);\n        this.errorManager = new ErrorManager(this, this.projectsManager);\n        this.imageManager = new ImageManager(this, this.projectsManager);\n    }\n\n    get elements() {\n        return this.elementManager;\n    }\n    get overlay() {\n        return this.overlayManager;\n    }\n    get webviews() {\n        return this.webviewManager;\n    }\n    get code() {\n        return this.codeManager;\n    }\n    get history() {\n        return this.historyManager;\n    }\n    get ast() {\n        return this.astManager;\n    }\n    get action() {\n        return this.actionManager;\n    }\n    get mode() {\n        return this._editorMode;\n    }\n    get insert() {\n        return this.insertManager;\n    }\n    get move() {\n        return this.moveManager;\n    }\n    get projectInfo() {\n        return this.projectInfoManager;\n    }\n    get style() {\n        return this.styleManager;\n    }\n    get canvas() {\n        return this.canvasManager;\n    }\n    get text() {\n        return this.textEditingManager;\n    }\n    get copy() {\n        return this.copyManager;\n    }\n    get group() {\n        return this.groupManager;\n    }\n    get chat() {\n        return this.chatManager;\n    }\n    get image() {\n        return this.imageManager;\n    }\n    get editPanelTab() {\n        return this._editorPanelTab;\n    }\n    get settingsTab() {\n        return this._settingsTab;\n    }\n    get isPlansOpen() {\n        return this._plansOpen;\n    }\n    get isSettingsOpen() {\n        return this._settingsOpen;\n    }\n    get isHotkeysOpen() {\n        return this._hotkeysOpen;\n    }\n    get errors() {\n        return this.errorManager;\n    }\n    get isWindowSelected() {\n        return this.webviews.selected.length > 0 && this.elements.selected.length === 0;\n    }\n\n    set mode(mode: EditorMode) {\n        this._editorMode = mode;\n    }\n\n    set editPanelTab(tab: EditorTabValue) {\n        this._editorPanelTab = tab;\n    }\n\n    set settingsTab(tab: SettingsTabValue) {\n        this._settingsTab = tab;\n    }\n\n    set isPlansOpen(open: boolean) {\n        this._plansOpen = open;\n        if (open) {\n            sendAnalytics('open pro checkout');\n        }\n    }\n\n    set isSettingsOpen(open: boolean) {\n        this._settingsOpen = open;\n    }\n\n    set isHotkeysOpen(value: boolean) {\n        this._hotkeysOpen = value;\n    }\n\n    get pages() {\n        return this.pagesManager;\n    }\n\n    dispose() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deregisterAll();\n        this.errors.clear();\n        this.chatManager?.dispose();\n        this.historyManager?.clear();\n        this.elementManager?.clear();\n        this.actionManager?.dispose();\n        this.overlayManager?.clear();\n        this.astManager?.clear();\n        this.textEditingManager?.clean();\n        this.codeManager?.dispose();\n        this.insertManager?.dispose();\n        this.moveManager?.dispose();\n        this.styleManager?.dispose();\n        this.copyManager?.dispose();\n        this.groupManager?.dispose();\n        this.canvasManager?.clear();\n        this.imageManager?.dispose();\n        this._settingsOpen = false;\n        this._plansOpen = false;\n    }\n\n    clearUI() {\n        this.overlay.clear();\n        this.elements.clear();\n        this.webviews.deselectAll();\n    }\n\n    inspect() {\n        const selected = this.elements.selected;\n        if (selected.length === 0) {\n            return;\n        }\n        const selectedEl = selected[0];\n        const webviewId = selectedEl.webviewId;\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            return;\n        }\n        webview.openDevTools();\n    }\n\n    async refreshLayers() {\n        const webviews = this.webviews.webviews;\n        if (webviews.size === 0) {\n            return;\n        }\n        const webview = Array.from(webviews.values())?.[0]?.webview;\n        webview.executeJavaScript('window.api?.processDom()');\n    }\n\n    async takeActiveWebviewScreenshot(\n        name: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        if (this.webviews.webviews.size === 0) {\n            console.error('No webviews found');\n            return null;\n        }\n        const webviewId = Array.from(this.webviews.webviews.values())?.[0]?.webview.id;\n        return this.takeWebviewScreenshot(name, webviewId, options);\n    }\n\n    async takeWebviewScreenshot(\n        name: string,\n        webviewId: string,\n        options?: {\n            save: boolean;\n        },\n    ): Promise<{\n        name?: string;\n        image?: string;\n    } | null> {\n        const webview = this.webviews.getWebview(webviewId);\n        if (!webview) {\n            console.error('No webview found');\n            return null;\n        }\n\n        const hasContent = await webview.executeJavaScript(\n            `document.body.innerText.trim().length > 0 || document.body.children.length > 0 `,\n        );\n        if (!hasContent) {\n            console.error('No content found in webview');\n            return null;\n        }\n\n        const image: NativeImage = await webview.capturePage();\n\n        if (options?.save) {\n            const imageName = `${name}-preview.png`;\n            const path: string | null = await invokeMainChannel(MainChannels.SAVE_IMAGE, {\n                img: image.toDataURL(),\n                name: imageName,\n            });\n            return {\n                name: imageName,\n            };\n        }\n        return {\n            image: image.resize({ quality: 'good', height: 100 }).toDataURL({\n                scaleFactor: 0.1,\n            }),\n        };\n    }\n\n    canDeleteWindow() {\n        return this.canvas.frames.length > 1;\n    }\n\n    deleteWindow(id?: string) {\n        if (this.canvas.frames.length === 1) {\n            console.error('Cannot delete the last window');\n            return;\n        }\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n            if (!settings) {\n                console.error('Window not found');\n                return;\n            }\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        this.ast.mappings.remove(settings.id);\n        this.canvas.frames = this.canvas.frames.filter((frame) => frame.id !== settings.id);\n        const webview = this.webviews.getWebview(settings.id);\n        if (webview) {\n            this.webviews.deregister(webview);\n        }\n        sendAnalytics('window delete');\n    }\n\n    duplicateWindow(id?: string) {\n        let settings: FrameSettings | null = null;\n        if (id) {\n            settings = this.canvas.getFrame(id) || null;\n        } else if (this.webviews.selected.length === 0) {\n            console.error('No window selected');\n            return;\n        } else {\n            settings = this.canvas.getFrame(this.webviews.selected?.[0].id) || null;\n        }\n        if (!settings) {\n            console.error('Window not found');\n            return;\n        }\n        const currentFrame = settings;\n        const newFrame: FrameSettings = {\n            id: nanoid(),\n            url: currentFrame.url,\n            dimension: {\n                width: currentFrame.dimension.width,\n                height: currentFrame.dimension.height,\n            },\n            position: {\n                x: currentFrame.position.x + currentFrame.dimension.width + 100,\n                y: currentFrame.position.y,\n            },\n            aspectRatioLocked: currentFrame.aspectRatioLocked,\n            orientation: currentFrame.orientation,\n            device: currentFrame.device,\n            theme: currentFrame.theme,\n        };\n\n        this.canvas.frames = [...this.canvas.frames, newFrame];\n        sendAnalytics('window duplicate');\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/insert/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/move/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":100,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { MoveElementAction } from '@onlook/models/actions';\nimport type { DomElement, ElementPosition } from '@onlook/models/element';\nimport type React from 'react';\nimport type { EditorEngine } from '..';\n\nexport class MoveManager {\n    dragOrigin: ElementPosition | undefined;\n    dragTarget: DomElement | undefined;\n    originalIndex: number | undefined;\n    MIN_DRAG_DISTANCE = 5;\n    isDraggingAbsolute = false;\n\n    constructor(private editorEngine: EditorEngine) {}\n\n    get isDragging() {\n        return !!this.dragOrigin;\n    }\n\n    async start(el: DomElement, position: ElementPosition, webview: Electron.WebviewTag) {\n        if (this.editorEngine.chat.isWaiting) {\n            return;\n        }\n        if (!this.editorEngine.elements.selected.some((selected) => selected.domId === el.domId)) {\n            console.warn('Element not selected, cannot start drag');\n            return;\n        }\n\n        this.dragOrigin = position;\n        this.dragTarget = el;\n        if (el.styles?.computed?.position === 'absolute') {\n            this.isDraggingAbsolute = true;\n            this.editorEngine.history.startTransaction();\n            return;\n        } else {\n            this.originalIndex = await webview.executeJavaScript(\n                `window.api?.startDrag('${el.domId}')`,\n            );\n        }\n\n        if (this.originalIndex === null || this.originalIndex === -1) {\n            this.clear();\n            console.warn('Start drag failed, original index is null or -1');\n            return;\n        }\n    }\n\n    drag(\n        e: React.MouseEvent<HTMLDivElement>,\n        getRelativeMousePositionToWebview: (e: React.MouseEvent<HTMLDivElement>) => ElementPosition,\n    ) {\n        if (!this.dragOrigin || !this.dragTarget) {\n            console.error('Cannot drag without drag origin or target');\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag');\n            return;\n        }\n\n        const { x, y } = getRelativeMousePositionToWebview(e);\n        const dx = x - this.dragOrigin.x;\n        const dy = y - this.dragOrigin.y;\n\n        if (this.isDraggingAbsolute) {\n            this.handleDragAbsolute(this.dragOrigin, this.dragTarget, x, y);\n            return;\n        }\n\n        if (Math.max(Math.abs(dx), Math.abs(dy)) > this.MIN_DRAG_DISTANCE) {\n            this.editorEngine.overlay.clear();\n            webview.executeJavaScript(\n                `window.api?.drag('${this.dragTarget.domId}', ${dx}, ${dy}, ${x}, ${y})`,\n            );\n        }\n    }\n\n    handleDragAbsolute(dragOrigin: ElementPosition, dragTarget: DomElement, x: number, y: number) {\n        const initialOffset = {\n            x: dragOrigin.x - dragTarget.rect.x,\n            y: dragOrigin.y - dragTarget.rect.y,\n        };\n\n        const parentRect = dragTarget.parent?.rect;\n        if (!parentRect) {\n            return;\n        }\n\n        const newX = Math.round(x - parentRect.x - initialOffset.x);\n        const newY = Math.round(y - parentRect.y - initialOffset.y);\n\n        this.editorEngine.overlay.clear();\n        this.editorEngine.style.updateMultiple({\n            left: `${newX}px`,\n            top: `${newY}px`,\n        });\n    }\n\n    async end(e: React.MouseEvent<HTMLDivElement>) {\n        if (this.isDraggingAbsolute) {\n            this.editorEngine.history.commitTransaction();\n            this.isDraggingAbsolute = false;\n            this.clear();\n        }\n\n        if (this.originalIndex === undefined || !this.dragTarget) {\n            this.clear();\n            this.endAllDrag();\n            return;\n        }\n\n        const webview = this.editorEngine.webviews.getWebview(this.dragTarget.webviewId);\n        if (!webview) {\n            console.error('No webview found for drag end');\n            this.endAllDrag();\n            return;\n        }\n\n        const res: {\n            newIndex: number;\n            child: DomElement;\n            parent: DomElement;\n        } | null = await webview.executeJavaScript(\n            `window.api?.endDrag('${this.dragTarget.domId}')`,\n        );\n\n        if (res) {\n            const { child, parent, newIndex } = res;\n            if (newIndex !== this.originalIndex) {\n                const moveAction = this.createMoveAction(\n                    webview.id,\n                    child,\n                    parent,\n                    newIndex,\n                    this.originalIndex,\n                );\n                this.editorEngine.action.run(moveAction);\n            }\n        }\n        this.clear();\n    }\n\n    endAllDrag() {\n        this.editorEngine.webviews.webviews.forEach((webview) => {\n            webview.webview.executeJavaScript(`window.api?.endAllDrag()`);\n        });\n    }\n\n    moveSelected(direction: 'up' | 'down') {\n        const selected = this.editorEngine.elements.selected;\n        if (selected.length === 1) {\n            this.shiftElement(selected[0], direction);\n        } else {\n            if (selected.length > 1) {\n                console.error('Multiple elements selected, cannot shift');\n            } else {\n                console.error('No elements selected, cannot shift');\n            }\n        }\n    }\n\n    async shiftElement(element: DomElement, direction: 'up' | 'down'): Promise<void> {\n        const webview = this.editorEngine.webviews.getWebview(element.webviewId);\n        if (!webview) {\n            return;\n        }\n\n        // Get current index and parent\n        const currentIndex = await webview.executeJavaScript(\n            `window.api?.getElementIndex('${element.domId}')`,\n        );\n\n        if (currentIndex === -1) {\n            return;\n        }\n\n        const parent: DomElement | null = await webview.executeJavaScript(\n            `window.api?.getParentElement('${element.domId}')`,\n        );\n        if (!parent) {\n            return;\n        }\n\n        // Get filtered children count for accurate index calculation\n        const childrenCount = await webview.executeJavaScript(\n            `window.api?.getChildrenCount('${parent.domId}')`,\n        );\n\n        // Calculate new index based on direction and bounds\n        const newIndex =\n            direction === 'up'\n                ? Math.max(0, currentIndex - 1)\n                : Math.min(childrenCount - 1, currentIndex + 1);\n\n        if (newIndex === currentIndex) {\n            return;\n        }\n\n        // Create and run move action\n        const moveAction = this.createMoveAction(\n            webview.id,\n            element,\n            parent,\n            newIndex,\n            currentIndex,\n        );\n\n        this.editorEngine.action.run(moveAction);\n    }\n\n    createMoveAction(\n        webviewId: string,\n        child: DomElement,\n        parent: DomElement,\n        newIndex: number,\n        originalIndex: number,\n    ): MoveElementAction {\n        return {\n            type: 'move-element',\n            location: {\n                type: 'index',\n                targetDomId: parent.domId,\n                targetOid: parent.instanceId || parent.oid,\n                index: newIndex,\n                originalIndex: originalIndex,\n            },\n            targets: [\n                {\n                    webviewId,\n                    domId: child.domId,\n                    oid: child.instanceId || child.oid,\n                },\n            ],\n        };\n    }\n\n    clear() {\n        this.originalIndex = undefined;\n        this.dragOrigin = undefined;\n        this.dragTarget = undefined;\n    }\n\n    dispose() {\n        // Clear state\n        this.clear();\n\n        // Clear references\n        this.editorEngine = null as any;\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/prosemirror/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/rect.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/overlay/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/projectinfo/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/style/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/text/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/token/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/engine/webview/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/eventHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/messageBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/autolayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/group.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/numberUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/tag.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/editor/styles/units.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/create.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/hosting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/domains/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/port.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/projects/run.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/routes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/sizePresets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/update/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":14,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":14,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":18,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":18,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { makeAutoObservable } from 'mobx';\nimport { invokeMainChannel } from '../utils';\n\nexport class UpdateManager {\n    updateAvailable = false;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.listen();\n    }\n\n    listen() {\n        window.api.on(MainChannels.UPDATE_DOWNLOADED, async (e, args) => {\n            this.updateAvailable = true;\n        });\n\n        window.api.on(MainChannels.UPDATE_NOT_AVAILABLE, async (e, args) => {\n            this.updateAvailable = false;\n        });\n    }\n\n    quitAndInstall() {\n        invokeMainChannel(MainChannels.QUIT_AND_INSTALL);\n    }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/user/subscription.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/Delete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Hotkeys/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":35,"column":9,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":35,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { ReactNode } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport DeleteKey from './Delete';\nimport { Hotkey } from '/common/hotkeys';\n\nconst HotkeysArea = ({ children }: { children: ReactNode }) => {\n    const editorEngine = useEditorEngine();\n\n    // Zoom\n    useHotkeys(\n        'mod+0',\n        () => {\n            editorEngine.canvas.scale = DefaultSettings.SCALE;\n            editorEngine.canvas.position = {\n                x: DefaultSettings.PAN_POSITION.x,\n                y: DefaultSettings.PAN_POSITION.y,\n            };\n        },\n        { preventDefault: true },\n    );\n    useHotkeys('mod+equal', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 1.2), {\n        preventDefault: true,\n    });\n    useHotkeys('mod+minus', () => (editorEngine.canvas.scale = editorEngine.canvas.scale * 0.8), {\n        preventDefault: true,\n    });\n\n    // Modes\n    useHotkeys(Hotkey.SELECT.command, () => (editorEngine.mode = EditorMode.DESIGN));\n    useHotkeys(Hotkey.ESCAPE.command, () => {\n        editorEngine.mode = EditorMode.DESIGN;\n        !editorEngine.text.isEditing && editorEngine.clearUI();\n    });\n    useHotkeys(Hotkey.PAN.command, () => (editorEngine.mode = EditorMode.PAN));\n    useHotkeys(Hotkey.INTERACT.command, () => (editorEngine.mode = EditorMode.INTERACT));\n    useHotkeys(Hotkey.INSERT_DIV.command, () => (editorEngine.mode = EditorMode.INSERT_DIV));\n    useHotkeys(Hotkey.INSERT_TEXT.command, () => (editorEngine.mode = EditorMode.INSERT_TEXT));\n\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.PAN), { keydown: true });\n    useHotkeys('space', () => (editorEngine.mode = EditorMode.DESIGN), { keyup: true });\n\n    useHotkeys('alt', () => editorEngine.elements.showMeasurement(), { keydown: true });\n    useHotkeys('alt', () => editorEngine.overlay.removeMeasurement(), { keyup: true });\n\n    // Actions\n    useHotkeys(Hotkey.UNDO.command, () => editorEngine.action.undo());\n    useHotkeys(Hotkey.REDO.command, () => editorEngine.action.redo());\n    useHotkeys(Hotkey.ENTER.command, () => editorEngine.text.editSelectedElement());\n    useHotkeys(Hotkey.REFRESH_LAYERS.command, () => editorEngine.refreshLayers());\n    useHotkeys(Hotkey.OPEN_DEV_TOOL.command, () => editorEngine.inspect());\n\n    // Group\n    useHotkeys(Hotkey.GROUP.command, () => editorEngine.group.groupSelectedElements());\n    useHotkeys(Hotkey.UNGROUP.command, () => editorEngine.group.ungroupSelectedElement());\n\n    // Copy\n    useHotkeys(Hotkey.COPY.command, () => editorEngine.copy.copy());\n    useHotkeys(Hotkey.PASTE.command, () => editorEngine.copy.paste());\n    useHotkeys(Hotkey.CUT.command, () => editorEngine.copy.cut());\n    useHotkeys(Hotkey.DUPLICATE.command, () => {\n        if (editorEngine.isWindowSelected) {\n            editorEngine.duplicateWindow();\n        } else {\n            editorEngine.copy.duplicate();\n        }\n    });\n\n    // AI\n    useHotkeys(Hotkey.ADD_AI_CHAT.command, () => (editorEngine.editPanelTab = EditorTabValue.CHAT));\n    useHotkeys(Hotkey.NEW_AI_CHAT.command, () => {\n        editorEngine.editPanelTab = EditorTabValue.CHAT;\n        editorEngine.chat.conversation.startNewConversation();\n    });\n\n    // Move\n    useHotkeys(Hotkey.MOVE_LAYER_UP.command, () => editorEngine.move.moveSelected('up'));\n    useHotkeys(Hotkey.MOVE_LAYER_DOWN.command, () => editorEngine.move.moveSelected('down'));\n\n    useHotkeys(Hotkey.SHOW_HOTKEYS.command, () => {\n        editorEngine.isHotkeysOpen = !editorEngine.isHotkeysOpen;\n    });\n\n    return (\n        <>\n            <DeleteKey />\n            {children}\n        </>\n    );\n};\n\nexport default HotkeysArea;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/BaseRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getOffsets' is assigned a value but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":231,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { ClickRectState } from '@/lib/editor/engine/overlay/state';\nimport { EditorMode, EditorTabValue } from '@/lib/models';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\nconst SPACING = {\n    base: 8,\n    padding: 16,\n};\n\nconst DIMENSIONS = {\n    singleLineHeight: 32,\n    minInputWidth: 280,\n    buttonHeight: 36, // Standard button height\n    multiLineRows: 4,\n    minCharsToSubmit: 4,\n};\n\nconst ANIMATION = {\n    DISTANCE_THRESHOLD: 300, // pixels - adjust this value as needed\n    TRANSITION_DURATION: 100, // ms\n};\n\nconst getOffsets = (isMultiline: boolean) => {\n    const chatButtonHeight = DIMENSIONS.buttonHeight + SPACING.padding;\n    const inputHeight = isMultiline\n        ? DIMENSIONS.singleLineHeight * (DIMENSIONS.multiLineRows - 1) + SPACING.padding\n        : DIMENSIONS.singleLineHeight + SPACING.padding;\n\n    return {\n        chatButton: chatButtonHeight,\n        input: chatButtonHeight + inputHeight,\n    };\n};\n\nconst DEFAULT_INPUT_STATE = {\n    value: '',\n    isVisible: false,\n    isMultiline: false,\n    isSubmitting: false,\n};\n\nexport const OverlayChat = observer(\n    ({ selectedEl, elementId }: { selectedEl: ClickRectState | null; elementId: string }) => {\n        const editorEngine = useEditorEngine();\n        const isInteractMode = editorEngine.mode === EditorMode.INTERACT;\n        const [inputState, setInputState] = useState(DEFAULT_INPUT_STATE);\n        const [isComposing, setIsComposing] = useState(false);\n        const textareaRef = useRef<HTMLTextAreaElement>(null);\n        const prevChatPositionRef = useRef<{ x: number; y: number } | null>(null);\n\n        // Add effect to reset input state when elementId changes\n        useEffect(() => {\n            setInputState(DEFAULT_INPUT_STATE);\n        }, [elementId]);\n\n        // Get current chat position\n        const chatPosition = {\n            x: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().left ?? 0)\n                : 0,\n            y: elementId\n                ? (document.getElementById(elementId)?.getBoundingClientRect().bottom ?? 0)\n                : 0,\n        };\n\n        // Calculate distance from previous chat position\n        const distance = prevChatPositionRef.current\n            ? Math.sqrt(\n                  Math.pow(chatPosition.x - prevChatPositionRef.current.x, 2) +\n                      Math.pow(chatPosition.y - prevChatPositionRef.current.y, 2),\n              )\n            : 0;\n\n        useEffect(() => {\n            prevChatPositionRef.current = chatPosition;\n        }, [chatPosition.x, chatPosition.y]);\n\n        const animationClass =\n            distance > ANIMATION.DISTANCE_THRESHOLD\n                ? 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200'\n                : 'origin-center scale-[0.2] opacity-0 -translate-y-2 transition-all duration-200';\n\n        useEffect(() => {\n            if (elementId) {\n                requestAnimationFrame(() => {\n                    const element = document.querySelector(`[data-element-id=\"${elementId}\"]`);\n                    if (element) {\n                        element.classList.remove('scale-[0.2]', 'opacity-0', '-translate-y-2');\n                        element.classList.add('scale-100', 'opacity-100', 'translate-y-0');\n                    }\n                });\n            }\n        }, [elementId]);\n\n        if (\n            !selectedEl ||\n            isInteractMode ||\n            editorEngine.chat.isWaiting ||\n            editorEngine.chat.streamingMessage\n        ) {\n            return null;\n        }\n\n        const handleSubmit = async () => {\n            const messageToSend = inputState.value;\n            editorEngine.editPanelTab = EditorTabValue.CHAT;\n            await editorEngine.chat.sendNewMessage(messageToSend);\n            setInputState(DEFAULT_INPUT_STATE);\n        };\n\n        const containerStyle: React.CSSProperties = {\n            position: 'fixed',\n            top: selectedEl.top - 8,\n            left: selectedEl.left + selectedEl.width / 2,\n            transform: 'translate(-50%, 0)',\n            transformOrigin: 'center center',\n            pointerEvents: 'auto',\n            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n        };\n\n        return (\n            <div\n                style={containerStyle}\n                onClick={(e) => e.stopPropagation()}\n                className={animationClass}\n                data-element-id={elementId}\n            >\n                <div\n                    className={cn(\n                        'rounded-xl backdrop-blur-lg transition-all duration-300',\n                        'shadow-xl shadow-background-secondary/50',\n                        inputState.isVisible\n                            ? 'bg-background/80 border shadow-xl shadow-background-secondary/50 p-1'\n                            : 'bg-background-secondary/85 dark:bg-background/85 border-foreground-secondary/20 hover:border-foreground-secondary/50 p-0.5',\n                        'border flex relative',\n                    )}\n                >\n                    {!inputState.isVisible ? (\n                        // Chat Button\n                        <button\n                            onClick={() => setInputState((prev) => ({ ...prev, isVisible: true }))}\n                            className=\"rounded-lg hover:text-foreground-primary transition-colors px-2.5 py-1.5 flex flex-row items-center gap-2 w-full\"\n                        >\n                            <Icons.Sparkles className=\"w-4 h-4\" />\n                            <span className=\"text-miniPlus whitespace-nowrap\">Chat with AI</span>\n                        </button>\n                    ) : (\n                        // Input Field\n                        <div className=\"flex flex-row items-top gap-1 w-full min-w-[280px] relative\">\n                            <Button\n                                size=\"icon\"\n                                onClick={() =>\n                                    setInputState((prev) => ({\n                                        ...prev,\n                                        isVisible: false,\n                                        value: '',\n                                    }))\n                                }\n                                className={cn(\n                                    'group h-6 w-6 absolute left-1 top-1 z-10 border-none shadow-none bg-transparent hover:bg-transparent',\n                                    'transition-all duration-200',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'opacity-0 -translate-x-2 scale-75 pointer-events-none'\n                                        : 'opacity-100 translate-x-0 scale-100 pointer-events-auto',\n                                )}\n                                disabled={inputState.isSubmitting}\n                            >\n                                <Icons.CrossS className=\"h-4 w-4 text-foreground-secondary group-hover:text-foreground transition-colors\" />\n                            </Button>\n                            <Textarea\n                                aria-label=\"Chat message input\"\n                                ref={textareaRef}\n                                className={cn(\n                                    'w-full text-xs break-words p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px] rounded-lg',\n                                    'transition-all duration-150 ease-in-out',\n                                    'pr-10 backdrop-blur-lg',\n                                    inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit\n                                        ? 'pl-2'\n                                        : 'pl-8',\n                                    'bg-background-secondary/75 text-foreground-primary border-background-secondary/75',\n                                    'max-h-[80px] caret-[#FA003C]',\n                                    'selection:bg-[#FA003C]/30 selection:text-[#FA003C]',\n                                )}\n                                value={inputState.value}\n                                onChange={(e) => {\n                                    setInputState((prev) => ({ ...prev, value: e.target.value }));\n                                    if (textareaRef.current) {\n                                        textareaRef.current.style.height = 'auto';\n                                        const maxHeight = DIMENSIONS.singleLineHeight * 4;\n                                        textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, maxHeight)}px`;\n                                        textareaRef.current.scrollTop =\n                                            textareaRef.current.scrollHeight;\n                                    }\n                                }}\n                                placeholder=\"Type your message...\"\n                                style={{\n                                    resize: 'none',\n                                    minHeight: DIMENSIONS.singleLineHeight,\n                                    height: 'auto',\n                                    overflowY: 'auto',\n                                    overflowX: 'hidden',\n                                    overscrollBehavior: 'contain',\n                                    lineHeight: '1.5',\n                                }}\n                                rows={1}\n                                autoFocus\n                                disabled={inputState.isSubmitting}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n                                        e.preventDefault();\n                                        const charCount = inputState.value.trim().length;\n                                        if (charCount >= DIMENSIONS.minCharsToSubmit) {\n                                            handleSubmit();\n                                        }\n                                    } else if (e.key === 'Escape') {\n                                        e.preventDefault();\n                                        setInputState((prev) => ({\n                                            ...prev,\n                                            isVisible: false,\n                                            value: '',\n                                        }));\n                                    }\n                                }}\n                                onCompositionStart={() => setIsComposing(true)}\n                                onCompositionEnd={(e) => {\n                                    setIsComposing(false);\n                                }}\n                            />\n                            {inputState.value.trim().length >= DIMENSIONS.minCharsToSubmit && (\n                                <Button\n                                    size=\"icon\"\n                                    variant=\"secondary\"\n                                    onClick={handleSubmit}\n                                    className={cn(\n                                        'absolute right-0.5 bottom-0.5 h-7 w-7',\n                                        'bg-foreground-primary text-white hover:bg-foreground-hover',\n                                    )}\n                                    disabled={inputState.isSubmitting}\n                                >\n                                    <Icons.ArrowRight className=\"h-4 w-4 text-background\" />\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ClickRect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shouldShowResizeHandles' is defined but never used.","line":103,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'renderDimensionLabels' is assigned a value but never used.","line":301,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RectDimensions } from '@/lib/editor/engine/overlay/rect';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport { nanoid } from 'nanoid';\nimport { BaseRect } from './BaseRect';\n\nconst parseCssBoxValues = (\n    value: string,\n): {\n    adjusted: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n    original: {\n        top: number;\n        right: number;\n        bottom: number;\n        left: number;\n    };\n} => {\n    const originalValues = value.split(' ').map((v) => parseInt(v));\n    const adjustedValues = originalValues.map((v) => Math.round(adaptValueToCanvas(v)));\n\n    let original = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    let adjusted = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n\n    switch (originalValues.length) {\n        case 1:\n            original = {\n                top: originalValues[0],\n                right: originalValues[0],\n                bottom: originalValues[0],\n                left: originalValues[0],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[0],\n                bottom: adjustedValues[0],\n                left: adjustedValues[0],\n            };\n            break;\n        case 2:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[0],\n                left: originalValues[1],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[0],\n                left: adjustedValues[1],\n            };\n            break;\n        case 4:\n            original = {\n                top: originalValues[0],\n                right: originalValues[1],\n                bottom: originalValues[2],\n                left: originalValues[3],\n            };\n            adjusted = {\n                top: adjustedValues[0],\n                right: adjustedValues[1],\n                bottom: adjustedValues[2],\n                left: adjustedValues[3],\n            };\n            break;\n        default:\n            original = { top: 0, right: 0, bottom: 0, left: 0 };\n            adjusted = { top: 0, right: 0, bottom: 0, left: 0 };\n            break;\n    }\n    return { adjusted, original };\n};\n\ninterface ClickRectProps extends RectDimensions {\n    isComponent?: boolean;\n    styles: Record<string, string>;\n    shouldShowResizeHandles: boolean;\n}\n\nexport const ClickRect = ({\n    width,\n    height,\n    top,\n    left,\n    isComponent,\n    styles,\n    shouldShowResizeHandles,\n}: ClickRectProps) => {\n    const renderMarginLabels = () => {\n        if (!styles?.margin) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.margin);\n\n        const patternId = `margin-pattern-${nanoid()}`;\n        const maskId = `margin-mask-${nanoid()}`;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.blue?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.blue?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect\n                            x={-adjusted.left}\n                            y={-adjusted.top}\n                            width={width + adjusted.left + adjusted.right}\n                            height={height + adjusted.top + adjusted.bottom}\n                            fill=\"white\"\n                        />\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"black\" />\n                    </mask>\n                </defs>\n                <rect\n                    x={-adjusted.left}\n                    y={-adjusted.top}\n                    width={width + adjusted.left + adjusted.right}\n                    height={height + adjusted.top + adjusted.bottom}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing margin labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={-adjusted.top / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height + adjusted.bottom / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={-adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width + adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.blue?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderPaddingLabels = () => {\n        if (!styles?.padding) {\n            return null;\n        }\n        const { adjusted, original } = parseCssBoxValues(styles.padding);\n\n        const patternId = `padding-pattern-${nanoid()}`;\n        const maskId = `padding-mask-${nanoid()}`;\n        const pWidth = width - adjusted.left - adjusted.right;\n        const pHeight = height - adjusted.top - adjusted.bottom;\n\n        return (\n            <>\n                <defs>\n                    <pattern id={patternId} patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\">\n                        <rect width=\"20\" height=\"20\" fill={colors.green?.[500]} fillOpacity=\"0.1\" />\n                        <line\n                            x1=\"0\"\n                            y1=\"20\"\n                            x2=\"20\"\n                            y2=\"0\"\n                            stroke={colors.green?.[500]}\n                            strokeWidth=\"0.3\"\n                            strokeLinecap=\"square\"\n                        />\n                    </pattern>\n                    <mask id={maskId}>\n                        <rect x=\"0\" y=\"0\" width={width} height={height} fill=\"white\" />\n                        <rect\n                            x={adjusted.left}\n                            y={adjusted.top}\n                            width={pWidth}\n                            height={pHeight}\n                            fill=\"black\"\n                        />\n                    </mask>\n                </defs>\n                <rect\n                    x=\"0\"\n                    y=\"0\"\n                    width={width}\n                    height={height}\n                    fill={`url(#${patternId})`}\n                    mask={`url(#${maskId})`}\n                />\n\n                {/* Keep existing padding labels */}\n                {original.top > 0 && (\n                    <text\n                        x={width / 2}\n                        y={adjusted.top / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.top}\n                    </text>\n                )}\n                {original.bottom > 0 && (\n                    <text\n                        x={width / 2}\n                        y={height - adjusted.bottom / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.bottom}\n                    </text>\n                )}\n                {original.left > 0 && (\n                    <text\n                        x={adjusted.left / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.left}\n                    </text>\n                )}\n                {original.right > 0 && (\n                    <text\n                        x={width - adjusted.right / 2}\n                        y={height / 2}\n                        fill={colors.green?.[700]}\n                        fontSize=\"10\"\n                        textAnchor=\"middle\"\n                        dominantBaseline=\"middle\"\n                    >\n                        {original.right}\n                    </text>\n                )}\n            </>\n        );\n    };\n\n    const renderDimensionLabels = () => {\n        const rectColor = isComponent ? colors.purple?.[500] : colors.red?.[500];\n        const displayWidth = parseFloat(styles?.width || '0').toFixed(0);\n        const displayHeight = parseFloat(styles?.height || '0').toFixed(0);\n        const text = `${displayWidth} Ã— ${displayHeight}`;\n\n        // Constants from showDimensions\n        const padding = { top: 2, bottom: 2, left: 4, right: 4 };\n        const radius = 2;\n\n        // Assuming text width is roughly 80px and height is 16px (you may want to measure this dynamically)\n        const rectWidth = 80 + padding.left + padding.right;\n        const rectHeight = 16 + padding.top + padding.bottom;\n        const rectX = (width - rectWidth) / 2;\n        const rectY = height;\n\n        // Path for rounded rectangle\n        const path =\n            rectWidth > width\n                ? `M${rectX + radius},${rectY} q-${radius},0 -${radius},${radius} v${rectHeight - 2 * radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - 2 * radius} q0,-${radius} -${radius},-${radius} z`\n                : `M${rectX},${rectY} v${rectHeight - radius} q0,${radius} ${radius},${radius} h${rectWidth - 2 * radius} q${radius},0 ${radius},-${radius} v-${rectHeight - radius} z`;\n\n        return (\n            <g>\n                <path d={path} fill={rectColor} />\n                <text\n                    x={width / 2}\n                    y={rectY + rectHeight / 2}\n                    fill=\"white\"\n                    fontSize=\"12\"\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                >\n                    {text}\n                </text>\n            </g>\n        );\n    };\n\n    return (\n        <BaseRect\n            width={width}\n            height={height}\n            top={top}\n            left={left}\n            isComponent={isComponent}\n            strokeWidth={2}\n        >\n            {renderMarginLabels()}\n            {renderPaddingLabels()}\n            {/* {renderDimensionLabels()} */}\n            {/* {shouldShowResizeHandles && (\n                <ResizeHandles\n                    width={width}\n                    height={height}\n                    left={left}\n                    top={top}\n                    borderRadius={parseInt(styles?.['borderRadius'] || '0')}\n                    isComponent={isComponent}\n                    styles={styles}\n                />\n            )} */}\n        </BaseRect>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/HoverRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/InsertRect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/MeasurementOverlay.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditorAttributes' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { colors } from '@onlook/ui/tokens';\nimport { EditorAttributes } from '@onlook/models/constants';\nimport type { RectDimensions } from '../../../../lib/editor/engine/overlay/rect';\nimport React, { memo, useMemo } from 'react';\nimport { BaseRect } from './BaseRect';\nimport { useEditorEngine } from '@/components/Context';\nimport { adaptRectToCanvas, adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\ninterface Distance {\n    value: number;\n    start: Point;\n    end: Point;\n    supportLine?: {\n        start: Point;\n        end: Point;\n    };\n}\n\ninterface RectPoint extends RectDimensions {\n    right: number;\n    bottom: number;\n}\n\ninterface MeasurementProps {\n    fromRect: RectDimensions;\n    toRect: RectDimensions;\n}\n\nconst toRectPoint = (rect: RectDimensions): RectPoint => ({\n    ...rect,\n    right: rect.left + rect.width,\n    bottom: rect.top + rect.height,\n    width: rect.width,\n    height: rect.height,\n    left: rect.left,\n    top: rect.top,\n});\n\nconst isBetween = (x: number, start: number, end: number): boolean => {\n    return (start <= x && x <= end) || (end <= x && x <= start);\n};\n\nconst isIntersect = (rectA: RectPoint, rectB: RectPoint): boolean => {\n    if (rectA.left > rectB.right || rectB.left > rectA.right) {\n        return false;\n    }\n    if (rectA.top > rectB.bottom || rectB.top > rectA.bottom) {\n        return false;\n    }\n    return true;\n};\n\nconst getInsideRect = (rectA: RectPoint, rectB: RectPoint): RectPoint | null => {\n    if (\n        rectA.left >= rectB.left &&\n        rectA.right <= rectB.right &&\n        rectA.top >= rectB.top &&\n        rectA.bottom <= rectB.bottom\n    ) {\n        return rectA;\n    } else if (\n        rectB.left >= rectA.left &&\n        rectB.right <= rectA.right &&\n        rectB.top >= rectA.top &&\n        rectB.bottom <= rectA.bottom\n    ) {\n        return rectB;\n    }\n    return null;\n};\n\nexport const MeasurementOverlay: React.FC<MeasurementProps> = memo(({ fromRect, toRect }) => {\n    const editorEngine = useEditorEngine();\n    const webview = editorEngine.webviews.getWebview(editorEngine.elements.selected?.[0]?.webviewId);\n\n    const fromRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(fromRect, webview) : fromRect),\n        [fromRect, webview],\n    );\n    const toRectAdjusted = useMemo(\n        () => (webview ? adaptRectToCanvas(toRect, webview) : toRect),\n        [toRect, webview],\n    );\n\n    const fromRectPoint = useMemo(() => toRectPoint(fromRect), [fromRect]);\n    const toRectPointResult = useMemo(() => toRectPoint(toRect), [toRect]);\n\n    type DistanceWithoutSupportLine = Omit<Distance, 'supportLine'>;\n\n    const createDistance = (\n        distance: DistanceWithoutSupportLine,\n        toRect: RectPoint,\n        isHorizontal: boolean,\n    ): Distance => {\n        const result: Distance = { ...distance };\n        const { start, end } = distance;\n\n        if (isHorizontal && !isBetween(start.y, toRect.top, toRect.bottom)) {\n            result.supportLine = {\n                start: { x: end.x, y: toRect.top },\n                end: { x: end.x, y: end.y },\n            };\n        } else if (!isHorizontal && !isBetween(start.x, toRect.left, toRect.right)) {\n            result.supportLine = {\n                start: { x: toRect.left, y: end.y },\n                end: { x: end.x, y: end.y },\n            };\n        }\n\n        return result;\n    };\n\n    const distances = useMemo(() => {\n        if (!webview) {\n            return [];\n        }\n        const result: Distance[] = [];\n\n        // Scale values for display\n        const scaleValue = (value: number) => adaptValueToCanvas(Math.abs(value), true);\n\n        // Calculate horizontal distances\n        let y = fromRectPoint.top + fromRectPoint.height / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                y = insideRect.top + insideRect.height / 2;\n            } else if (fromRectPoint.bottom > toRectPointResult.bottom) {\n                y = fromRectPoint.top + (toRectPointResult.bottom - fromRectPoint.top) / 2;\n            } else {\n                y = fromRectPoint.bottom - (fromRectPoint.bottom - toRectPointResult.top) / 2;\n            }\n\n            const leftDistance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                leftDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(leftDistance);\n\n            const rightDistance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                rightDistance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(rightDistance);\n        } else if (fromRectPoint.left > toRectPointResult.right) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.right),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.right, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.right, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.right, y },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.right < toRectPointResult.left) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.right - toRectPointResult.left),\n                start: { x: fromRectPoint.right, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.left, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.right >= toRectPointResult.left\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                start: { x: fromRectPoint.left, y },\n                end: { x: toRectPointResult.left, y },\n            };\n            if (!isBetween(y, toRectPointResult.top, toRectPointResult.bottom)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x: toRectPointResult.left, y },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.right, toRectPointResult.left, toRectPointResult.right) &&\n            fromRectPoint.left <= toRectPointResult.left\n        ) {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        } else {\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.left - toRectPointResult.left),\n                        start: { x: fromRectPoint.left, y },\n                        end: { x: toRectPointResult.left, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n            result.push(\n                createDistance(\n                    {\n                        value: scaleValue(fromRectPoint.right - toRectPointResult.right),\n                        start: { x: fromRectPoint.right, y },\n                        end: { x: toRectPointResult.right, y },\n                    },\n                    toRectPointResult,\n                    true,\n                ),\n            );\n        }\n\n        // Calculate vertical distances\n        let x = fromRectPoint.left + fromRectPoint.width / 2;\n        if (isIntersect(fromRectPoint, toRectPointResult)) {\n            const insideRect = getInsideRect(toRectPointResult, fromRectPoint);\n            if (insideRect) {\n                x = insideRect.left + insideRect.width / 2;\n            } else if (fromRectPoint.right > toRectPointResult.right) {\n                x = fromRectPoint.left + (toRectPointResult.right - fromRectPoint.left) / 2;\n            } else {\n                x = fromRectPoint.right - (fromRectPoint.right - toRectPointResult.left) / 2;\n            }\n\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        } else if (fromRectPoint.top > toRectPointResult.bottom) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else if (fromRectPoint.bottom < toRectPointResult.top) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.top),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (isBetween(fromRectPoint.top, toRectPointResult.top, toRectPointResult.bottom)) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(distance);\n        } else if (\n            isBetween(fromRectPoint.bottom, toRectPointResult.top, toRectPointResult.bottom)\n        ) {\n            const distance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                distance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(distance);\n        } else {\n            const topDistance: Distance = {\n                value: scaleValue(fromRectPoint.top - toRectPointResult.top),\n                start: { x, y: fromRectPoint.top },\n                end: { x, y: toRectPointResult.top },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                topDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.top },\n                    end: { x, y: toRectPointResult.top },\n                };\n            }\n            result.push(topDistance);\n\n            const bottomDistance: Distance = {\n                value: scaleValue(fromRectPoint.bottom - toRectPointResult.bottom),\n                start: { x, y: fromRectPoint.bottom },\n                end: { x, y: toRectPointResult.bottom },\n            };\n            if (!isBetween(x, toRectPointResult.left, toRectPointResult.right)) {\n                bottomDistance.supportLine = {\n                    start: { x: toRectPointResult.left, y: toRectPointResult.bottom },\n                    end: { x, y: toRectPointResult.bottom },\n                };\n            }\n            result.push(bottomDistance);\n        }\n\n        return result;\n    }, [fromRectPoint, toRectPointResult]);\n\n    const viewBox = useMemo(\n        () => ({\n            minX: Math.min(fromRectAdjusted.left, toRectAdjusted.left) - 100,\n            minY: Math.min(fromRectAdjusted.top, toRectAdjusted.top) - 100,\n            width:\n                Math.abs(toRectAdjusted.left - fromRectAdjusted.left) +\n                Math.max(fromRectAdjusted.width, toRectAdjusted.width) +\n                200,\n            height:\n                Math.abs(toRectAdjusted.top - fromRectAdjusted.top) +\n                Math.max(fromRectAdjusted.height, toRectAdjusted.height) +\n                200,\n        }),\n        [fromRectAdjusted, toRectAdjusted],\n    );\n\n    const svgContent = (\n        <g transform={`translate(${-viewBox.minX},${-viewBox.minY})`}>\n            <rect\n                x={fromRect.left}\n                y={fromRect.top}\n                width={fromRect.width}\n                height={fromRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <rect\n                x={toRect.left}\n                y={toRect.top}\n                width={toRect.width}\n                height={toRect.height}\n                fill=\"none\"\n                stroke={colors.red?.[500]}\n                strokeWidth={1}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            {/* Distance lines and labels */}\n\n            {/* Distance lines and labels */}\n            {distances.map((distance, index) => {\n                const isHorizontal = distance.start.y === distance.end.y;\n                const midX = (distance.start.x + distance.end.x) / 2 + (isHorizontal ? 24 : 0);\n                const midY = (distance.start.y + distance.end.y) / 2 + (isHorizontal ? 0 : 16);\n\n                return (\n                    <g key={index}>\n                        <line\n                            x1={distance.start.x}\n                            y1={distance.start.y}\n                            x2={distance.end.x}\n                            y2={distance.end.y}\n                            stroke={colors.red?.[500]}\n                            strokeWidth={1}\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                        />\n                        {distance.supportLine && (\n                            <line\n                                x1={distance.supportLine.start.x}\n                                y1={distance.supportLine.start.y}\n                                x2={distance.supportLine.end.x}\n                                y2={distance.supportLine.end.y}\n                                stroke={colors.red?.[500]}\n                                strokeWidth={1}\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeDasharray=\"10 6\"\n                            />\n                        )}\n                        <g transform={`translate(${midX},${midY})`}>\n                            <rect\n                                x={-20}\n                                y={-10}\n                                width={40}\n                                height={20}\n                                fill={colors.red?.[500]}\n                                rx={2}\n                            />\n                            <text\n                                x={0}\n                                y={0}\n                                fill=\"white\"\n                                fontSize={12}\n                                textAnchor=\"middle\"\n                                dominantBaseline=\"middle\"\n                            >\n                                {Math.round(distance.value)}\n                            </text>\n                        </g>\n                    </g>\n                );\n            })}\n        </g>\n    );\n\n    return (\n        <BaseRect\n            width={viewBox.width}\n            height={viewBox.height}\n            top={viewBox.minY}\n            left={viewBox.minX}\n            strokeWidth={0}\n        >\n            {svgContent}\n        </BaseRect>\n    );\n});\n\nMeasurementOverlay.displayName = 'MeasurementOverlay';\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'position' is defined but never used.","line":379,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'styles' is defined but never used.","line":380,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":380,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { adaptValueToCanvas } from '@/lib/editor/engine/overlay/utils';\nimport { colors } from '@onlook/ui/tokens';\nimport React from 'react';\n\nenum ResizeHandlePosition {\n    TOP = 'top',\n    RIGHT = 'right',\n    BOTTOM = 'bottom',\n    LEFT = 'left',\n    TOP_LEFT = 'top-left',\n    TOP_RIGHT = 'top-right',\n    BOTTOM_RIGHT = 'bottom-right',\n    BOTTOM_LEFT = 'bottom-left',\n}\n\ninterface HandleProps {\n    x: number;\n    y: number;\n    color: string;\n    position: ResizeHandlePosition;\n    styles: Record<string, string>;\n    handleMouseDown: (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => void;\n}\n\nconst getCursorStyle = (position: ResizeHandlePosition): string => {\n    switch (position) {\n        case 'top':\n        case 'bottom':\n            return 'ns-resize';\n        case 'left':\n        case 'right':\n            return 'ew-resize';\n        case 'top-left':\n        case 'bottom-right':\n            return 'nwse-resize';\n        case 'top-right':\n        case 'bottom-left':\n            return 'nesw-resize';\n        default:\n            return 'pointer';\n    }\n};\n\nconst createCaptureOverlay = (startEvent: React.MouseEvent) => {\n    const captureOverlay = document.createElement('div');\n    captureOverlay.style.position = 'fixed';\n    captureOverlay.style.top = '0';\n    captureOverlay.style.left = '0';\n    captureOverlay.style.width = '100%';\n    captureOverlay.style.height = '100%';\n    captureOverlay.style.cursor = window.getComputedStyle(startEvent.currentTarget).cursor;\n    captureOverlay.style.zIndex = '9999';\n    document.body.appendChild(captureOverlay);\n    return captureOverlay;\n};\n\ninterface ResizeDimensions {\n    width: number;\n    height: number;\n}\n\nconst calculateNewElementDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.round(Math.max(startWidth - adjustedDeltaX, 0));\n    } else if (position.includes('right')) {\n        newWidth = Math.round(Math.max(startWidth + adjustedDeltaX, 0));\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.round(Math.max(startHeight - adjustedDeltaY, 0));\n    } else if (position.includes('bottom')) {\n        newHeight = Math.round(Math.max(startHeight + adjustedDeltaY, 0));\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\nconst calculateNewOverlayDimensions = (\n    position: ResizeHandlePosition,\n    startDimensions: ResizeDimensions,\n    adjustedDelta: { x: number; y: number },\n): ResizeDimensions => {\n    const { width: startWidth, height: startHeight } = startDimensions;\n    const { x: adjustedDeltaX, y: adjustedDeltaY } = adjustedDelta;\n\n    let newWidth = startWidth;\n    let newHeight = startHeight;\n\n    // Handle width changes\n    if (position.includes('left')) {\n        newWidth = Math.max(startWidth - adjustedDeltaX, 0);\n    } else if (position.includes('right')) {\n        newWidth = Math.max(startWidth + adjustedDeltaX, 0);\n    }\n\n    // Handle height changes\n    if (position.includes('top')) {\n        newHeight = Math.max(startHeight - adjustedDeltaY, 0);\n    } else if (position.includes('bottom')) {\n        newHeight = Math.max(startHeight + adjustedDeltaY, 0);\n    }\n\n    return { width: newWidth, height: newHeight };\n};\n\ninterface EdgeHandleProps extends HandleProps {\n    handleDoubleClick: (e: React.MouseEvent, position: ResizeHandlePosition) => void;\n}\n\nconst EdgeHandle: React.FC<EdgeHandleProps> = ({\n    x,\n    y,\n    position,\n    styles,\n    handleMouseDown,\n    handleDoubleClick,\n}) => {\n    const size = 4;\n    const halfSize = size / 2;\n    const isVertical =\n        position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n\n    const lastClickRef = React.useRef<number>(0);\n    const DOUBLE_CLICK_TIMEOUT = 300;\n\n    const handleMouseDownRect = (e: React.MouseEvent) => {\n        const currentTime = Date.now();\n        const timeSinceLastClick = currentTime - lastClickRef.current;\n        const doubleClick = timeSinceLastClick < DOUBLE_CLICK_TIMEOUT;\n\n        if (doubleClick) {\n            handleDoubleClick(e, position);\n            lastClickRef.current = 0;\n        } else {\n            handleMouseDown(e, position, styles);\n            lastClickRef.current = currentTime;\n        }\n    };\n\n    return (\n        <rect\n            x={isVertical ? x - halfSize : 0}\n            y={isVertical ? 0 : y - halfSize}\n            width={isVertical ? size : '100%'}\n            height={isVertical ? '100%' : size}\n            fill=\"transparent\"\n            style={{ cursor: getCursorStyle(position), pointerEvents: 'auto' }}\n            onMouseDown={handleMouseDownRect}\n        />\n    );\n};\n\nconst CornerHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: getCursorStyle(position),\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            {/* Invisible larger circle for hit area */}\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n        </g>\n    );\n};\n\nconst RadiusHandle: React.FC<HandleProps> = ({\n    x,\n    y,\n    position,\n    color,\n    styles,\n    handleMouseDown,\n}) => {\n    const size = 8;\n    const halfSize = size / 2;\n    const hitAreaSize = 20;\n    const hitAreaHalfSize = hitAreaSize / 2;\n\n    return (\n        <g\n            style={{\n                pointerEvents: 'auto',\n                cursor: 'nwse-resize',\n            }}\n            transform={`translate(${x - halfSize}, ${y - halfSize})`}\n            onMouseDown={(e) => handleMouseDown(e, position, styles)}\n        >\n            <circle cx={halfSize} cy={halfSize} r={hitAreaHalfSize} fill=\"transparent\" />\n            <circle\n                cx={halfSize}\n                cy={halfSize}\n                r={halfSize}\n                fill=\"white\"\n                stroke={color}\n                strokeWidth={1}\n            />\n            <circle cx={halfSize} cy={halfSize} r={1.5} fill={color} />\n        </g>\n    );\n};\n\ninterface ResizeHandlesProps {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n    borderRadius: number;\n    isComponent?: boolean;\n    styles: Record<string, string>;\n}\n\nexport const ResizeHandles: React.FC<ResizeHandlesProps> = ({\n    width,\n    height,\n    borderRadius,\n    isComponent,\n    styles,\n}) => {\n    const editorEngine = useEditorEngine();\n    const color = isComponent ? colors.purple?.[500] : colors.red?.[500];\n\n    // Calculate radius handle position (20px or 25% of width/height, whichever is smaller)\n    const radiusOffset = Math.min(20, width * 0.25, height * 0.25);\n    const showRadius = width >= 10 && height >= 10;\n\n    const updateWidth = (newWidth: string) => {\n        editorEngine.style.update('width', newWidth);\n    };\n\n    const updateHeight = (newHeight: string) => {\n        editorEngine.style.update('height', newHeight);\n    };\n\n    const updateWidthHeight = (newWidth: string, newHeight: string) => {\n        editorEngine.style.updateMultiple({\n            width: newWidth,\n            height: newHeight,\n        });\n    };\n\n    const updateRadius = (newRadius: string) => {\n        editorEngine.style.update('border-radius', newRadius);\n    };\n\n    const handleDoubleClick = (e: React.MouseEvent, position: ResizeHandlePosition) => {\n        const isVertical =\n            position === ResizeHandlePosition.LEFT || position === ResizeHandlePosition.RIGHT;\n        const targetValue = e.altKey ? '100%' : 'fit-content';\n        if (isVertical) {\n            editorEngine.style.update('width', targetValue);\n        } else {\n            editorEngine.style.update('height', targetValue);\n        }\n    };\n\n    const handleMouseDownDimensions = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startDimensions = {\n            width: parseFloat(styles.width),\n            height: parseFloat(styles.height),\n        };\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n            const adjustedDelta = {\n                x: adaptValueToCanvas(deltaX, true),\n                y: adaptValueToCanvas(deltaY, true),\n            };\n\n            const newElementDimensions = calculateNewElementDimensions(\n                position,\n                startDimensions,\n                adjustedDelta,\n            );\n            const newOverlayDimensions = calculateNewOverlayDimensions(\n                position,\n                { width, height },\n                {\n                    x: deltaX,\n                    y: deltaY,\n                },\n            );\n\n            const widthChanged = newElementDimensions.width !== startDimensions.width;\n            const heightChanged = newElementDimensions.height !== startDimensions.height;\n\n            if (widthChanged && heightChanged) {\n                updateWidthHeight(\n                    `${newElementDimensions.width}px`,\n                    `${newElementDimensions.height}px`,\n                );\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                    height: newOverlayDimensions.height,\n                });\n            } else if (widthChanged) {\n                updateWidth(`${newElementDimensions.width}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    width: newOverlayDimensions.width,\n                });\n            } else if (heightChanged) {\n                updateHeight(`${newElementDimensions.height}px`);\n                editorEngine.overlay.state.updateClickedRects({\n                    height: newOverlayDimensions.height,\n                });\n            }\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    const handleMouseDownRadius = (\n        startEvent: React.MouseEvent,\n        position: ResizeHandlePosition,\n        styles: Record<string, string>,\n    ) => {\n        startEvent.preventDefault();\n        startEvent.stopPropagation();\n\n        editorEngine.history.startTransaction();\n        const startX = startEvent.clientX;\n        const startY = startEvent.clientY;\n        const startRadius = borderRadius;\n\n        const captureOverlay = createCaptureOverlay(startEvent);\n\n        const onMouseMove = (moveEvent: MouseEvent) => {\n            moveEvent.preventDefault();\n            moveEvent.stopPropagation();\n\n            const deltaX = moveEvent.clientX - startX;\n            const deltaY = moveEvent.clientY - startY;\n\n            // Use the larger of the two deltas for a more natural radius adjustment\n            const delta = Math.max(Math.abs(deltaX), Math.abs(deltaY)) * Math.sign(deltaX + deltaY);\n            const adjustedDelta = adaptValueToCanvas(delta, true);\n\n            const newRadius = Math.max(0, startRadius + adjustedDelta);\n            updateRadius(`${Math.round(newRadius)}px`);\n        };\n\n        const onMouseUp = (upEvent: MouseEvent) => {\n            upEvent.preventDefault();\n            upEvent.stopPropagation();\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            document.body.removeChild(captureOverlay);\n            editorEngine.history.commitTransaction();\n        };\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <>\n            {/* Edge handles */}\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={0}\n                position={ResizeHandlePosition.TOP}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width}\n                y={height / 2}\n                position={ResizeHandlePosition.RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={width / 2}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n            <EdgeHandle\n                color={color}\n                x={0}\n                y={height / 2}\n                position={ResizeHandlePosition.LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n                handleDoubleClick={handleDoubleClick}\n            />\n\n            {/* Corner handles */}\n            <CornerHandle\n                color={color}\n                x={0}\n                y={0}\n                position={ResizeHandlePosition.TOP_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={0}\n                position={ResizeHandlePosition.TOP_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={width}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_RIGHT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n            <CornerHandle\n                color={color}\n                x={0}\n                y={height}\n                position={ResizeHandlePosition.BOTTOM_LEFT}\n                styles={styles}\n                handleMouseDown={handleMouseDownDimensions}\n            />\n\n            {showRadius && (\n                <RadiusHandle\n                    color={color}\n                    x={radiusOffset}\n                    y={radiusOffset}\n                    position={ResizeHandlePosition.TOP_LEFT}\n                    styles={styles}\n                    handleMouseDown={handleMouseDownRadius}\n                />\n            )}\n        </>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/TextEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/Overlay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/PanOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Canvas/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/ChatHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":270,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":317,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { FOCUS_CHAT_INPUT_EVENT } from '@/lib/editor/engine/chat';\nimport { EditorTabValue } from '@/lib/models';\nimport { compressImage } from '@/lib/utils';\nimport type { ChatMessageContext, ImageMessageContext } from '@onlook/models/chat';\nimport { MessageContextType } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { AnimatePresence } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport { DraftContextPill } from './ContextPills/DraftContextPill';\nimport { DraftImagePill } from './ContextPills/DraftingImagePill';\nimport type { SuggestionsRef } from './Suggestions';\nimport Suggestions from './Suggestions';\n\nexport const ChatInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const [inputValue, setInputValue] = useState('');\n    const [isComposing, setIsComposing] = useState(false);\n    const [actionTooltipOpen, setActionTooltipOpen] = useState(false);\n    const [isDragging, setIsDragging] = useState(false);\n\n    const focusInput = () => {\n        requestAnimationFrame(() => {\n            textareaRef.current?.focus();\n        });\n    };\n\n    useEffect(() => {\n        if (textareaRef.current && !editorEngine.chat.isWaiting) {\n            focusInput();\n        }\n    }, [editorEngine.chat.conversation.current?.messages.length]);\n\n    useEffect(() => {\n        if (editorEngine.editPanelTab === EditorTabValue.CHAT) {\n            focusInput();\n        }\n    }, [editorEngine.editPanelTab]);\n\n    useEffect(() => {\n        const focusHandler = () => {\n            if (textareaRef.current && !editorEngine.chat.isWaiting) {\n                focusInput();\n            }\n        };\n\n        window.addEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n        return () => window.removeEventListener(FOCUS_CHAT_INPUT_EVENT, focusHandler);\n    }, []);\n\n    useEffect(() => {\n        const handleGlobalKeyDown = (e: KeyboardEvent) => {\n            if (e.key === 'Enter' && suggestionRef.current?.handleEnterSelection()) {\n                e.preventDefault();\n                e.stopPropagation();\n                // Stop the event from bubbling to the canvas\n                e.stopImmediatePropagation();\n                // Handle the suggestion selection\n                suggestionRef.current.handleEnterSelection();\n            }\n        };\n\n        // Capture phase to intercept before it reaches the canvas\n        window.addEventListener('keydown', handleGlobalKeyDown, true);\n        return () => window.removeEventListener('keydown', handleGlobalKeyDown, true);\n    }, []);\n\n    const disabled = editorEngine.chat.isWaiting || editorEngine.chat.context.context.length === 0;\n    const inputEmpty = !inputValue || inputValue.trim().length === 0;\n\n    function handleInput(e: React.ChangeEvent<HTMLTextAreaElement>) {\n        if (isComposing) {\n            return;\n        }\n        e.currentTarget.style.height = 'auto';\n        e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    }\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Tab') {\n            // Always prevent default tab behavior\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Only let natural tab order continue if handleTabNavigation returns false\n            const handled = suggestionRef.current?.handleTabNavigation();\n            if (!handled) {\n                // Focus the textarea\n                textareaRef.current?.focus();\n            }\n        } else if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (suggestionRef.current?.handleEnterSelection()) {\n                setTimeout(() => textareaRef.current?.focus(), 0);\n                return;\n            }\n\n            if (!inputEmpty) {\n                sendMessage();\n            }\n        }\n    };\n\n    function sendMessage() {\n        if (inputEmpty) {\n            console.warn('Empty message');\n            return;\n        }\n        if (editorEngine.chat.isWaiting) {\n            console.warn('Already waiting for response');\n            return;\n        }\n        editorEngine.chat.sendNewMessage(inputValue);\n        setInputValue('');\n    }\n\n    const handleRemoveContext = (contextToRemove: ChatMessageContext) => {\n        const newContext = [...editorEngine.chat.context.context].filter(\n            (context) => context !== contextToRemove,\n        );\n\n        editorEngine.chat.context.context = newContext;\n    };\n\n    const handleOpenFileDialog = (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.currentTarget.blur(); // Removes focus from the button to prevent tooltip from showing\n        const inputElement = document.createElement('input');\n        inputElement.type = 'file';\n        inputElement.accept = 'image/*';\n        inputElement.onchange = () => {\n            if (inputElement.files && inputElement.files.length > 0) {\n                const file = inputElement.files?.[0];\n                const fileName = file.name;\n                handleImageEvent(file, fileName);\n            }\n        };\n        inputElement.click();\n    };\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLTextAreaElement>) => {\n        const items = e.clipboardData.items;\n\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                e.preventDefault();\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Pasted image');\n                break;\n            }\n        }\n    };\n\n    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.currentTarget.removeAttribute('data-dragging-image');\n\n        const items = e.dataTransfer.items;\n        for (const item of items) {\n            if (item.type.startsWith('image/')) {\n                const file = item.getAsFile();\n                if (!file) {\n                    continue;\n                }\n                handleImageEvent(file, 'Dropped image');\n                break;\n            }\n        }\n    };\n\n    const handleImageEvent = async (file: File, displayName?: string) => {\n        const reader = new FileReader();\n        reader.onload = async (event) => {\n            const compressedImage = await compressImage(file);\n            const base64URL = compressedImage || (event.target?.result as string);\n            const contextImage: ImageMessageContext = {\n                type: MessageContextType.IMAGE,\n                content: base64URL,\n                mimeType: file.type,\n                displayName: displayName || file.name,\n            };\n            editorEngine.chat.context.context.push(contextImage);\n        };\n        reader.readAsDataURL(file);\n    };\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            e.currentTarget.setAttribute('data-dragging-image', isDragging.toString());\n        }\n    };\n\n    const suggestionRef = useRef<SuggestionsRef>(null);\n\n    return (\n        <div\n            className={cn(\n                'flex flex-col w-full text-foreground-tertiary border-t text-small transition-colors duration-200',\n                '[&[data-dragging-image=true]]:bg-teal-500/40',\n                isDragging && 'cursor-copy',\n            )}\n            onDrop={(e) => {\n                handleDrop(e);\n                setIsDragging(false);\n            }}\n            onDragOver={handleDragOver}\n            onDragEnter={(e) => {\n                e.preventDefault();\n                handleDragStateChange(true, e);\n            }}\n            onDragLeave={(e) => {\n                if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                    handleDragStateChange(false, e);\n                }\n            }}\n        >\n            <Suggestions\n                ref={suggestionRef}\n                disabled={disabled}\n                inputValue={inputValue}\n                setInput={(suggestion) => {\n                    setInputValue(suggestion);\n                    textareaRef.current?.focus();\n                    setTimeout(() => {\n                        if (textareaRef.current) {\n                            textareaRef.current.scrollTop = textareaRef.current.scrollHeight;\n                        }\n                    }, 100);\n                }}\n                onSuggestionFocus={(isFocused) => {\n                    if (!isFocused) {\n                        textareaRef.current?.focus();\n                    }\n                }}\n            />\n\n            <div className=\"flex flex-col w-full p-4\">\n                <div\n                    className={cn(\n                        'flex flex-row flex-wrap w-full gap-1.5 text-micro mb-1 text-foreground-secondary',\n                        editorEngine.chat.context.context.length > 0 ? 'min-h-6' : 'h-0',\n                    )}\n                >\n                    <AnimatePresence mode=\"popLayout\">\n                        {editorEngine.chat.context.context.map(\n                            (context: ChatMessageContext, index: number) => {\n                                if (context.type === MessageContextType.IMAGE) {\n                                    return (\n                                        <DraftImagePill\n                                            key={`image-${context.content}`}\n                                            context={context}\n                                            onRemove={() => handleRemoveContext(context)}\n                                        />\n                                    );\n                                }\n                                return (\n                                    <DraftContextPill\n                                        key={`${context.type}-${context.content}`}\n                                        context={context}\n                                        onRemove={() => handleRemoveContext(context)}\n                                    />\n                                );\n                            },\n                        )}\n                    </AnimatePresence>\n                </div>\n                <Textarea\n                    ref={textareaRef}\n                    disabled={disabled}\n                    placeholder={\n                        disabled\n                            ? projectsManager.runner?.isRunning ||\n                              projectsManager.runner?.isStarting\n                                ? 'Select an element to chat'\n                                : 'Start the project to chat'\n                            : 'Ask follow up questions or provide more context...'\n                    }\n                    className={cn(\n                        'mt-2 overflow-auto max-h-32 text-small p-0 border-0 shadow-none rounded-none caret-[#FA003C]',\n                        'selection:bg-[#FA003C]/30 selection:text-[#FA003C] text-foreground-primary',\n                        'placeholder:text-foreground-primary/50',\n                        'cursor-text',\n                        isDragging ? 'pointer-events-none' : 'pointer-events-auto',\n                    )}\n                    rows={3}\n                    style={{ resize: 'none' }}\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onInput={handleInput}\n                    onKeyDown={handleKeyDown}\n                    onPaste={handlePaste}\n                    onCompositionStart={() => setIsComposing(true)}\n                    onCompositionEnd={(e) => {\n                        setIsComposing(false);\n                    }}\n                    onDragEnter={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragenter', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragOver={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('dragover', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                    onDragLeave={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n                            e.currentTarget.parentElement?.dispatchEvent(\n                                new DragEvent('dragleave', {\n                                    bubbles: true,\n                                    cancelable: true,\n                                    dataTransfer: e.dataTransfer,\n                                }),\n                            );\n                        }\n                    }}\n                    onDrop={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        e.currentTarget.parentElement?.dispatchEvent(\n                            new DragEvent('drop', {\n                                bubbles: true,\n                                cancelable: true,\n                                dataTransfer: e.dataTransfer,\n                            }),\n                        );\n                    }}\n                />\n            </div>\n            <div className=\"flex flex-row w-full justify-between pt-2 pb-2 px-2\">\n                <div className=\"flex flex-row justify-start gap-1.5\">\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={handleOpenFileDialog}\n                                disabled={disabled}\n                            >\n                                <Icons.Image\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled ? 'Select an element to start' : 'Upload Image Reference'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button\n                                variant={'ghost'}\n                                size={'icon'}\n                                className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                onClick={() => {\n                                    editorEngine.chat.context.addScreenshotContext();\n                                }}\n                                disabled={disabled}\n                            >\n                                <Icons.Laptop\n                                    className={cn(\n                                        'w-5 h-5',\n                                        disabled\n                                            ? 'text-foreground-tertiary'\n                                            : 'group-hover:text-foreground',\n                                    )}\n                                />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipPortal>\n                            <TooltipContent side=\"top\" sideOffset={5}>\n                                {disabled\n                                    ? 'Select an element to start'\n                                    : 'Add screenshot of the current page'}\n                            </TooltipContent>\n                        </TooltipPortal>\n                    </Tooltip>\n                    <Button\n                        variant={'outline'}\n                        className=\"w-fit h-fit py-0.5 px-2.5 text-foreground-tertiary hidden\"\n                    >\n                        <Icons.FilePlus className=\"mr-2\" />\n                        <span className=\"text-smallPlus\">File Reference</span>\n                    </Button>\n                </div>\n                {editorEngine.chat.isWaiting ? (\n                    <Tooltip open={actionTooltipOpen} onOpenChange={setActionTooltipOpen}>\n                        <TooltipTrigger asChild>\n                            <Button\n                                size={'icon'}\n                                variant={'secondary'}\n                                className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                                onClick={() => {\n                                    setActionTooltipOpen(false);\n                                    editorEngine.chat.stopStream();\n                                }}\n                            >\n                                <Icons.Stop />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent>{'Stop response'}</TooltipContent>\n                    </Tooltip>\n                ) : (\n                    <Button\n                        size={'icon'}\n                        variant={'secondary'}\n                        className=\"text-smallPlus w-fit h-full py-0.5 px-2.5 text-primary\"\n                        disabled={inputEmpty || editorEngine.chat.isWaiting}\n                        onClick={sendMessage}\n                    >\n                        <Icons.ArrowRight />\n                    </Button>\n                )}\n            </div>\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/AssistantMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/MarkdownRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":35,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":41,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@onlook/ui/utils';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport CodeChangeDisplay from '../CodeChangeDisplay';\nimport BashCodeDisplay from '../CodeChangeDisplay/BashCodeDisplay';\n\nconst MarkdownRenderer = ({\n    messageId,\n    content,\n    className = '',\n    applied,\n    isStream = false,\n}: {\n    messageId: string;\n    content: string;\n    className?: string;\n    applied: boolean;\n    isStream?: boolean;\n}) => {\n    const transformedContent = content.replace(\n        /^(.*?)\\n```(\\w+)\\n/gm,\n        (_, filePath, language) => `\\`\\`\\`${language}:${filePath}\\n`,\n    );\n\n    return (\n        <div\n            className={cn(\n                'prose prose-stone dark:prose-invert prose-compact text-small break-words',\n                className,\n            )}\n        >\n            <ReactMarkdown\n                remarkPlugins={[remarkGfm]}\n                components={{\n                    pre: ({ node, ...props }) => (\n                        <pre\n                            className=\"m-0 p-0 mb-2 rounded-lg bg-none border-0.5 border-border-primary\"\n                            {...props}\n                        />\n                    ),\n                    code({ node, className, children, ...props }) {\n                        const match = /language-(\\w+)(:?.+)?/.exec(className || '');\n                        const language = match?.[1];\n                        const filePath = match?.[2]?.substring(1);\n                        const codeContent = String(children).replace(/\\n$/, '');\n\n                        if (language === 'bash') {\n                            return <BashCodeDisplay content={codeContent} isStream={isStream} />;\n                        }\n\n                        if (match && filePath) {\n                            return (\n                                <CodeChangeDisplay\n                                    path={filePath}\n                                    content={codeContent}\n                                    messageId={messageId}\n                                    applied={applied}\n                                    isStream={isStream}\n                                />\n                            );\n                        }\n\n                        return (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        );\n                    },\n                }}\n            >\n                {transformedContent}\n            </ReactMarkdown>\n        </div>\n    );\n};\n\nexport default MarkdownRenderer;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/StreamMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/UserMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ChatMessages/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/BashCodeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeDiff.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CodeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/CollapsibleCodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/CodeChangeDisplay/variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/DraftingImagePill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/SentContextPill.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ContextPills/helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/ErrorView/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/Suggestions/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/ChatTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/BooleanProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/CodeProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/TextProp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/PropsTab/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":135,"column":49,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":140,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":163,"column":53,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":170,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models';\nimport { MainChannels } from '@onlook/models/constants';\nimport { PropsType, type DomElement, type PropsParsingResult } from '@onlook/models/element';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\nimport BooleanProp from './BooleanProp';\nimport CodeProp from './CodeProp';\nimport TextProp from './TextProp';\n\nexport interface Prop {\n    type: PropsType;\n    displayType?: string;\n    value: string | boolean;\n    icon?: React.ReactNode;\n}\n\nconst PropsTab = () => {\n    const [props, setProps] = useState<{ [key: string]: Prop } | null>({});\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n\n    const editorEngine = useEditorEngine();\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            getRootProps(selectedEl);\n        }\n    }, [editorEngine.elements.selected]);\n\n    async function getRootProps(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootProps: PropsParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_PROPS,\n                newRoot,\n            );\n\n            if (rootProps.type === 'props' && rootProps.props.length > 0) {\n                const elementProps: Record<string, Prop> = {};\n                rootProps.props.forEach((prop) => {\n                    const newProp: Prop = {\n                        type: prop.type,\n                        value: prop.value,\n                    };\n                    elementProps[prop.key] = newProp;\n                });\n                setProps(elementProps);\n            } else {\n                setProps(null);\n            }\n        }\n    }\n\n    const createCodeDiffRequest = async (\n        oid: string | undefined,\n        value: string | number | boolean,\n        name: string,\n    ) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n\n        request.push({\n            oid,\n            attributes: { [name]: value },\n            textContent: null,\n            overrideClasses: false,\n            structureChanges: [],\n        });\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('attributes action');\n        }\n    };\n\n    function viewSource() {\n        if (selectedEl?.oid) {\n            editorEngine.code.viewSource(selectedEl?.oid);\n        }\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2 px-3 w-full\">\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs\">Detected Properties</span>\n                <Button size={'icon'} variant={'ghost'}>\n                    <Icons.Plus />\n                </Button>\n            </div>\n            <div className=\"flex flex-col gap-4 mb-5\">\n                {props !== null &&\n                    Object.keys(props).map((key) => {\n                        const prop = props[key];\n                        return (\n                            <div className=\"flex flex-row items-center\" key={key}>\n                                <div className=\"flex flex-row gap-2 items-center\">\n                                    <div className=\"flex flex-col\">\n                                        <span className=\"text-sm\">{key}</span>\n                                        <span className=\"text-xs text-foreground-secondary\">\n                                            {prop.displayType ? prop.displayType : prop.type}\n                                        </span>\n                                    </div>\n                                </div>\n                                <div className=\"text-end ml-auto\">\n                                    {prop.type === 'code' ? (\n                                        <CodeProp onClick={viewSource} />\n                                    ) : prop.type === 'boolean' ? (\n                                        <BooleanProp\n                                            value={prop.value as boolean}\n                                            change={(value) => {\n                                                setProps((prev) =>\n                                                    prev !== null\n                                                        ? {\n                                                              ...prev,\n                                                              [key]: {\n                                                                  ...prev[key],\n                                                                  value,\n                                                              },\n                                                          }\n                                                        : null,\n                                                );\n                                                selectedEl?.oid &&\n                                                    createCodeDiffRequest(\n                                                        selectedEl?.oid,\n                                                        value,\n                                                        key,\n                                                    );\n                                            }}\n                                        />\n                                    ) : (\n                                        (prop.type === PropsType.String ||\n                                            prop.type === PropsType.Number) && (\n                                            <TextProp\n                                                prop={prop}\n                                                type={prop.type}\n                                                onChange={(value) => {\n                                                    setProps((prev) =>\n                                                        prev !== null\n                                                            ? {\n                                                                  ...prev,\n                                                                  [key]: {\n                                                                      ...prev[key],\n                                                                      value,\n                                                                  },\n                                                              }\n                                                            : null,\n                                                    );\n                                                }}\n                                                onBlur={(val) => {\n                                                    selectedEl?.oid &&\n                                                        createCodeDiffRequest(\n                                                            selectedEl?.oid,\n                                                            prop.type === PropsType.Number\n                                                                ? parseInt(val)\n                                                                : val,\n                                                            key,\n                                                        );\n                                                }}\n                                            />\n                                        )\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n        </div>\n    );\n};\n\nexport default PropsTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/BorderInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/DisplayInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/FillInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/GridRowColInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/NestedInputs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/compound/PositionInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { CompoundStyleImpl } from '@/lib/editor/styles';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport TextInput from '../single/TextInput';\nimport { cn } from '@onlook/ui/utils';\nimport SelectInput from '../single/SelectInput';\nimport { Icons } from '@onlook/ui/icons/index';\nimport type { DomElement } from '@onlook/models/element';\n\ntype Position = 'top' | 'bottom' | 'left' | 'right';\ntype PositionState = Record<Position, boolean>;\n\ninterface LineProps {\n    position: Position;\n    isActive: boolean;\n    onClick: (position: Position) => void;\n}\n\nconst PositionLine = ({ position, isActive, onClick }: LineProps) => {\n    const positionStyles = {\n        top: 'top-0.5 w-[calc(100%-16px)] left-[8px]',\n        right: 'right-0.5 h-[calc(100%-16px)] top-[8px]',\n        bottom: 'bottom-0.5 w-[calc(100%-16px)] left-[8px]',\n        left: 'left-0.5 h-[calc(100%-16px)] top-[8px]',\n    };\n\n    const lineStyles = {\n        top: 'w-1 h-3',\n        right: 'h-1 w-3',\n        bottom: 'w-1 h-3',\n        left: 'h-1 w-3',\n    };\n\n    return (\n        <div\n            className={cn(\n                'absolute cursor-pointer transition-colors flex items-center justify-center ',\n                positionStyles[position],\n            )}\n            onClick={() => onClick(position)}\n        >\n            <div\n                className={cn(\n                    'rounded-full',\n                    lineStyles[position],\n                    isActive\n                        ? 'bg-red-500 hover:bg-red-600'\n                        : 'bg-background-active hover:bg-primary',\n                )}\n            />\n        </div>\n    );\n};\n\nconst CenterButton = ({ isCenter, onClick }: { isCenter: boolean; onClick: () => void }) => (\n    <div\n        className=\"bg-background-onlook rounded relative flex items-center justify-center px-2 py-2 border border-background-active\"\n        onClick={onClick}\n    >\n        <Icons.Plus\n            className={cn(\n                'w-4 h-4 hover:text-red-500 transition-colors hover:cursor-pointer hover:scale-110',\n                isCenter ? 'text-red-500' : 'text-gray-400',\n            )}\n        />\n    </div>\n);\n\nconst PositionInput = observer(({ compoundStyle }: { compoundStyle: CompoundStyleImpl }) => {\n    const editorEngine = useEditorEngine();\n    const [lines, setLines] = useState<PositionState>({\n        top: false,\n        bottom: false,\n        left: false,\n        right: false,\n    });\n    const [isCentered, setIsCentered] = useState(false);\n\n    const resetPositionState = () => {\n        setLines({\n            top: false,\n            bottom: false,\n            left: false,\n            right: false,\n        });\n    };\n\n    const onLineClicked = (position: Position) => {\n        setLines((prev) => {\n            const newState = { ...prev, [position]: !prev[position], center: false };\n            if (!newState[position]) {\n                editorEngine.style.update(position, 'auto');\n            }\n            return newState;\n        });\n    };\n\n    const onMainValueChanged = (key: string, value: string) => {\n        if (value === 'absolute') {\n            centerElement();\n        } else {\n            editorEngine.style.updateStyleNoAction(\n                Object.fromEntries(\n                    compoundStyle.children.map((elementStyle) => [elementStyle.key, 'auto']),\n                ),\n            );\n            resetPositionState();\n        }\n    };\n\n    const getElementAndParent = async () => {\n        const elements = editorEngine.elements.selected;\n        if (elements.length === 0) {\n            return null;\n        }\n\n        const results = [];\n        for (const element of elements) {\n            if (!element?.domId) {\n                continue;\n            }\n\n            const webview = editorEngine.webviews.getWebview(element.webviewId);\n            if (!webview) {\n                continue;\n            }\n\n            const parent: DomElement | null = await webview.executeJavaScript(\n                `window.api?.getParentElement('${element.domId}')`,\n            );\n            if (!parent) {\n                continue;\n            }\n\n            results.push({ element, parent });\n        }\n\n        return results.length > 0 ? results : null;\n    };\n\n    const centerElement = async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return;\n        }\n        if (isCentered) {\n            return;\n        }\n\n        const updates: Record<string, string> = {};\n        for (const { element, parent } of elementPairs) {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n\n            updates.left = `${Math.round(centerX)}px`;\n            updates.top = `${Math.round(centerY)}px`;\n        }\n\n        editorEngine.style.updateMultiple(updates);\n    };\n\n    const checkIfCentered = useCallback(async () => {\n        const elementPairs = await getElementAndParent();\n        if (!elementPairs) {\n            return false;\n        }\n\n        const allCentered = elementPairs.every(({ element, parent }) => {\n            const centerX = (parent.rect.width - element.rect.width) / 2;\n            const centerY = (parent.rect.height - element.rect.height) / 2;\n            const currentLeft = element.rect.x - parent.rect.x;\n            const currentTop = element.rect.y - parent.rect.y;\n\n            return Math.abs(currentLeft - centerX) < 1 && Math.abs(currentTop - centerY) < 1;\n        });\n\n        setIsCentered(allCentered);\n        return allCentered;\n    }, [editorEngine.style.selectedStyle]);\n\n    const renderMainControl = () => (\n        <div className=\"flex flex-row items-center justify-between w-full\">\n            <p className=\"text-xs text-foreground-onlook\">{compoundStyle.head.displayName}</p>\n            <div className=\"flex flex-row space-x-1\">\n                <SelectInput elementStyle={compoundStyle.head} onValueChange={onMainValueChanged} />\n            </div>\n        </div>\n    );\n\n    const renderLines = useCallback(() => {\n        return (\n            <div className=\"w-16 h-16 bg-background-onlook rounded relative flex items-center justify-center px-4 py-4\">\n                <CenterButton isCenter={isCentered} onClick={centerElement} />\n                {(['top', 'right', 'bottom', 'left'] as Position[]).map((position) => (\n                    <PositionLine\n                        key={position}\n                        position={position}\n                        isActive={lines[position]}\n                        onClick={onLineClicked}\n                    />\n                ))}\n            </div>\n        );\n    }, [lines, centerElement, isCentered]);\n\n    const renderPositionInputs = useCallback(() => {\n        const elementStyles = compoundStyle.children;\n        const currentPosition = compoundStyle.head.getValue(\n            editorEngine.style.selectedStyle?.styles || {},\n        );\n\n        if (currentPosition !== 'absolute') {\n            return null;\n        }\n\n        const positionStyles = {\n            top: 'top-0 left-1/2 -translate-x-1/2',\n            bottom: 'bottom-0 left-1/2 -translate-x-1/2',\n            left: 'left-0 top-1/2 -translate-y-1/2',\n            right: 'right-0 top-1/2 -translate-y-1/2',\n        };\n\n        return (\n            <div className=\"relative h-36 w-52 flex items-center justify-center mb-4 mx-auto\">\n                {elementStyles.map((elementStyle) => {\n                    const position = elementStyle.key.toLowerCase() as Position;\n                    const isActive = lines[position];\n\n                    return (\n                        <TextInput\n                            key={elementStyle.key}\n                            elementStyle={elementStyle}\n                            disabled={!isActive}\n                            className={cn(\n                                'absolute w-16 bg-background-onlook text-foreground-onlook text-center rounded p-2',\n                                positionStyles[position],\n                                !isActive && 'opacity-50 cursor-not-allowed',\n                            )}\n                        />\n                    );\n                })}\n                {renderLines()}\n            </div>\n        );\n    }, [compoundStyle.children, editorEngine.style.selectedStyle, lines, renderLines]);\n\n    useEffect(() => {\n        const updatePosition = async () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n\n            const position = selectedStyle.styles?.['position'];\n\n            if (position === 'absolute') {\n                setLines({\n                    top: selectedStyle.styles?.['top'] !== 'auto',\n                    bottom: selectedStyle.styles?.['bottom'] !== 'auto',\n                    left: selectedStyle.styles?.['left'] !== 'auto',\n                    right: selectedStyle.styles?.['right'] !== 'auto',\n                });\n            }\n        };\n\n        checkIfCentered();\n        updatePosition();\n    }, [editorEngine.style.selectedStyle]);\n\n    return (\n        <div className=\"space-y-2\">\n            {renderMainControl()}\n            {renderPositionInputs()}\n        </div>\n    );\n});\n\nexport default PositionInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/AutoLayoutInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ColorPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/ImagePicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/Popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/ColorInput/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/NumberUnitInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":42,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":42,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":124,"column":25,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":124,"endColumn":63}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { observer } from 'mobx-react-lite';\nimport { type ChangeEvent, useEffect, useState } from 'react';\n\nconst NumberUnitInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [numberValue, setNumberValue] = useState<string>('');\n        const [unitValue, setUnitValue] = useState<string>('');\n        const [prevNumberValue, setPrevNumberValue] = useState<string>('');\n\n        useEffect(() => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(selectedStyle.styles);\n            const { numberVal, unitVal } = stringToParsedValue(\n                newValue,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        }, [editorEngine.style.selectedStyle]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const handleNumberInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n            setNumberValue(e.currentTarget.value);\n\n            const newNumber = e.currentTarget.value;\n            const parsedNewNumber = Number.parseFloat(newNumber);\n            const { min, max } = elementStyle.params || {};\n\n            if (min !== undefined && parsedNewNumber < min) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            if (max !== undefined && parsedNewNumber > max) {\n                toast({\n                    title: `Invalid Input`,\n                    description: `Value for ${elementStyle.displayName} cannot be more than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            const { unitVal } = stringToParsedValue(\n                e.currentTarget.value,\n                elementStyle.key === 'opacity',\n            );\n            const newUnit = unitVal === '' ? 'px' : unitVal;\n            setUnitValue(newUnit);\n        };\n\n        const handleUnitInputChange = (e: ChangeEvent<HTMLSelectElement>) => {\n            const newUnit = e.currentTarget.value;\n            const newValue = parsedValueToString(numberValue, newUnit);\n            setUnitValue(newUnit);\n            sendStyleUpdate(newValue);\n        };\n\n        const setValueCallback = (value: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(\n                value,\n                elementStyle.key === 'opacity',\n            );\n            setNumberValue(numberVal);\n            setUnitValue(unitVal);\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            if (e.currentTarget.value !== prevNumberValue) {\n                const value = parsedValueToString(\n                    Number.parseFloat(numberValue).toString(),\n                    unitValue,\n                );\n                sendStyleUpdate(value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n\n        const renderNumberInput = () => {\n            return (\n                <input\n                    type=\"text\"\n                    placeholder=\"--\"\n                    value={numberValue}\n                    onKeyDown={(e) =>\n                        handleNumberInputKeyDown(\n                            e,\n                            elementStyle,\n                            parsedValueToString(numberValue, unitValue),\n                            setValueCallback,\n                            sendStyleUpdate,\n                        )\n                    }\n                    onChange={handleNumberInputChange}\n                    className=\"w-full p-[6px] px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                    onFocus={() => {\n                        setPrevNumberValue(numberValue);\n                        editorEngine.history.startTransaction;\n                    }}\n                    onBlur={handleBlur}\n                />\n            );\n        };\n\n        const renderUnitInput = () => {\n            return (\n                <div className=\"relative w-full group\">\n                    <select\n                        value={unitValue}\n                        className=\"p-[6px] w-full px-2 rounded border-none text-foreground-active bg-background-onlook/75 text-start appearance-none focus:outline-none focus:ring-0\"\n                        onChange={handleUnitInputChange}\n                    >\n                        {elementStyle.params?.units?.map((option) => (\n                            <option key={option} value={option}>\n                                {option}\n                            </option>\n                        ))}\n                    </select>\n                    <div className=\"text-foreground-onlook group-hover:text-foreground-hover absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                        <Icons.ChevronDown />\n                    </div>\n                </div>\n            );\n        };\n\n        return (\n            <div className=\"flex flex-row gap-1 justify-end text-xs w-32\">\n                {renderNumberInput()}\n                {renderUnitInput()}\n            </div>\n        );\n    },\n);\n\nexport default NumberUnitInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/SelectInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":80,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":80,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport { Icons } from '@onlook/ui/icons';\nimport { ToggleGroup, ToggleGroupItem } from '@onlook/ui/toggle-group';\nimport { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\n\nconst OVERRIDE_OPTIONS: Record<string, string | undefined> = {\n    'flex-start': 'start',\n    'flex-end': 'end',\n    'space-between': 'stretch',\n    'space-around': 'around',\n    'space-evenly': 'evenly',\n    'flex-start flex-end': 'between',\n    'flex-start flex-start': 'around',\n    'flex-end flex-end': 'evenly',\n};\n\nconst OVERRIDE_ICONS: Record<string, JSX.Element | string | Record<string, JSX.Element>> = {\n    'flex-start': <Icons.ArrowRight />,\n    'flex-end': <Icons.ArrowDown />,\n    'space-between': <Icons.ArrowRight />,\n    'space-around': <Icons.ArrowRight />,\n    'space-evenly': <Icons.ArrowRight />,\n    'flex-start flex-end': <Icons.ArrowRight />,\n    'flex-start flex-start': <Icons.ArrowRight />,\n    'flex-end flex-end': <Icons.ArrowRight />,\n    start: <Icons.TextAlignLeft />,\n    center: <Icons.TextAlignCenter />,\n    end: <Icons.TextAlignRight />,\n    solid: <Icons.BorderSolid />,\n    dashed: <Icons.BorderDashed />,\n    dotted: <Icons.BorderDotted />,\n    row: <Icons.ArrowRight />,\n    column: <Icons.ArrowDown />,\n    block: '--',\n    justifyContent: {\n        'flex-start': <Icons.AlignLeft />,\n        center: <Icons.AlignCenterHorizontally />,\n        'flex-end': <Icons.AlignRight />,\n        'space-between': <Icons.SpaceBetweenHorizontally />,\n        stretch: <Icons.SpaceBetweenHorizontally />,\n    },\n    alignItems: {\n        'flex-start': <Icons.AlignTop />,\n        center: <Icons.AlignCenterVertically />,\n        'flex-end': <Icons.AlignBottom />,\n        'space-between': <Icons.SpaceBetweenVertically />,\n        stretch: <Icons.SpaceBetweenVertically />,\n    },\n};\n\nconst ICON_SELECTION = ['justifyContent', 'alignItems'];\n\nconst SelectInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n\n        useEffect(() => {\n            if (!editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle]);\n\n        const handleValueChange = (newValue: string) => {\n            if (!newValue) {\n                return;\n            }\n            setValue(newValue);\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const getFlexDirection = () => {\n            const selectedStyle = editorEngine.style.selectedStyle;\n            if (!selectedStyle) {\n                return 'row'; // default to row\n            }\n            return selectedStyle.styles?.['flexDirection'] ?? 'row'; // fallback to row if undefined\n        };\n\n        const getIcon = (option: string) => {\n            const flexDirection = getFlexDirection();\n            if (elementStyle.key === 'justifyContent') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option];\n            } else if (elementStyle.key === 'alignItems') {\n                return flexDirection === 'row'\n                    ? (OVERRIDE_ICONS.alignItems as Record<string, JSX.Element>)[option]\n                    : (OVERRIDE_ICONS.justifyContent as Record<string, JSX.Element>)[option];\n            }\n            const icon = OVERRIDE_ICONS[option];\n            if (typeof icon === 'object' && !React.isValidElement(icon)) {\n                return null;\n            }\n            return icon || option;\n        };\n\n        if (!elementStyle.params?.options) {\n            return null;\n        }\n\n        if (elementStyle.params.options.length <= 3 || ICON_SELECTION.includes(elementStyle.key)) {\n            return (\n                <ToggleGroup\n                    className={`w-32 overflow-hidden ${\n                        ICON_SELECTION.includes(elementStyle.key) ? 'gap-0.75' : ''\n                    }`}\n                    size=\"sm\"\n                    type=\"single\"\n                    value={value}\n                    onValueChange={handleValueChange}\n                >\n                    {elementStyle.params?.options.map((option) => (\n                        <ToggleGroupItem\n                            className=\"capitalize text-xs data-[state=on]:bg-background-onlook/75 data-[state=on]:text-foreground-active hover:text-foreground-hover\"\n                            value={option}\n                            key={option}\n                        >\n                            {getIcon(option)}\n                        </ToggleGroupItem>\n                    ))}\n                </ToggleGroup>\n            );\n        }\n\n        return (\n            <div className=\"relative w-32\">\n                <select\n                    name={elementStyle.displayName}\n                    value={value}\n                    className=\"p-[6px] w-full px-2 text-start rounded border-none text-xs text-active bg-background-onlook/75 appearance-none focus:outline-none focus:ring-0 capitalize\"\n                    onChange={(event) => handleValueChange(event.currentTarget.value)}\n                >\n                    {!elementStyle.params.options.includes(value) && (\n                        <option value={value}>{value}</option>\n                    )}\n                    {elementStyle.params.options.map((option) => (\n                        <option value={option} key={option}>\n                            {OVERRIDE_OPTIONS[option] ?? option}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"text-foreground-onlook absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n                    <Icons.ChevronDown />\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default SelectInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TagDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/AutoComplete.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":435,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":437,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":458,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":460,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":535,"column":33,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":537,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":558,"column":37,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":560,"endColumn":97}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { StyleMode } from '@/lib/editor/engine/style';\nimport { invokeMainChannel, sendAnalytics } from '@/lib/utils';\nimport type { CodeDiffRequest } from '@onlook/models/code';\nimport { MainChannels } from '@onlook/models/constants';\nimport type { ClassParsingResult, DomElement } from '@onlook/models/element';\nimport { Icons } from '@onlook/ui/icons';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport { AutoComplete, type SuggestionsListRef } from './AutoComplete';\n\ninterface History {\n    past: string[];\n    present: string;\n    future: string[];\n    error?: string;\n}\n\nconst TailwindInput = observer(() => {\n    const editorEngine = useEditorEngine();\n    const suggestionRef = useRef<SuggestionsListRef>(null);\n    const [showSuggestions, setShowSuggestions] = useState(true);\n    const [selectedEl, setSelectedEl] = useState<DomElement | undefined>();\n    let resizeObserver: ResizeObserver | undefined;\n\n    const instanceRef = useRef<HTMLTextAreaElement>(null);\n    const [instanceHistory, setInstanceHistory] = useState<History>({\n        past: [],\n        present: '',\n        future: [],\n    });\n    const [isInstanceFocused, setIsInstanceFocused] = useState(false);\n\n    const rootRef = useRef<HTMLTextAreaElement>(null);\n    const [rootHistory, setRootHistory] = useState<History>({\n        past: [],\n        present: '',\n        future: [],\n    });\n    const [isRootFocused, setIsRootFocused] = useState(false);\n\n    const updateHistory = (\n        value: string,\n        { past, present }: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        setHistory({\n            past: [...past, present],\n            present: value,\n            future: [],\n        });\n    };\n\n    const didChangeFromOriginal = (history: History, value: string) => {\n        if (history.past.length === 0) {\n            return false;\n        }\n        return history.past?.[0] !== value;\n    };\n\n    const undo = (history: History, setHistory: React.Dispatch<React.SetStateAction<History>>) => {\n        const { past, present, future } = history;\n        if (past.length === 0) {\n            return;\n        }\n\n        const previous = past[past.length - 1];\n        const newPast = past.slice(0, past.length - 1);\n\n        setHistory({\n            past: newPast,\n            present: previous,\n            future: [present, ...future],\n        });\n    };\n\n    const redo = (history: History, setHistory: React.Dispatch<React.SetStateAction<History>>) => {\n        const { past, present, future } = history;\n        if (future.length === 0) {\n            return;\n        }\n\n        const next = future[0];\n        const newFuture = future.slice(1);\n\n        setHistory({\n            past: [...past, present],\n            present: next,\n            future: newFuture,\n        });\n    };\n\n    const handleKeyDown = (\n        e: React.KeyboardEvent<HTMLTextAreaElement>,\n        history: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        if (showSuggestions) {\n            suggestionRef.current?.handleKeyDown(e);\n            return;\n        }\n\n        if (e.key === 'Enter' || e.key === 'Tab' || e.key === 'Escape') {\n            e.currentTarget.blur();\n            e.preventDefault();\n            return;\n        }\n\n        if ((e.metaKey || e.ctrlKey) && e.key === 'z') {\n            e.preventDefault();\n            if (e.shiftKey) {\n                redo(history, setHistory);\n            } else {\n                undo(history, setHistory);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (editorEngine.elements.selected.length > 0) {\n            const selectedEl = editorEngine.elements.selected?.[0];\n            setSelectedEl(selectedEl);\n            if (!isInstanceFocused) {\n                getInstanceClasses(selectedEl);\n            }\n            if (!isRootFocused) {\n                getRootClasses(selectedEl);\n            }\n        } else {\n            setSelectedEl(undefined);\n            setInstanceHistory({ past: [], present: '', future: [] });\n            setRootHistory({ past: [], present: '', future: [] });\n        }\n    }, [\n        editorEngine.elements.selected,\n        editorEngine.ast.mappings.layers,\n        editorEngine.history.length,\n    ]);\n\n    async function getInstanceClasses(domEl: DomElement) {\n        const newInstance = await editorEngine.ast.getTemplateNodeById(domEl.instanceId);\n\n        if (newInstance) {\n            const instanceClasses: ClassParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_CLASS,\n                newInstance,\n            );\n\n            if (instanceClasses.type === 'error') {\n                console.warn(instanceClasses.reason);\n            }\n\n            setInstanceHistory({\n                past: [],\n                present:\n                    instanceClasses.type === 'classes'\n                        ? instanceClasses.value.join(' ')\n                        : instanceClasses.type,\n                future: [],\n                error: instanceClasses.type === 'error' ? instanceClasses.reason : undefined,\n            });\n        }\n    }\n\n    async function getRootClasses(domEl: DomElement) {\n        const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n        if (newRoot) {\n            const rootClasses: ClassParsingResult = await invokeMainChannel(\n                MainChannels.GET_TEMPLATE_NODE_CLASS,\n                newRoot,\n            );\n\n            if (rootClasses.type === 'error') {\n                console.warn(rootClasses.reason);\n            }\n\n            setRootHistory({\n                past: [],\n                present:\n                    rootClasses.type === 'classes' ? rootClasses.value.join(' ') : rootClasses.type,\n                future: [],\n                error: rootClasses.type === 'error' ? rootClasses.reason : undefined,\n            });\n        }\n    }\n\n    async function getPrevRootClasses(domEl: DomElement): Promise<string[]> {\n        try {\n            const newRoot = await editorEngine.ast.getTemplateNodeById(domEl.oid);\n            if (newRoot) {\n                const rootClasses: ClassParsingResult = await invokeMainChannel(\n                    MainChannels.GET_TEMPLATE_NODE_CLASS,\n                    newRoot,\n                );\n\n                if (rootClasses.type === 'error') {\n                    console.warn(rootClasses.reason);\n                }\n\n                return rootClasses.type === 'classes' ? rootClasses.value : [];\n            }\n            return [];\n        } catch (err) {\n            console.log('erpr ', err);\n            return [];\n        }\n    }\n\n    const createCodeDiffRequest = async (oid: string | undefined, className: string) => {\n        if (!oid) {\n            console.error('No oid found for createCodeDiffRequest');\n            return;\n        }\n        const templateNode = await editorEngine.ast.getTemplateNodeById(oid);\n        if (!templateNode) {\n            console.error('No templateNode found for createCodeDiffRequest');\n            return;\n        }\n\n        const request: CodeDiffRequest[] = [];\n        const selectedElements = editorEngine.elements.selected;\n        const selectedElprevClasses = await getPrevRootClasses(selectedElements[0]);\n        const computedClass = compareClassNames(selectedElprevClasses, className.split(' '));\n\n        for (const ele of selectedElements) {\n            let computedClassName: string = '';\n            const isNonSelectedElement = ele.oid !== oid;\n\n            if (isNonSelectedElement) {\n                const prevClasses = await getPrevRootClasses(ele);\n                computedClassName = computeClassForNonSelectedElement(\n                    computedClass.added,\n                    computedClass.removed,\n                    prevClasses,\n                );\n            } else {\n                computedClassName = className;\n            }\n\n            request.push({\n                oid: ele.oid || '',\n                attributes: { className: computedClassName },\n                textContent: null,\n                overrideClasses: true,\n                structureChanges: [],\n            });\n        }\n\n        const res = await editorEngine.code.getAndWriteCodeDiff(request, true);\n        if (res) {\n            sendAnalytics('tailwind action');\n        }\n    };\n\n    function computeClassForNonSelectedElement(\n        addedClasses: string[],\n        removedClasses: string[],\n        originalClasses: string[],\n    ): string {\n        const finalClasses: string[] = [...originalClasses];\n        let classRemoved: boolean = false;\n\n        if (removedClasses.length > 0) {\n            removedClasses.forEach((cls) => {\n                const index = finalClasses.indexOf(cls);\n                if (index !== -1) {\n                    finalClasses.splice(index, 1);\n                    classRemoved = true;\n                }\n            });\n        }\n\n        if (removedClasses.length > 0 && classRemoved) {\n            addedClasses.forEach((cls) => {\n                if (!finalClasses.includes(cls)) {\n                    finalClasses.push(cls);\n                }\n            });\n        } else {\n            if (removedClasses.length === 0) {\n                addedClasses.forEach((cls) => {\n                    if (!finalClasses.includes(cls)) {\n                        finalClasses.push(cls);\n                    }\n                });\n            }\n        }\n\n        return finalClasses.join(' ');\n    }\n\n    function compareClassNames(\n        oldClasses: string[],\n        newClasses: string[],\n    ): {\n        added: string[];\n        removed: string[];\n    } {\n        const addedClasses = newClasses.filter((cls) => !oldClasses.includes(cls));\n\n        const removedClasses = oldClasses.filter((cls) => !newClasses.includes(cls));\n\n        return {\n            added: addedClasses,\n            removed: removedClasses,\n        };\n    }\n\n    const handleInput = (\n        e: React.FormEvent<HTMLTextAreaElement>,\n        history: History,\n        setHistory: React.Dispatch<React.SetStateAction<History>>,\n    ) => {\n        const { value, selectionStart } = e.currentTarget;\n        updateHistory(value, history, setHistory);\n        suggestionRef.current?.handleInput(value, selectionStart);\n    };\n\n    const adjustHeight = (textarea: HTMLTextAreaElement) => {\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight + 20}px`;\n    };\n\n    const navigateToTemplateNode = async (oid: string | null) => {\n        if (!oid) {\n            console.error('No templateNode ID provided for navigation.');\n            return;\n        }\n\n        try {\n            await window.api.invoke(MainChannels.VIEW_SOURCE_CODE, oid);\n        } catch (error) {\n            console.error('Error opening TemplateNode in IDE:', error);\n        }\n    };\n\n    useEffect(() => {\n        if (instanceRef.current) {\n            adjustHeight(instanceRef.current);\n        }\n    }, [instanceHistory.present]);\n\n    useEffect(() => {\n        if (rootRef.current) {\n            adjustHeight(rootRef.current);\n        }\n\n        if (rootRef.current) {\n            resizeObserver?.disconnect();\n            resizeObserver = new ResizeObserver(() => {\n                adjustHeight(rootRef.current!);\n            });\n            resizeObserver.observe(rootRef.current);\n\n            return () => {\n                resizeObserver?.disconnect();\n            };\n        }\n    }, [rootHistory.present]);\n\n    const EnterIndicator = ({ isInstance = false }: { isInstance?: boolean }) => {\n        return (\n            <div\n                className={cn(\n                    'absolute bottom-1 right-2 text-xs flex items-center',\n                    isInstance\n                        ? 'text-purple-300 dark:text-purple-300 selection:text-purple-50 selection:bg-purple-500/50 dark:selection:text-purple-50 dark:selection:bg-purple-500/50'\n                        : 'text-gray-500 selection:bg-gray-200 dark:selection:bg-gray-700',\n                )}\n            >\n                <span>enter to apply</span>\n                <Icons.Return className=\"ml-0.5\" />\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2 text-xs text-foreground-onlook shadow-none\">\n            {selectedEl?.oid && (\n                <div className=\"relative\">\n                    <div className=\"group cursor-pointer\">\n                        {selectedEl.instanceId && (\n                            <Tooltip>\n                                <TooltipTrigger asChild>\n                                    <button\n                                        className={cn(\n                                            'w-full flex items-center rounded-t h-6 px-1.5 gap-1 transition-colors border-[0.5px]',\n                                            editorEngine.style.mode === StyleMode.Root\n                                                ? 'bg-background-primary text-foreground-active border-background-tertiary'\n                                                : 'bg-background-secondary text-foreground-muted border-background-secondary group-hover:bg-background-primary/20 group-hover:text-foreground-active group-hover:border-background-tertiary/90 cursor-pointer',\n                                        )}\n                                        onClick={() => {\n                                            editorEngine.style.mode = StyleMode.Root;\n                                            rootRef.current?.focus();\n                                        }}\n                                    >\n                                        <Icons.Component className=\"h-3 w-3\" />{' '}\n                                        {'Main Component Classes'}\n                                    </button>\n                                </TooltipTrigger>\n                                <TooltipPortal container={document.getElementById('style-tab-id')}>\n                                    <TooltipContent>\n                                        {'Changes apply to component code. This is the default.'}\n                                    </TooltipContent>\n                                </TooltipPortal>\n                            </Tooltip>\n                        )}\n                        <Textarea\n                            ref={rootRef}\n                            className={cn(\n                                'w-full text-xs break-normal p-1.5 focus-visible:ring-0 resize-none shadow-none border-[0.5px]',\n                                'transition-colors duration-150',\n                                editorEngine.style.mode === StyleMode.Root\n                                    ? 'bg-background-tertiary text-foreground-active border-background-tertiary cursor-text'\n                                    : 'bg-background-secondary/75 text-foreground-muted border-background-secondary/75 group-hover:bg-background-tertiary/50 group-hover:text-foreground-active group-hover:border-background-tertiary/50 cursor-pointer',\n                                selectedEl.instanceId\n                                    ? 'rounded-t-none'\n                                    : 'bg-background-secondary/75 focus:bg-background-tertiary',\n                            )}\n                            placeholder=\"Add tailwind classes here\"\n                            value={\n                                rootHistory.error\n                                    ? 'Warning: ' + rootHistory.error + ' Open the code to edit.'\n                                    : rootHistory.present\n                            }\n                            readOnly={!!rootHistory.error}\n                            onInput={(e) => handleInput(e, rootHistory, setRootHistory)}\n                            onKeyDown={(e) => handleKeyDown(e, rootHistory, setRootHistory)}\n                            onBlur={(e) => {\n                                setShowSuggestions(false);\n                                setIsRootFocused(false);\n                                selectedEl.oid &&\n                                    didChangeFromOriginal(rootHistory, e.target.value) &&\n                                    createCodeDiffRequest(selectedEl.oid, e.target.value);\n                            }}\n                            onFocus={() => {\n                                editorEngine.style.mode = StyleMode.Root;\n                                setIsRootFocused(true);\n                            }}\n                            onClick={() => {\n                                if (editorEngine.style.mode !== StyleMode.Root) {\n                                    editorEngine.style.mode = StyleMode.Root;\n                                    rootRef.current?.focus();\n                                }\n                            }}\n                        />\n                        {isRootFocused && (\n                            <AutoComplete\n                                ref={suggestionRef}\n                                showSuggestions={showSuggestions}\n                                currentInput={rootHistory.present}\n                                setShowSuggestions={setShowSuggestions}\n                                setCurrentInput={(newValue: string) => {\n                                    updateHistory(newValue, rootHistory, setRootHistory);\n                                    selectedEl.oid &&\n                                        didChangeFromOriginal(rootHistory, newValue) &&\n                                        createCodeDiffRequest(selectedEl.oid, newValue);\n                                }}\n                            />\n                        )}\n                    </div>\n                    {rootHistory.error ? (\n                        <div className=\"absolute bottom-1 right-2 text-xs flex items-center text-blue-500 cursor-pointer\">\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation(); // Prevents unfocusing the textarea\n                                    navigateToTemplateNode(selectedEl?.oid);\n                                }}\n                                className=\"underline\"\n                            >\n                                Go to source\n                            </button>\n                        </div>\n                    ) : (\n                        isRootFocused && <EnterIndicator />\n                    )}\n                </div>\n            )}\n\n            {selectedEl?.instanceId && (\n                <div className=\"relative\">\n                    <div\n                        className={cn(\n                            'group',\n                            editorEngine.style.mode !== StyleMode.Instance && 'cursor-pointer',\n                        )}\n                    >\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <button\n                                    className={cn(\n                                        'w-full flex items-center rounded-t h-6 px-1.5 gap-1 transition-colors border-[0.5px]',\n                                        editorEngine.style.mode === StyleMode.Instance\n                                            ? 'bg-purple-600 text-purple-50 border-purple-600 dark:bg-purple-700 dark:text-purple-50 dark:border-purple-700'\n                                            : 'bg-background-secondary text-foreground-muted border-background-secondary/90 group-hover:bg-purple-200 group-hover:text-purple-900 group-hover:border-purple-200 dark:group-hover:bg-purple-900/50 dark:group-hover:text-purple-100 dark:group-hover:border-purple-900/50',\n                                    )}\n                                    onClick={() => {\n                                        editorEngine.style.mode = StyleMode.Instance;\n                                        instanceRef.current?.focus();\n                                    }}\n                                >\n                                    <Icons.ComponentInstance className=\"h-3 w-3\" /> Instance Classes\n                                </button>\n                            </TooltipTrigger>\n                            <TooltipPortal container={document.getElementById('style-tab-id')}>\n                                <TooltipContent>{'Changes apply to instance code.'}</TooltipContent>\n                            </TooltipPortal>\n                        </Tooltip>\n                        <Textarea\n                            ref={instanceRef}\n                            className={cn(\n                                'w-full text-xs break-normal p-1.5 focus-visible:ring-0 resize-none shadow-none rounded-t-none border-[0.5px]',\n                                'transition-colors duration-150',\n                                editorEngine.style.mode === StyleMode.Instance\n                                    ? 'bg-purple-100 text-purple-900 border-purple-300 dark:bg-purple-900/75 dark:text-purple-100 dark:border-purple-600'\n                                    : 'bg-background-secondary/75 text-foreground-muted border-background-secondary/75 group-hover:bg-purple-100/50 group-hover:text-purple-900 group-hover:border-purple-200 dark:group-hover:bg-purple-900/30 dark:group-hover:text-purple-100 dark:group-hover:border-purple-900/30 cursor-pointer',\n                            )}\n                            placeholder=\"Add tailwind classes here\"\n                            value={\n                                instanceHistory.error\n                                    ? 'Warning: ' +\n                                      instanceHistory.error +\n                                      ' Open the code to edit.'\n                                    : instanceHistory.present\n                            }\n                            readOnly={!!instanceHistory.error}\n                            onInput={(e) => handleInput(e, instanceHistory, setInstanceHistory)}\n                            onKeyDown={(e) => handleKeyDown(e, instanceHistory, setInstanceHistory)}\n                            onBlur={(e) => {\n                                setShowSuggestions(false);\n                                setIsInstanceFocused(false);\n                                selectedEl?.instanceId &&\n                                    didChangeFromOriginal(instanceHistory, e.target.value) &&\n                                    createCodeDiffRequest(selectedEl.instanceId, e.target.value);\n                            }}\n                            onFocus={() => {\n                                editorEngine.style.mode = StyleMode.Instance;\n                                setIsInstanceFocused(true);\n                            }}\n                            onClick={() => {\n                                if (editorEngine.style.mode !== StyleMode.Instance) {\n                                    editorEngine.style.mode = StyleMode.Instance;\n                                    instanceRef.current?.focus();\n                                }\n                            }}\n                        />\n                        {isInstanceFocused && (\n                            <AutoComplete\n                                ref={suggestionRef}\n                                showSuggestions={showSuggestions}\n                                currentInput={instanceHistory.present}\n                                setShowSuggestions={setShowSuggestions}\n                                setCurrentInput={(newValue: string) => {\n                                    updateHistory(newValue, instanceHistory, setInstanceHistory);\n                                    selectedEl?.instanceId &&\n                                        didChangeFromOriginal(instanceHistory, newValue) &&\n                                        createCodeDiffRequest(selectedEl?.instanceId, newValue);\n                                }}\n                            />\n                        )}\n                    </div>\n                    {instanceHistory.error ? (\n                        <div className=\"absolute bottom-1 right-2 text-xs flex items-center text-blue-500 cursor-pointer\">\n                            <button\n                                onClick={(e) => {\n                                    e.stopPropagation(); // Prevents unfocusing the textarea\n                                    navigateToTemplateNode(selectedEl?.oid);\n                                }}\n                                className=\"underline\"\n                            >\n                                Go to source\n                            </button>\n                        </div>\n                    ) : (\n                        isInstanceFocused && <EnterIndicator />\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default TailwindInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TailwindInput/twClassGen.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/StylesTab/single/TextInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":41,"column":13,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":41,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { SingleStyle } from '@/lib/editor/styles/models';\nimport {\n    getDefaultUnit,\n    handleNumberInputKeyDown,\n    parsedValueToString,\n    stringToParsedValue,\n} from '@/lib/editor/styles/numberUnit';\nimport { toast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport type React from 'react';\nimport { useEffect, useState } from 'react';\n\nconst TextInput = observer(\n    ({\n        elementStyle,\n        onValueChange,\n        className,\n        disabled,\n    }: {\n        elementStyle: SingleStyle;\n        onValueChange?: (key: string, value: string) => void;\n        className?: string;\n        disabled?: boolean;\n    }) => {\n        const editorEngine = useEditorEngine();\n        const [value, setValue] = useState(elementStyle.defaultValue);\n        const [isFocused, setIsFocused] = useState(false);\n        const [prevValue, setPrevValue] = useState(elementStyle.defaultValue);\n        useEffect(() => {\n            if (isFocused || !editorEngine.style.selectedStyle) {\n                return;\n            }\n            const newValue = elementStyle.getValue(editorEngine.style.selectedStyle?.styles);\n            setValue(newValue);\n        }, [editorEngine.style.selectedStyle, isFocused]);\n\n        const sendStyleUpdate = (newValue: string) => {\n            editorEngine.style.update(elementStyle.key, newValue);\n            onValueChange && onValueChange(elementStyle.key, newValue);\n        };\n\n        const emitValue = (newValue: string) => {\n            const { numberVal, unitVal } = stringToParsedValue(newValue);\n            const parsedNum = parseFloat(numberVal);\n            const newUnit = getDefaultUnit(unitVal);\n\n            newValue = parsedValueToString(parsedNum.toString(), newUnit);\n\n            const { min, max } = elementStyle.params || {};\n            if (min !== undefined && parsedNum < min) {\n                toast({\n                    title: 'Invalid Input',\n                    description: `Value for ${elementStyle.displayName} cannot be less than ${min}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n            if (max !== undefined && parsedNum > max) {\n                toast({\n                    title: 'Invalid Input',\n                    description: `Value for ${elementStyle.displayName} cannot be greater than ${max}`,\n                    variant: 'destructive',\n                });\n                return;\n            }\n\n            setValue(newValue);\n            sendStyleUpdate(newValue);\n        };\n\n        const handleFocus = () => {\n            setPrevValue(value);\n            setIsFocused(true);\n            editorEngine.history.startTransaction();\n        };\n\n        const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n            setIsFocused(false);\n            if (prevValue !== e.currentTarget.value) {\n                emitValue(e.currentTarget.value);\n            }\n            editorEngine.history.commitTransaction();\n        };\n        return (\n            <input\n                type=\"text\"\n                className={cn(\n                    'w-full p-[6px] text-xs px-2 rounded border-none text-active bg-background-onlook/75 text-start focus:outline-none focus:ring-0 appearance-none',\n                    className,\n                )}\n                placeholder=\"--\"\n                value={value}\n                onChange={(e) => setValue(e.currentTarget.value)}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n                onKeyDown={(e) =>\n                    handleNumberInputKeyDown(e, elementStyle, value, setValue, sendStyleUpdate)\n                }\n                disabled={disabled}\n            />\n        );\n    },\n);\n\nexport default TextInput;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/EditPanel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/HotkeysModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/BrandTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ComponentsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/HelpDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/DeleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/RenameModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ImageTab.tsx/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/LayersTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/OpenCodeMini/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/PageTab/PageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/PageTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/NodeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/PageTreeNode.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport type { PageNode } from '@onlook/models/pages';\nimport {\n    ContextMenu,\n    ContextMenuContent,\n    ContextMenuItem,\n    ContextMenuTrigger,\n} from '@onlook/ui/context-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { toast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { motion } from 'motion/react';\nimport { useState } from 'react';\nimport type { NodeApi } from 'react-arborist';\nimport { PageModal } from '../PageTab/PageModal';\ninterface PageTreeNodeProps {\n    node: NodeApi<PageNode>;\n    style: React.CSSProperties;\n}\n\nconst PageTreeNode: React.FC<PageTreeNodeProps> = ({ node, style }) => {\n    const hasChildren = node.data.children && node.data.children.length > 0;\n    const editorEngine = useEditorEngine();\n    const isActive = !hasChildren && editorEngine.pages.isNodeActive(node.data);\n    const [showModal, setShowModal] = useState(false);\n    const [modalMode, setModalMode] = useState<'create' | 'rename'>('create');\n\n    const getBaseName = (fullPath: string) => {\n        return fullPath.split('/').pop() || '';\n    };\n\n    const handleClick = async (e: React.MouseEvent) => {\n        if (hasChildren) {\n            node.toggle();\n            return;\n        }\n\n        const webviewId = editorEngine.webviews.selected?.[0]?.id;\n        if (webviewId) {\n            editorEngine.pages.setActivePath(webviewId, node.data.path);\n        }\n\n        editorEngine.pages.setCurrentPath(node.data.path);\n        node.select();\n\n        await editorEngine.pages.navigateTo(node.data.path);\n    };\n\n    const handleRename = () => {\n        setModalMode('rename');\n        setShowModal(true);\n    };\n\n    const handleCreate = () => {\n        setModalMode('create');\n        setShowModal(true);\n    };\n\n    const handleDelete = async () => {\n        try {\n            await editorEngine.pages.deletePage(\n                node.data.path,\n                node.data.children && node.data.children?.length > 0 ? true : false,\n            );\n        } catch (error) {\n            console.error('Failed to delete page:', error);\n            toast({\n                title: 'Failed to delete page',\n                description: error instanceof Error ? error.message : String(error),\n                variant: 'destructive',\n            });\n        }\n    };\n\n    const handleDuplicate = async () => {\n        try {\n            await editorEngine.pages.duplicatePage(node.data.path, node.data.path);\n\n            toast({\n                title: 'Page duplicated',\n                description: 'Page has been successfully duplicated.',\n                variant: 'default',\n            });\n        } catch (error) {\n            console.error('Failed to duplicate page:', error);\n            toast({\n                title: 'Failed to duplicate page',\n                description: error instanceof Error ? error.message : String(error),\n                variant: 'destructive',\n            });\n        }\n    };\n\n    const menuItems = [\n        {\n            label: 'Create New Page',\n            action: handleCreate,\n            icon: <Icons.File className=\"mr-2 h-4 w-4\" />,\n        },\n        {\n            label: 'Duplicate Page',\n            action: () => {\n                handleDuplicate();\n            },\n            icon: <Icons.Copy className=\"mr-2 h-4 w-4\" />,\n            disabled: node.data.isRoot,\n        },\n        {\n            label: 'Rename',\n            action: handleRename,\n            icon: <Icons.Pencil className=\"mr-2 h-4 w-4\" />,\n            disabled: node.data.isRoot,\n        },\n        {\n            label: 'Delete',\n            action: handleDelete,\n            icon: <Icons.Trash className=\"mr-2 h-4 w-4\" />,\n            destructive: true,\n            disabled: node.data.isRoot,\n        },\n    ];\n\n    return (\n        <>\n            <ContextMenu>\n                <ContextMenuTrigger>\n                    <div\n                        style={style}\n                        className={cn(\n                            'flex items-center h-6 cursor-pointer hover:bg-background-hover rounded',\n                            !hasChildren && isActive && 'bg-red-500 text-white',\n                            isActive && 'hover:bg-red-500',\n                        )}\n                        onClick={handleClick}\n                    >\n                        <span className=\"w-4 h-4 flex-none relative\">\n                            {hasChildren && (\n                                <div className=\"w-4 h-4 flex items-center justify-center absolute z-50\">\n                                    <motion.div\n                                        initial={false}\n                                        animate={{ rotate: node.isOpen ? 90 : 0 }}\n                                    >\n                                        <Icons.ChevronRight className=\"h-2.5 w-2.5\" />\n                                    </motion.div>\n                                </div>\n                            )}\n                        </span>\n                        {!node.data.isRoot &&\n                            (hasChildren ? (\n                                <Icons.Directory className=\"w-4 h-4 mr-2\" />\n                            ) : (\n                                <Icons.File className=\"w-4 h-4 mr-2\" />\n                            ))}\n                        <span>{node.data.name}</span>\n                    </div>\n                </ContextMenuTrigger>\n                <ContextMenuContent>\n                    {menuItems.map((item) => (\n                        <ContextMenuItem\n                            key={item.label}\n                            onClick={item.action}\n                            className=\"cursor-pointer\"\n                            disabled={item.disabled}\n                        >\n                            <span\n                                className={cn(\n                                    'flex w-full items-center gap-1',\n                                    item.destructive && 'text-red',\n                                )}\n                            >\n                                {item.icon}\n\n                                {item.label}\n                            </span>\n                        </ContextMenuItem>\n                    ))}\n                </ContextMenuContent>\n            </ContextMenu>\n\n            <PageModal\n                open={showModal}\n                onOpenChange={setShowModal}\n                mode={modalMode}\n                baseRoute={node.data.path}\n                initialName={modalMode === 'rename' ? getBaseName(node.data.path) : ''}\n            />\n        </>\n    );\n};\n\nexport default observer(PageTreeNode);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/PageTreeRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/TreeNode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/Tree/TreeRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/DeviceSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'res' is defined but never used.","line":37,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { Theme } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { useEffect, useState } from 'react';\n\nconst DeviceSettings = ({ settings }: { settings: FrameSettings }) => {\n    const editorEngine = useEditorEngine();\n    const [deviceTheme, setDeviceTheme] = useState(settings.theme);\n\n    useEffect(() => {\n        setDeviceTheme(settings.theme);\n    }, [settings.id]);\n\n    useEffect(() => {\n        const observer = (newSettings: FrameSettings) => {\n            if (newSettings.theme !== deviceTheme) {\n                setDeviceTheme(newSettings.theme);\n            }\n        };\n\n        editorEngine.canvas.observeSettings(settings.id, observer);\n\n        return editorEngine.canvas.unobserveSettings(settings.id, observer);\n    }, []);\n\n    async function changeTheme(theme: Theme) {\n        const webview = editorEngine.webviews.getWebview(settings.id);\n        if (!webview) {\n            return;\n        }\n\n        const themeValue =\n            theme === Theme.System ? 'device' : theme === Theme.Dark ? 'dark' : 'light';\n\n        webview.executeJavaScript(`window.api?.setTheme(\"${themeValue}\")`).then((res) => {\n            setDeviceTheme(theme);\n        });\n\n        editorEngine.canvas.saveFrame(settings.id, {\n            theme: theme,\n        });\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-smallPlus text-foreground-primary\">Device Settings</p>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Theme</span>\n                <div className=\"flex flex-row p-0.5 w-3/5 bg-background-secondary rounded\">\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.System\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.System)}\n                    >\n                        <Icons.Laptop />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.Dark\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.Dark)}\n                    >\n                        <Icons.Moon />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${\n                            deviceTheme === Theme.Light\n                                ? 'bg-background-tertiary hover:bg-background-tertiary'\n                                : 'hover:bg-background-tertiary/50 text-foreground-onlook'\n                        }`}\n                        variant={'ghost'}\n                        onClick={() => changeTheme(Theme.Light)}\n                    >\n                        <Icons.Sun />\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DeviceSettings;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/FrameDimensions.tsx","messages":[{"ruleId":"no-unsafe-optional-chaining","severity":2,"message":"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.","line":128,"column":45,"nodeType":"ChainExpression","messageId":"unsafeOptionalChain","endLine":128,"endColumn":101},{"ruleId":"no-unsafe-optional-chaining","severity":2,"message":"Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.","line":146,"column":45,"nodeType":"ChainExpression","messageId":"unsafeOptionalChain","endLine":146,"endColumn":101}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { DefaultSettings, Orientation } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons/index';\nimport { Input } from '@onlook/ui/input';\nimport {\n    Select,\n    SelectContent,\n    SelectGroup,\n    SelectItem,\n    SelectLabel,\n    SelectTrigger,\n    SelectValue,\n} from '@onlook/ui/select';\nimport { Separator } from '@onlook/ui/separator';\nimport { Fragment, useEffect, useState } from 'react';\n\ntype DeviceOptions = {\n    [category: string]: {\n        [deviceName: string]: string;\n    };\n};\n\nconst deviceOptions: DeviceOptions = {\n    Custom: {\n        Custom: 'Custom',\n    },\n    Phone: {\n        'Android Compact': '412x917',\n        'Android Medium': '700x840',\n        'Android Small': '360x640',\n        'Android Large': '360x800',\n        'iPhone 16': '393x852',\n        'iPhone 16 Pro': '402x874',\n        'iPhone 16 Pro Max': '440x956',\n        'iPhone 16 Plus': '430x932',\n        'iPhone 14 & 15 Pro': '430x932',\n        'iPhone 14 & 15': '393x852',\n        'iPhone 13 & 14': '390x844',\n        'iPhone 13 Pro Max': '428x926',\n        'iPhone 13 / 13 Pro': '390x844',\n        'iPhone 11 Pro Max': '414x896',\n        'iPhone 11 Pro / X': '375x812',\n        'iPhone 8 Plus': '414x736',\n        'iPhone 8': '375x667',\n        'iPhone SE': '320x568',\n    },\n    Tablet: {\n        'Android Expanded': '1280x800',\n        'Surface Pro 8': '1440x960',\n        'Surface Pro 4': '1368x912',\n        'iPad Mini 8.3': '744x1133',\n        'iPad Mini 5': '768x1024',\n        'iPad Pro 11': '834x1194',\n        'iPad Pro 12.9': '1024x1366',\n    },\n    Laptop: {\n        'MacBook Air': '1280x832',\n        MacBook: '1152x700',\n        'MacBook Pro 14': '1512x982',\n        'MacBook Pro 16': '1728x1117',\n        'MacBook Pro': '1440x900',\n        'Surface Book': '1500x1000',\n    },\n    Desktop: {\n        Desktop: '1440x1024',\n        Wireframe: '1440x1024',\n        TV: '1280x720',\n        iMac: '1280x720',\n    },\n};\n\nconst FrameDimensions = ({ settings }: { settings: FrameSettings }) => {\n    const editorEngine = useEditorEngine();\n    const [device, setDevice] = useState(settings.device || DefaultSettings.DEVICE);\n    const [orientation, setOrientation] = useState(\n        settings.orientation || DefaultSettings.ORIENTATION,\n    );\n    const [width, setWidth] = useState(\n        settings.dimension.width || DefaultSettings.FRAME_DIMENSION.width,\n    );\n    const [height, setHeight] = useState(\n        settings.dimension.height || DefaultSettings.FRAME_DIMENSION.height,\n    );\n    // const [responsive, setResponsive] = useState('Closest Size');\n    const [aspectRatioLocked, setAspectRatioLocked] = useState(\n        settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n    );\n    const [aspectRatio, setAspectRatio] = useState(width / height);\n    const [step, setStep] = useState(1);\n    const [minDimensionsAspectRatio, setMinDimensionsAspectRatio] = useState({\n        height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n        width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n    });\n\n    useEffect(() => {\n        const observer = (newSettings: FrameSettings) => {\n            if (newSettings.dimension.width !== width) {\n                setWidth(newSettings.dimension.width);\n            }\n            if (newSettings.dimension.height !== height) {\n                setHeight(newSettings.dimension.height);\n            }\n        };\n\n        editorEngine.canvas.observeSettings(settings.id, observer);\n\n        return editorEngine.canvas.unobserveSettings(settings.id, observer);\n    }, []);\n\n    useEffect(() => {\n        setDevice(settings.device || DefaultSettings.DEVICE);\n        setOrientation(settings.orientation || DefaultSettings.ORIENTATION);\n        setWidth(settings.dimension.width || DefaultSettings.FRAME_DIMENSION.width);\n        setHeight(settings.dimension.height || DefaultSettings.FRAME_DIMENSION.height);\n        setAspectRatioLocked(settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED);\n    }, [settings.id]);\n\n    useEffect(() => {\n        const [deviceCategory, deviceName] = device.split(':');\n        if (deviceName === 'Custom') {\n            editorEngine.canvas.saveFrame(settings.id, {\n                device: device,\n            });\n            return;\n        }\n        const [deviceWidth, deviceHeight] = deviceOptions?.[deviceCategory]?.[deviceName].split('x');\n        if (width === parseInt(deviceHeight) && height === parseInt(deviceWidth)) {\n            return;\n        } else {\n            setWidth(parseInt(deviceWidth));\n            setHeight(parseInt(deviceHeight));\n            editorEngine.canvas.saveFrame(settings.id, {\n                dimension: { width: parseInt(deviceWidth), height: parseInt(deviceHeight) },\n                device: device,\n            });\n            if (aspectRatioLocked) {\n                setAspectRatio(parseInt(deviceWidth) / parseInt(deviceHeight));\n            }\n        }\n    }, [device]);\n\n    useEffect(() => {\n        const [deviceCategory, deviceName] = device.split(':');\n        const [deviceWidth, deviceHeight] = deviceOptions?.[deviceCategory]?.[deviceName].split('x');\n\n        if (\n            deviceName !== 'Custom' &&\n            ((width !== parseInt(deviceWidth) && width !== parseInt(deviceHeight)) ||\n                (height !== parseInt(deviceHeight) && height !== parseInt(deviceWidth)))\n        ) {\n            setDevice('Custom:Custom');\n        }\n        if (height > width && orientation !== Orientation.Potrait && !aspectRatioLocked) {\n            setOrientation(Orientation.Potrait);\n        }\n        if (width > height && orientation !== Orientation.Landscape && !aspectRatioLocked) {\n            setOrientation(Orientation.Landscape);\n        }\n\n        editorEngine.canvas.saveFrame(settings.id, {\n            dimension: { width: width, height: height },\n        });\n    }, [height, width]);\n\n    useEffect(() => {\n        setAspectRatio(width / height);\n        if (aspectRatioLocked) {\n            setMinDimensionsAspectRatio({\n                height: Math.max(\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                    Math.floor(parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio),\n                ),\n                width: Math.max(\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                    Math.floor(parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio),\n                ),\n            });\n        } else {\n            setMinDimensionsAspectRatio({\n                height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n            });\n        }\n        editorEngine.canvas.saveFrame(settings.id, {\n            aspectRatioLocked: aspectRatioLocked,\n        });\n    }, [aspectRatioLocked]);\n\n    useEffect(() => {\n        editorEngine.canvas.saveFrame(settings.id, {\n            orientation: orientation,\n        });\n    }, [orientation]);\n\n    const handleOrientationChange = () => {\n        if (\n            width >= parseInt(DefaultSettings.MIN_DIMENSIONS.width) &&\n            height >= parseInt(DefaultSettings.MIN_DIMENSIONS.height)\n        ) {\n            setHeight(width);\n            setWidth(height);\n            setOrientation(\n                orientation === Orientation.Landscape ? Orientation.Potrait : Orientation.Landscape,\n            );\n        }\n    };\n\n    const handleDimensionInput = (\n        event: React.ChangeEvent<HTMLInputElement>,\n        dimension: string,\n    ) => {\n        const value = event.target.value;\n        if (dimension === 'width') {\n            setWidth(parseInt(value));\n            if (aspectRatioLocked) {\n                setHeight(Math.floor(parseInt(value) / aspectRatio));\n            }\n        } else if (dimension === 'height') {\n            setHeight(parseInt(value));\n            if (aspectRatioLocked) {\n                setWidth(Math.floor(parseInt(value) * aspectRatio));\n            }\n        }\n    };\n\n    const handleDimensionKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.shiftKey) {\n            setStep(10);\n        }\n    };\n\n    const handleDimensionKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.shiftKey) {\n            setStep(1);\n        }\n    };\n\n    const handleDimensionInputBlur = (\n        event: React.FocusEvent<HTMLInputElement>,\n        dimension: string,\n    ) => {\n        const value = event.target.value;\n        if (dimension === 'width') {\n            if (aspectRatioLocked) {\n                if (\n                    parseInt(value) / aspectRatio <\n                        parseInt(DefaultSettings.MIN_DIMENSIONS.height) ||\n                    parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.width)\n                ) {\n                    const dimensionsAspectRatio =\n                        aspectRatio >= 1\n                            ? {\n                                  height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                                  width: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio,\n                                  ),\n                              }\n                            : {\n                                  height: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio,\n                                  ),\n                                  width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                              };\n                    setHeight(dimensionsAspectRatio.height);\n                    setWidth(dimensionsAspectRatio.width);\n                }\n            } else if (parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                event.target.value = parseInt(DefaultSettings.MIN_DIMENSIONS.width).toString();\n                setWidth(parseInt(DefaultSettings.MIN_DIMENSIONS.width));\n            }\n        } else if (dimension === 'height') {\n            if (aspectRatioLocked) {\n                if (\n                    parseInt(value) * aspectRatio <\n                        parseInt(DefaultSettings.MIN_DIMENSIONS.width) ||\n                    parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.height)\n                ) {\n                    const dimensionsAspectRatio =\n                        aspectRatio >= 1\n                            ? {\n                                  height: parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                                  width: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.height) * aspectRatio,\n                                  ),\n                              }\n                            : {\n                                  height: Math.floor(\n                                      parseInt(DefaultSettings.MIN_DIMENSIONS.width) / aspectRatio,\n                                  ),\n                                  width: parseInt(DefaultSettings.MIN_DIMENSIONS.width),\n                              };\n                    setHeight(dimensionsAspectRatio.height);\n                    setWidth(dimensionsAspectRatio.width);\n                }\n            } else if (parseInt(value) < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                event.target.value = parseInt(DefaultSettings.MIN_DIMENSIONS.height).toString();\n                setHeight(parseInt(DefaultSettings.MIN_DIMENSIONS.height));\n            }\n        }\n    };\n\n    const handleAspectRatioLock = () => {\n        setAspectRatioLocked((prev) => !prev);\n        editorEngine.canvas.saveFrame(settings.id, {\n            aspectRatioLocked: !aspectRatioLocked,\n        });\n    };\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <p className=\"text-smallPlus text-foreground-primary\">Frame Dimensions</p>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Device</span>\n                <Select value={device} onValueChange={setDevice}>\n                    <SelectTrigger className=\"w-3/5 bg-background-secondary border-background-secondary py-1.5 px-2 h-fit text-xs rounded focus:outline-none focus:ring-0\">\n                        <SelectValue placeholder=\"Select device\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"rounded-md bg-background-secondary\">\n                        {Object.entries(deviceOptions).map(([category, devices], index) =>\n                            category !== 'Custom' ? (\n                                <Fragment key={index}>\n                                    <SelectGroup key={index}>\n                                        <SelectLabel>{category}</SelectLabel>\n                                        {Object.entries(devices).map(([deviceName], index) => (\n                                            <SelectItem\n                                                key={index}\n                                                value={category + ':' + deviceName}\n                                                className=\"focus:bg-background-tertiary rounded-md text-xs cursor-pointer\"\n                                            >\n                                                {deviceName}\n                                            </SelectItem>\n                                        ))}\n                                    </SelectGroup>\n                                    {index < Object.entries(deviceOptions).length - 1 && (\n                                        <Separator className=\"text-white\" />\n                                    )}\n                                </Fragment>\n                            ) : (\n                                <SelectItem\n                                    key={'Custom'}\n                                    value={'Custom:Custom'}\n                                    className=\"focus:bg-background-tertiary rounded-md text-xs cursor-pointer\"\n                                >\n                                    {'Custom'}\n                                </SelectItem>\n                            ),\n                        )}\n                    </SelectContent>\n                </Select>\n            </div>\n            <div className=\"flex flex-row justify-between items-center\">\n                <span className=\"text-xs text-foreground-secondary\">Orientation</span>\n                <div className=\"flex flex-row p-0.5 w-3/5 bg-background-secondary rounded\">\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${orientation === Orientation.Potrait ? 'bg-background-tertiary hover:bg-background-tertiary' : 'hover:bg-background-tertiary/50'}`}\n                        variant={'ghost'}\n                        onClick={handleOrientationChange}\n                    >\n                        <Icons.Potrait\n                            className={`h-4 w-4 ${orientation !== Orientation.Potrait ? 'text-foreground-secondary hover:text-foreground-onlook' : ''}`}\n                        />\n                    </Button>\n                    <Button\n                        size={'icon'}\n                        className={`h-full w-full px-0.5 py-1.5 bg-background-secondary rounded-sm ${orientation === 'Landscape' ? 'bg-background-tertiary hover:bg-background-tertiary' : 'hover:bg-background-tertiary/50'}`}\n                        variant={'ghost'}\n                        onClick={handleOrientationChange}\n                    >\n                        <Icons.Landscape\n                            className={`h-4 w-4 ${orientation !== Orientation.Landscape ? 'text-foreground-secondary hover:text-foreground-onlook' : ''}`}\n                        />\n                    </Button>\n                </div>\n            </div>\n            <div className=\"flex flex-row justify-between items-center relative\">\n                <span className=\"text-xs text-foreground-secondary\">Width</span>\n                <Icons.CornerTopLeft\n                    className=\"absolute h-4 w-4 text-foreground-quadranary top-3 left-16 cursor-pointer z-50\"\n                    onClick={handleAspectRatioLock}\n                />\n                {aspectRatioLocked ? (\n                    <Icons.LockClosed\n                        className=\"absolute h-3 w-3 text-foreground-primary top-[30px] left-[61.5px] cursor-pointer z-50\"\n                        onClick={handleAspectRatioLock}\n                    />\n                ) : (\n                    <Icons.LockOpen\n                        className=\"absolute h-3 w-3 text-foreground-primary top-[30px] left-[61.5px] cursor-pointer z-50\"\n                        onClick={handleAspectRatioLock}\n                    />\n                )}\n\n                <div className=\"relative w-3/5\">\n                    <Input\n                        className=\"w-full px-2 h-8 text-xs rounded border-none text-foreground-active bg-background-secondary text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                        value={width}\n                        min={minDimensionsAspectRatio.width}\n                        type=\"number\"\n                        step={step}\n                        onChange={(event) => handleDimensionInput(event, 'width')}\n                        onKeyDown={(event) => handleDimensionKeyDown(event)}\n                        onKeyUp={(event) => handleDimensionKeyUp(event)}\n                        onBlur={(event) => handleDimensionInputBlur(event, 'width')}\n                    />\n                    <p className=\"p-0 h-fit w-fit absolute right-2 top-1/2 transform -translate-y-1/2 text-foreground-secondary text-xs\">\n                        px\n                    </p>\n                </div>\n            </div>\n            <div className=\"flex flex-row justify-between items-center relative\">\n                <span className=\"text-xs text-foreground-secondary\">Height</span>\n                <Icons.CornerBottomLeft\n                    className=\"absolute h-4 w-4 text-foreground-quadranary bottom-3 left-16 cursor-pointer z-50\"\n                    onClick={() => setAspectRatioLocked((prev) => !prev)}\n                />\n                <div className=\"relative w-3/5\">\n                    <Input\n                        className=\"w-full px-2 h-8 text-xs rounded border-none text-foreground-active bg-background-secondary text-start focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none\"\n                        value={height}\n                        min={minDimensionsAspectRatio.height}\n                        type=\"number\"\n                        step={step}\n                        onChange={(event) => handleDimensionInput(event, 'height')}\n                        onKeyDown={(event) => handleDimensionKeyDown(event)}\n                        onKeyUp={(event) => handleDimensionKeyUp(event)}\n                        onBlur={(event) => handleDimensionInputBlur(event, 'height')}\n                    />\n                    <p className=\"p-0 h-fit w-fit absolute right-2 top-1/2 transform -translate-y-1/2 text-foreground-secondary text-xs\">\n                        px\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FrameDimensions;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/WindowsTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/ZoomControls/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/LayersPanel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/RightClickMenu/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Base.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/Verification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":88,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { invokeMainChannel } from '@/lib/utils';\nimport {\n    FREESTYLE_IP_ADDRESS,\n    FRESTYLE_CUSTOM_HOSTNAME,\n    MainChannels,\n} from '@onlook/models/constants';\nimport type {\n    CreateDomainVerificationResponse,\n    VerifyDomainResponse,\n} from '@onlook/models/hosting';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { getValidUrl } from '@onlook/utility';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\n\nenum VerificationStatus {\n    NO_DOMAIN = 'no_domain',\n    VERIFYING = 'verifying',\n    VERIFIED = 'verified',\n    LOADING = 'loading',\n}\n\ninterface DNSRecord {\n    type: 'A' | 'CNAME' | 'TXT';\n    host: string;\n    value: string;\n}\n\nexport const Verification = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const domainsManager = projectsManager.domains;\n\n    const [status, setStatus] = useState(VerificationStatus.NO_DOMAIN);\n    const [domain, setDomain] = useState('');\n    const [records, setRecords] = useState<DNSRecord[]>([]);\n    const [error, setError] = useState<string | null>();\n    const [ownedDomains, setOwnedDomains] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (domainsManager) {\n            domainsManager.getOwnedDomains().then((domains) => {\n                setOwnedDomains(domains);\n            });\n        }\n    }, [editorEngine.isSettingsOpen]);\n\n    function editDomain() {\n        setStatus(VerificationStatus.NO_DOMAIN);\n        setRecords([]);\n    }\n\n    function validateDomain(): string | false {\n        if (!domain) {\n            setError('Domain is required');\n            return false;\n        }\n\n        try {\n            const url = new URL(getValidUrl(domain.trim()));\n            const hostname = url.hostname.toLowerCase();\n\n            // Split hostname into parts and ensure only two parts (domain + TLD)\n            const parts = hostname.split('.');\n            if (parts.length !== 2) {\n                setError('Please enter a domain without subdomains (e.g., example.com)');\n                return false;\n            }\n\n            // Basic domain validation regex for the final format\n            const domainRegex = /^[a-z0-9]+(-[a-z0-9]+)*\\.[a-z]{2,}$/;\n            if (!domainRegex.test(hostname)) {\n                setError('Please enter a valid domain name (e.g., example.com)');\n                return false;\n            }\n\n            setError(null);\n            return hostname;\n        } catch (err) {\n            setError('Invalid domain format');\n            return false;\n        }\n    }\n\n    async function setupDomain() {\n        const validDomain = validateDomain();\n        if (!validDomain) {\n            return;\n        }\n\n        setDomain(validDomain);\n        setStatus(VerificationStatus.LOADING);\n\n        // Send verification request to server\n        const response: CreateDomainVerificationResponse = await invokeMainChannel(\n            MainChannels.CREATE_DOMAIN_VERIFICATION,\n            {\n                domain: validDomain,\n            },\n        );\n\n        if (!response.success || !response.verificationCode) {\n            setError(response.message ?? 'Failed to create domain verification');\n            setStatus(VerificationStatus.NO_DOMAIN);\n            return;\n        }\n\n        setStatus(VerificationStatus.VERIFYING);\n        const verificationRecord = getVerificationRecord(validDomain, response.verificationCode);\n        const aRecords = getARecords();\n        setRecords([verificationRecord, ...aRecords]);\n        setError(null);\n    }\n\n    async function verifyDomain() {\n        setStatus(VerificationStatus.LOADING);\n        const response: VerifyDomainResponse = await invokeMainChannel(MainChannels.VERIFY_DOMAIN, {\n            domain: domain,\n        });\n\n        if (!response.success) {\n            setError(response.message ?? 'Failed to verify domain');\n            setStatus(VerificationStatus.VERIFYING);\n            return;\n        }\n\n        setStatus(VerificationStatus.VERIFIED);\n        setError(null);\n        addCustomDomain(domain);\n    }\n\n    const addCustomDomain = (url: string) => {\n        if (!domainsManager) {\n            setError('Failed to add custom domain');\n            return;\n        }\n        domainsManager.addCustomDomainToProject(url);\n        setStatus(VerificationStatus.VERIFIED);\n        setDomain(url);\n        setError(null);\n    };\n\n    function removeDomain() {\n        setStatus(VerificationStatus.NO_DOMAIN);\n        setDomain('');\n        setRecords([]);\n    }\n\n    function getVerificationRecord(domain: string, verificationCode: string) {\n        const verificationRecord: DNSRecord = {\n            type: 'TXT',\n            host: `${FRESTYLE_CUSTOM_HOSTNAME}.${domain}`,\n            value: verificationCode,\n        };\n        return verificationRecord;\n    }\n\n    function getARecords() {\n        const aRecords: DNSRecord[] = [];\n        const apexRecord: DNSRecord = {\n            type: 'A',\n            host: '@',\n            value: FREESTYLE_IP_ADDRESS,\n        };\n\n        const wwwRecord: DNSRecord = {\n            type: 'A',\n            host: 'www',\n            value: FREESTYLE_IP_ADDRESS,\n        };\n\n        aRecords.push(apexRecord, wwwRecord);\n        return aRecords;\n    }\n\n    function renderExistingDomains() {\n        if (ownedDomains.length === 0 || status !== VerificationStatus.NO_DOMAIN) {\n            return null;\n        }\n        return (\n            <div className=\"flex flex-col gap-2 flex-1\">\n                {ownedDomains.map((domain) => (\n                    <div\n                        key={domain}\n                        className=\"flex items-center text-small text-muted-foreground\"\n                    >\n                        <p>{domain}</p>\n                        <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"ml-auto\"\n                            onClick={() => {\n                                addCustomDomain(domain);\n                            }}\n                        >\n                            Use Domain\n                        </Button>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    function renderNoDomainInput() {\n        return (\n            <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-start gap-2\">\n                    <div className=\"w-1/3\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Custom URL</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Input your domain{' '}\n                            {status === VerificationStatus.NO_DOMAIN && ownedDomains.length > 0\n                                ? 'or reuse previous'\n                                : ''}\n                        </p>\n                    </div>\n                    <div className=\"flex flex-col gap-4 flex-1\">\n                        <div className=\"flex gap-2\">\n                            <Input\n                                disabled={status !== VerificationStatus.NO_DOMAIN}\n                                value={domain}\n                                onChange={(e) => setDomain(e.target.value)}\n                                placeholder=\"example.com\"\n                                className=\"bg-background placeholder:text-muted-foreground\"\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter') {\n                                        setupDomain();\n                                    }\n                                }}\n                            />\n                            <Button\n                                onClick={() => {\n                                    if (status === VerificationStatus.NO_DOMAIN) {\n                                        setupDomain();\n                                    } else {\n                                        editDomain();\n                                    }\n                                }}\n                                variant=\"secondary\"\n                                size=\"sm\"\n                                className=\"h-8 text-sm\"\n                                disabled={status === VerificationStatus.LOADING}\n                            >\n                                {status === VerificationStatus.LOADING && (\n                                    <Icons.Shadow className=\"h-4 w-4 animate-spin mr-2\" />\n                                )}\n                                {status === VerificationStatus.NO_DOMAIN ? 'Setup' : 'Edit'}\n                            </Button>\n                        </div>\n                        {renderExistingDomains()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    function renderConfigureHeader() {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Configure</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Your DNS records must be set up with these values.\n                        </p>\n                    </div>\n                    <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        className=\"h-8 px-3 text-sm\"\n                        onClick={verifyDomain}\n                        disabled={status === VerificationStatus.LOADING}\n                    >\n                        {status === VerificationStatus.LOADING && (\n                            <Icons.Shadow className=\"h-4 w-4 animate-spin mr-2\" />\n                        )}\n                        Verify Setup\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    function renderVerifiedHeader() {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"space-y-2\">\n                        <p className=\"text-regularPlus text-muted-foreground\">Verified</p>\n                        <p className=\"text-small text-muted-foreground\">\n                            Your domain is verified and ready to use.\n                        </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <div className=\"flex items-center gap-1\">\n                            <Icons.CheckCircled className=\"h-4 w-4 text-green-500\" />\n                            <span className=\"text-xs text-muted-foreground\">Verified</span>\n                        </div>\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"icon\">\n                                    <Icons.DotsVertical className=\"h-4 w-4\" />\n                                </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem className=\"hover:bg-muted focus:bg-muted cursor-pointer hidden\">\n                                    <Icons.Reset className=\"mr-2 h-4 w-4\" />\n                                    Reconfigure DNS\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                    onClick={removeDomain}\n                                    className=\"hover:bg-destructive/10 focus:bg-destructive/10 text-red-500 cursor-pointer\"\n                                >\n                                    <Icons.Trash className=\"mr-2 h-4 w-4\" />\n                                    Remove Domain\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    function renderRecords() {\n        if (records.length === 0) {\n            return null;\n        }\n        return (\n            <div className=\"grid grid-cols-7 gap-4 rounded-lg border p-4\">\n                <div className=\"text-sm font-medium col-span-1\">Type</div>\n                <div className=\"text-sm font-medium col-span-3\">Host</div>\n                <div className=\"text-sm font-medium col-span-3\">Value</div>\n\n                {records.map((record) => (\n                    <>\n                        <p className=\"text-sm col-span-1 overflow-auto\">{record.type}</p>\n                        <p className=\"text-sm col-span-3 overflow-auto\">{record.host}</p>\n                        <p className=\"text-sm col-span-3 overflow-auto\">{record.value}</p>\n                    </>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            {renderNoDomainInput()}\n            {status === VerificationStatus.VERIFYING && renderConfigureHeader()}\n            {status === VerificationStatus.VERIFIED && renderVerifiedHeader()}\n            {(status === VerificationStatus.VERIFYING || status === VerificationStatus.VERIFIED) &&\n                renderRecords()}\n            {error && <p className=\"text-sm text-red-500\">{error}</p>}\n        </div>\n    );\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/Verified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/Custom/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/DangerZone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/UpgradePrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/Domain/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/PreferencesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nextTheme' is assigned a value but never used.","line":22,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleBackButtonClick' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager, useUserManager } from '@/components/Context';\nimport { useTheme } from '@/components/ThemeProvider';\nimport { ProjectTabs } from '@/lib/projects';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { MainChannels, Theme } from '@onlook/models/constants';\nimport { DEFAULT_IDE } from '@onlook/models/ide';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { IDE } from '/common/ide';\n\nconst PreferencesTab = observer(() => {\n    const userManager = useUserManager();\n    const projectsManager = useProjectsManager();\n    const { theme, nextTheme, setTheme } = useTheme();\n    const [isAnalyticsEnabled, setIsAnalyticsEnabled] = useState(false);\n    const [ide, setIde] = useState<IDE>(IDE.fromType(DEFAULT_IDE));\n    const [shouldWarnDelete, setShouldWarnDelete] = useState(true);\n\n    const IDEIcon = Icons[ide.icon];\n\n    useEffect(() => {\n        setIde(IDE.fromType(userManager.settings.settings?.editor?.ideType || DEFAULT_IDE));\n        setIsAnalyticsEnabled(userManager.settings.settings?.enableAnalytics || false);\n        setShouldWarnDelete(userManager.settings.settings?.editor?.shouldWarnDelete ?? true);\n    }, []);\n\n    function updateIde(ide: IDE) {\n        userManager.settings.updateEditor({ ideType: ide.type });\n        setIde(ide);\n    }\n\n    function updateAnalytics(enabled: boolean) {\n        userManager.settings.update({ enableAnalytics: enabled });\n        invokeMainChannel(MainChannels.UPDATE_ANALYTICS_PREFERENCE, enabled);\n        setIsAnalyticsEnabled(enabled);\n    }\n\n    function updateDeleteWarning(enabled: boolean) {\n        userManager.settings.updateEditor({ shouldWarnDelete: enabled });\n        setShouldWarnDelete(enabled);\n    }\n\n    function handleBackButtonClick() {\n        projectsManager.projectsTab = ProjectTabs.PROJECTS;\n    }\n\n    return (\n        <div className=\"flex flex-col gap-8\">\n            <div className=\"flex justify-between items-center\">\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">Theme</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        Choose your preferred appearance\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {theme === Theme.Dark && <Icons.Moon className=\"mr-2 h-4 w-4\" />}\n                            {theme === Theme.Light && <Icons.Sun className=\"mr-2 h-4 w-4\" />}\n                            {theme === Theme.System && <Icons.Laptop className=\"mr-2 h-4 w-4\" />}\n                            <span className=\"capitalize\">{theme}</span>\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => setTheme(Theme.Light)}>\n                            <Icons.Sun className=\"mr-2 h-4 w-4\" />\n                            <span>Light</span>\n                            {theme === Theme.Light && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setTheme(Theme.Dark)}>\n                            <Icons.Moon className=\"mr-2 h-4 w-4\" />\n                            <span>Dark</span>\n                            {theme === Theme.Dark && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setTheme(Theme.System)}>\n                            <Icons.Laptop className=\"mr-2 h-4 w-4\" />\n                            <span>System</span>\n                            {theme === Theme.System && <Icons.CheckCircled className=\"ml-auto\" />}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"flex justify-between items-center\">\n                <p className=\"text-foreground-onlook text-largePlus\">Default Code Editor</p>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"min-w-[150px]\">\n                            <IDEIcon className=\"text-default h-3 w-3 mr-2\" />\n                            <span className=\"smallPlus\">{ide.displayName}</span>\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                        {IDE.getAll().map((item) => {\n                            const ItemIcon = Icons[item.icon];\n                            return (\n                                <DropdownMenuItem\n                                    key={item.displayName}\n                                    className=\"text-smallPlus min-w-[140px]\"\n                                    onSelect={() => {\n                                        updateIde(item);\n                                    }}\n                                >\n                                    <ItemIcon className=\"text-default h-3 w-3 mr-2\" />\n                                    <span>{item.displayName}</span>\n                                    {ide === item && <Icons.CheckCircled className=\"ml-auto\" />}\n                                </DropdownMenuItem>\n                            );\n                        })}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\" flex justify-between items-center gap-4\">\n                <div className=\" flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">{'Warn before delete'}</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        {'This adds a warning before deleting elements in the editor'}\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {shouldWarnDelete ? 'On' : 'Off'}\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"text-smallPlus min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => updateDeleteWarning(true)}>\n                            {'Warning On'}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateDeleteWarning(false)}>\n                            {'Warning Off'}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"flex justify-between items-center gap-4\">\n                <div className=\"flex flex-col gap-2\">\n                    <p className=\"text-foreground-onlook text-largePlus\">Analytics</p>\n                    <p className=\"text-foreground-onlook text-small\">\n                        This helps our small team of two know what we need to improve with the\n                        product.\n                    </p>\n                </div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"text-smallPlus min-w-[150px]\">\n                            {isAnalyticsEnabled ? 'On' : 'Off'}\n                            <Icons.ChevronDown className=\"ml-auto\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent className=\"text-smallPlus min-w-[150px]\">\n                        <DropdownMenuItem onClick={() => updateAnalytics(true)}>\n                            {'Analytics On'}\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateAnalytics(false)}>\n                            {'Analytics Off'}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n        </div>\n    );\n});\n\nexport default PreferencesTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/ProjectTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":13,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'controlledOpen' is defined but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'controlledOnOpenChange' is defined but never used.","line":16,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { DefaultSettings, MainChannels } from '@onlook/models/constants';\nimport type { Project } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { observer } from 'mobx-react-lite';\nimport { useState } from 'react';\n\nconst ProjectTab = observer(\n    ({\n        children,\n        project,\n        open: controlledOpen,\n        onOpenChange: controlledOnOpenChange,\n    }: {\n        children?: React.ReactNode;\n        project?: Project | null;\n        open?: boolean;\n        onOpenChange?: (open: boolean) => void;\n    }) => {\n        const projectsManager = useProjectsManager();\n        const projectToUpdate = project || projectsManager.project;\n        const [formValues, setFormValues] = useState({\n            name: projectToUpdate?.name || '',\n            url: projectToUpdate?.url || '',\n            folderPath: projectToUpdate?.folderPath || '',\n            commands: projectToUpdate?.commands || DefaultSettings.COMMANDS,\n        });\n        const [canSave, setCanSave] = useState(false);\n\n        const handleUpdatePath = async () => {\n            const path = (await invokeMainChannel(MainChannels.PICK_COMPONENTS_DIRECTORY)) as\n                | string\n                | null;\n            if (path) {\n                setFormValues((prev) => ({ ...prev, folderPath: path }));\n                setCanSave(true);\n            }\n        };\n\n        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            const { id, value } = e.target;\n            setFormValues((prev) => {\n                if (id === 'run' || id === 'build' || id === 'install') {\n                    return {\n                        ...prev,\n                        commands: {\n                            ...prev.commands,\n                            [id]: value,\n                        },\n                    };\n                }\n                return {\n                    ...prev,\n                    [id]: value,\n                };\n            });\n            setCanSave(true);\n        };\n\n        const handleSave = () => {\n            if (projectToUpdate) {\n                projectsManager.updateProject({\n                    ...projectToUpdate,\n                    ...formValues,\n                });\n                setCanSave(false);\n            }\n        };\n\n        return (\n            <div className=\"space-y-8\">\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-medium\">Metadata</h2>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Name</p>\n                            <Input\n                                id=\"name\"\n                                value={formValues.name}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">URL</p>\n                            <Input\n                                id=\"url\"\n                                value={formValues.url}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Path</p>\n                            <div className=\"flex items-center gap-2 w-2/3\">\n                                <Input\n                                    id=\"folderPath\"\n                                    value={formValues.folderPath}\n                                    onChange={handleChange}\n                                />\n                                <Button\n                                    size={'icon'}\n                                    variant={'outline'}\n                                    onClick={handleUpdatePath}\n                                >\n                                    <Icons.Directory />\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Add divider */}\n                <div className=\"border-t border-border\" />\n\n                <div className=\"space-y-4\">\n                    <h2 className=\"text-lg font-medium\">Commands</h2>\n                    <p className=\"text-small text-foreground-secondary\">\n                        {\" Only update these if you know what you're doing!\"}\n                    </p>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Install</p>\n                            <Input\n                                id=\"install\"\n                                value={\n                                    formValues.commands.install || DefaultSettings.COMMANDS.install\n                                }\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Run</p>\n                            <Input\n                                id=\"run\"\n                                value={formValues.commands.run || DefaultSettings.COMMANDS.run}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                            <p className=\"text-regularPlus text-muted-foreground\">Build</p>\n                            <Input\n                                id=\"build\"\n                                value={formValues.commands.build || DefaultSettings.COMMANDS.build}\n                                onChange={handleChange}\n                                className=\"w-2/3\"\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                    <Button size={'sm'} onClick={handleSave} disabled={!canSave}>\n                        {canSave ? 'Save' : 'Saved'}\n                    </Button>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default ProjectTab;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/SettingsModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/PortWarningModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/RunButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/Terminal/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":113,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { useTheme } from '@/components/ThemeProvider';\nimport type { RunManager, TerminalMessage } from '@/lib/projects/run';\nimport { MainChannels } from '@onlook/models/constants';\nimport { RunState } from '@onlook/models/run';\nimport { cn } from '@onlook/ui/utils';\nimport { Terminal as XTerm, type ITheme } from '@xterm/xterm';\nimport '@xterm/xterm/css/xterm.css';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface TerminalProps {\n    hidden?: boolean;\n}\n\nconst TERMINAL_THEME: Record<'LIGHT' | 'DARK', ITheme> = {\n    LIGHT: {\n        background: '#ffffff',\n        foreground: '#2d2d2d',\n        cursor: '#333333',\n        cursorAccent: '#ffffff',\n        black: '#2d2d2d',\n        red: '#d64646',\n        green: '#4e9a06',\n        yellow: '#c4a000',\n        blue: '#3465a4',\n        magenta: '#75507b',\n        cyan: '#06989a',\n        white: '#d3d7cf',\n        brightBlack: '#555753',\n        brightRed: '#ef2929',\n        brightGreen: '#8ae234',\n        brightYellow: '#fce94f',\n        brightBlue: '#729fcf',\n        brightMagenta: '#ad7fa8',\n        brightCyan: '#34e2e2',\n        brightWhite: '#eeeeec',\n        selectionBackground: '#bfbfbf',\n    },\n    DARK: {}, // Use default dark theme\n};\n\nconst Terminal = observer(({ hidden = false }: TerminalProps) => {\n    const terminalRef = useRef<HTMLDivElement>(null);\n    const [terminal, setTerminal] = useState<XTerm | null>(null);\n    const projectsManager = useProjectsManager();\n    const runner = projectsManager.runner;\n    const { theme } = useTheme();\n\n    useEffect(() => {\n        if (terminal) {\n            terminal.options.theme = theme === 'light' ? TERMINAL_THEME.LIGHT : TERMINAL_THEME.DARK;\n        }\n    }, [theme]);\n\n    useEffect(() => {\n        if (!terminalRef.current || !runner || terminal) {\n            return;\n        }\n\n        const { term, terminalDataListener, stateListener } = initTerminal(\n            runner,\n            terminalRef.current,\n        );\n        setTerminal(term);\n\n        return () => {\n            term.dispose();\n            setTerminal(null);\n            window.api.removeListener(MainChannels.TERMINAL_ON_DATA, terminalDataListener);\n            window.api.removeListener(MainChannels.RUN_STATE_CHANGED, stateListener);\n        };\n    }, []);\n\n    function initTerminal(runner: RunManager, container: HTMLDivElement) {\n        const term = new XTerm({\n            cursorBlink: true,\n            fontSize: 12,\n            fontFamily: 'monospace',\n            theme: theme === 'light' ? TERMINAL_THEME.LIGHT : TERMINAL_THEME.DARK,\n            convertEol: true,\n            allowTransparency: true,\n            disableStdin: false,\n            allowProposedApi: true,\n            macOptionIsMeta: true,\n        });\n\n        term.open(container);\n        const { cols, rows } = term;\n        runner.resizeTerminal(cols, rows);\n\n        runner.getHistory().then((history) => {\n            if (history) {\n                term.write(history);\n            }\n        });\n\n        // Set up event listeners\n        term.onData((data) => {\n            runner.handleTerminalInput(data);\n        });\n\n        term.onResize(({ cols, rows }) => {\n            runner.resizeTerminal(cols, rows);\n        });\n\n        const terminalDataListener = (message: TerminalMessage) => {\n            if (message.id === projectsManager.project?.id) {\n                term.write(message.data);\n            }\n        };\n\n        const stateListener = ({ state, message }: { state: RunState; message: string }) => {\n            term.write('\\x1b[96m' + message + '\\x1b[0m\\n');\n        };\n\n        window.api.on(MainChannels.TERMINAL_ON_DATA, terminalDataListener);\n        window.api.on(MainChannels.RUN_STATE_CHANGED, stateListener);\n        return { term, terminalDataListener, stateListener };\n    }\n\n    return (\n        <div\n            className={cn(\n                'bg-background rounded-lg overflow-auto transition-all duration-300',\n                hidden ? 'h-0 w-0 invisible' : 'h-[22rem] w-[37rem]',\n            )}\n        >\n            <div\n                ref={terminalRef}\n                className={cn(\n                    'h-full w-full p-2 transition-opacity duration-200',\n                    hidden ? 'opacity-0' : 'opacity-100 delay-300',\n                )}\n            />\n        </div>\n    );\n});\n\nexport default Terminal;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/Toolbar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ModeToggle/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/OpenCode/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ProjectSelect/ProjectNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/ProjectSelect/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSubscriptionOpen' is assigned a value but never used.","line":27,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsSubscriptionOpen' is assigned a value but never used.","line":27,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager, useRouteManager } from '@/components/Context';\nimport { ProjectTabs } from '@/lib/projects';\nimport { Route } from '@/lib/routes';\nimport { invokeMainChannel } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuSub,\n    DropdownMenuSubContent,\n    DropdownMenuSubTrigger,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { useRef, useState } from 'react';\n\nconst ProjectBreadcrumb = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const routeManager = useRouteManager();\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n    const [isSubscriptionOpen, setIsSubscriptionOpen] = useState(false);\n    const closeTimeoutRef = useRef<Timer>();\n\n    async function handleNavigateToProject(tab?: ProjectTabs) {\n        try {\n            await saveScreenshot();\n        } catch (error) {\n            console.error('Failed to take screenshot:', error);\n        }\n        setTimeout(() => {\n            projectsManager.project = null;\n            if (tab) {\n                projectsManager.projectsTab = tab;\n            }\n            routeManager.route = Route.PROJECTS;\n        }, 100);\n    }\n\n    async function handleReturn() {\n        handleNavigateToProject();\n    }\n\n    const handleOpenProjectFolder = () => {\n        const project = projectsManager.project;\n        if (project && project.folderPath) {\n            invokeMainChannel(MainChannels.OPEN_IN_EXPLORER, project.folderPath);\n        }\n    };\n\n    async function saveScreenshot() {\n        const project = projectsManager.project;\n        if (!project) {\n            console.error('No project selected');\n            return;\n        }\n        const projectId = project.id;\n        const result = await editorEngine.takeActiveWebviewScreenshot(projectId, {\n            save: true,\n        });\n        if (!result || !result.name) {\n            console.error('Failed to take screenshot');\n            return;\n        }\n        project.previewImg = result.name;\n        project.updatedAt = new Date().toISOString();\n        projectsManager.updateProject(project);\n    }\n\n    return (\n        <div className=\"mx-2 flex flex-row items-center text-small gap-2\">\n            <DropdownMenu open={isDropdownOpen} onOpenChange={setIsDropdownOpen}>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        variant={'ghost'}\n                        className=\"mx-0 px-0 gap-2 text-foreground-onlook text-small hover:text-foreground-active hover:bg-transparent\"\n                    >\n                        <Icons.OnlookLogo className=\"w-6 h-6 hidden md:block\" />\n                        <span className=\"mx-0 max-w-[60px] md:max-w-[100px] lg:max-w-[200px] px-0 text-foreground-onlook text-small truncate cursor-pointer\">\n                            {projectsManager.project?.name}\n                        </span>\n                        <Icons.ChevronDown className=\"transition-all rotate-0 group-data-[state=open]:-rotate-180 duration-200 ease-in-out text-foreground-onlook \" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                    align=\"start\"\n                    className=\"w-48\"\n                    onMouseEnter={() => {\n                        if (closeTimeoutRef.current) {\n                            clearTimeout(closeTimeoutRef.current);\n                        }\n                    }}\n                    onMouseLeave={() => {\n                        closeTimeoutRef.current = setTimeout(() => {\n                            setIsDropdownOpen(false);\n                        }, 300);\n                    }}\n                >\n                    <DropdownMenuItem onClick={handleReturn}>\n                        <div className=\"flex row center items-center group\">\n                            <Icons.Tokens className=\"mr-2 group-hover:rotate-12 transition-transform\" />\n                            {'Go to all Projects'}\n                        </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuSub>\n                        <DropdownMenuSubTrigger>New Project</DropdownMenuSubTrigger>\n                        <DropdownMenuSubContent>\n                            <DropdownMenuItem\n                                onClick={() => handleNavigateToProject(ProjectTabs.PROMPT_CREATE)}\n                                className={cn(\n                                    'focus:bg-blue-100 focus:text-blue-900',\n                                    'hover:bg-blue-100 hover:text-blue-900',\n                                    'dark:focus:bg-blue-900 dark:focus:text-blue-100',\n                                    'dark:hover:bg-blue-900 dark:hover:text-blue-100',\n                                )}\n                            >\n                                <Icons.FilePlus className=\"mr-2 h-4 w-4\" />\n                                Start from scratch\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                                onClick={() => handleNavigateToProject(ProjectTabs.IMPORT_PROJECT)}\n                                className={cn(\n                                    'focus:bg-teal-100 focus:text-teal-900',\n                                    'hover:bg-teal-100 hover:text-teal-900',\n                                    'dark:focus:bg-teal-900 dark:focus:text-teal-100',\n                                    'dark:hover:bg-teal-900 dark:hover:text-teal-100',\n                                )}\n                            >\n                                <Icons.Download className=\"mr-2 h-4 w-4\" />\n                                Import a project\n                            </DropdownMenuItem>\n                        </DropdownMenuSubContent>\n                    </DropdownMenuSub>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleOpenProjectFolder}>\n                        {'Show in Explorer'}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                        onClick={() => {\n                            editorEngine.isPlansOpen = true;\n                        }}\n                    >\n                        Subscriptions\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                        onClick={() => {\n                            editorEngine.isSettingsOpen = true;\n                        }}\n                    >\n                        Settings\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n    );\n});\n\nexport default ProjectBreadcrumb;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/AdvancedSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/Domain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/Url.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/Dropdown/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customDomain' is assigned a value but never used.","line":17,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'customDomainState' is assigned a value but never used.","line":23,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { PublishStatus } from '@onlook/models/hosting';\nimport { DomainType } from '@onlook/models/projects';\nimport { Separator } from '@onlook/ui/separator';\nimport { observer } from 'mobx-react-lite';\nimport { AdvancedSettingsSection } from './AdvancedSettings';\nimport { DomainSection } from './Domain';\n\nexport const PublishDropdown = observer(\n    ({ setIsOpen }: { setIsOpen: (isOpen: boolean) => void }) => {\n        const projectsManager = useProjectsManager();\n        if (!projectsManager.project) {\n            return null;\n        }\n\n        const baseDomain = projectsManager.project?.domains?.base || null;\n        const customDomain = projectsManager.project?.domains?.custom || null;\n\n        const baseDomainState = projectsManager.domains?.base?.state || {\n            status: PublishStatus.UNPUBLISHED,\n            message: null,\n        };\n        const customDomainState = projectsManager.domains?.custom?.state || {\n            status: PublishStatus.UNPUBLISHED,\n            message: null,\n        };\n\n        return (\n            <div className=\"rounded-md flex flex-col text-foreground-secondary\">\n                <DomainSection\n                    setIsOpen={setIsOpen}\n                    domain={baseDomain}\n                    type={DomainType.BASE}\n                    state={baseDomainState}\n                />\n\n                {/* TODO: Uncomment after freestyle bug is fixed */}\n                {/* <Separator />\n                <DomainSection\n                    setIsOpen={setIsOpen}\n                    domain={customDomain}\n                    type={DomainType.CUSTOM}\n                    state={customDomainState}\n                /> */}\n                <Separator />\n                <AdvancedSettingsSection setIsOpen={setIsOpen} />\n            </div>\n        );\n    },\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/TriggerButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Publish/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Subscription/PricingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'i' is defined but never used.","line":44,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { MotionCard } from '@onlook/ui/motion-card';\nimport { motion } from 'framer-motion';\nimport { useTranslation } from 'react-i18next';\n\nexport const PricingCard = ({\n    plan,\n    price,\n    description,\n    features,\n    buttonText,\n    buttonProps,\n    delay,\n    isLoading,\n}: {\n    plan: string;\n    price: string;\n    description: string;\n    features: string[];\n    buttonText: string;\n    buttonProps: React.ButtonHTMLAttributes<HTMLButtonElement>;\n    delay: number;\n    isLoading?: boolean;\n}) => {\n    const { t } = useTranslation();\n\n    return (\n        <MotionCard\n            className=\"w-[360px]\"\n            initial={{ opacity: 0, y: 40 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay }}\n        >\n            <motion.div className=\"p-6 flex flex-col h-full\">\n                <div className=\"space-y-1\">\n                    <h2 className=\"text-title2\">{plan}</h2>\n                    <p className=\"text-foreground-onlook text-largePlus\">{price}</p>\n                </div>\n                <div className=\"border-[0.5px] border-border-primary -mx-6 my-6\" />\n                <p className=\"text-foreground-primary text-title3 text-balance\">{description}</p>\n                <div className=\"border-[0.5px] border-border-primary -mx-6 my-6\" />\n                <div className=\"space-y-4 mb-6\">\n                    {features.map((feature, i) => (\n                        <div\n                            key={feature}\n                            className=\"flex items-center gap-3 text-sm text-foreground-secondary/80\"\n                        >\n                            <Icons.Check className=\"w-5 h-5 text-foreground-secondary/80\" />\n                            <span>{feature}</span>\n                        </div>\n                    ))}\n                </div>\n                <Button\n                    className=\"mt-auto w-full\"\n                    {...buttonProps}\n                    disabled={isLoading || buttonProps.disabled}\n                >\n                    {isLoading ? (\n                        <div className=\"flex items-center gap-2\">\n                            <Icons.Shadow className=\"w-4 h-4 animate-spin\" />\n                            <span>{t('pricing.loading.checkingPayment')}</span>\n                        </div>\n                    ) : (\n                        buttonText\n                    )}\n                </Button>\n            </motion.div>\n        </MotionCard>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/Subscription/PricingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/TopBar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/BrowserControl/EnabledButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assertNever' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { Popover, PopoverContent, PopoverTrigger } from '@onlook/ui/popover';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { assertNever } from '/common/helpers';\n\nconst EnabledButton = observer(({ webviewId }: { webviewId: string }) => {\n    const editorEngine = useEditorEngine();\n    const selected = editorEngine.webviews.isSelected(webviewId);\n    const state = editorEngine.webviews.getState(webviewId);\n\n    // Only show button for error states\n    if (state !== WebviewState.DOM_NO_ONLOOK) {\n        return null;\n    }\n\n    const button = (\n        <Button\n            variant=\"ghost\"\n            className=\"group px-1 text-amber-300 hover:text-amber-100 hover:bg-amber-400/10\"\n            size={'icon'}\n        >\n            <Icons.ExclamationTriangle\n                className={cn('fill-inherit', selected && 'group-hover:text-amber-100')}\n            />\n        </Button>\n    );\n\n    return (\n        <Popover>\n            <PopoverTrigger asChild>{button}</PopoverTrigger>\n            <PopoverContent>\n                <div className=\"space-y-2 flex flex-col w-80 items-center\">\n                    <div className=\"flex gap-2 justify-center\">\n                        <p className=\"text-active text-regularPlus\">\n                            {\"Onlook won't work on this page\"}\n                        </p>\n                        <Icons.CircleBackslash className=\"mt-[3px] text-red-500\" />\n                    </div>\n                    <p className=\"text-foreground-onlook text-small text-left\">\n                        {\n                            \"This url is not linked to Onlook's editor. Please navigate to a url that is linked to Onlook's editor.\"\n                        }\n                    </p>\n                </div>\n            </PopoverContent>\n        </Popover>\n    );\n});\n\nexport default EnabledButton;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/BrowserControl/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":162,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":170,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport { EditorMode } from '@/lib/models';\nimport { DefaultSettings, Theme } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { cn } from '@onlook/ui/utils';\nimport { getValidUrl } from '@onlook/utility';\nimport clsx from 'clsx';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useRef, useState } from 'react';\nimport EnabledButton from './EnabledButton';\n\ninterface BrowserControlsProps {\n    webviewRef: React.RefObject<Electron.WebviewTag> | null;\n    webviewSrc: string;\n    setWebviewSrc: React.Dispatch<React.SetStateAction<string>>;\n    selected: boolean;\n    hovered: boolean;\n    setHovered: React.Dispatch<React.SetStateAction<boolean>>;\n    setDarkmode: React.Dispatch<React.SetStateAction<boolean>>;\n    settings: FrameSettings;\n    startMove: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n    domState: WebviewState;\n    webviewSize: {\n        width: number;\n        height: number;\n    };\n}\n\nconst BrowserControls = observer(\n    ({\n        webviewRef,\n        webviewSrc,\n        setWebviewSrc,\n        selected,\n        hovered,\n        setHovered,\n        setDarkmode,\n        settings,\n        startMove,\n        domState,\n        webviewSize,\n    }: BrowserControlsProps) => {\n        const editorEngine = useEditorEngine();\n        const [urlInputValue, setUrlInputValue] = useState(webviewSrc);\n        const [editingURL, setEditingURL] = useState(false);\n        const [theme, setTheme] = useState(Theme.System);\n        const [state, setState] = useState<WebviewState>(WebviewState.NOT_RUNNING);\n        const [editorMode, setEditorMode] = useState(EditorMode.DESIGN);\n        const inputRef = useRef<HTMLInputElement>(null);\n\n        useEffect(() => {\n            const observer = (state: WebviewState) => {\n                setState(state);\n            };\n\n            editorEngine.webviews.observeState(settings.id, observer);\n\n            return editorEngine.webviews.unobserveState(settings.id, observer);\n        });\n\n        useEffect(() => {\n            const observer = (newSettings: FrameSettings) => {\n                if (newSettings.theme !== theme) {\n                    setTheme(newSettings.theme || DefaultSettings.THEME);\n                }\n            };\n\n            editorEngine.canvas.observeSettings(settings.id, observer);\n\n            return editorEngine.canvas.unobserveSettings(settings.id, observer);\n        }, []);\n\n        useEffect(() => {\n            setEditorMode(editorEngine.mode);\n        }, [editorEngine.mode]);\n\n        useEffect(() => {\n            setUrlInputValue(webviewSrc);\n        }, [webviewSrc]);\n\n        useEffect(() => {\n            if (editingURL) {\n                inputRef.current?.focus();\n            }\n        }, [editingURL]);\n\n        function goForward() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            if (webview.canGoForward()) {\n                webview.goForward();\n            }\n        }\n\n        function reload() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.errors.clear();\n            webview.reload();\n        }\n\n        function goBack() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            if (webview.canGoBack()) {\n                webview.goBack();\n            }\n        }\n\n        function handleKeydown(e: React.KeyboardEvent<HTMLInputElement>) {\n            if (e.key === 'Enter') {\n                e.currentTarget.blur();\n                setEditingURL(false);\n                return;\n            }\n        }\n\n        function handleBlur(e: React.FocusEvent<HTMLInputElement>) {\n            const validUrl = getValidUrl(e.currentTarget.value);\n            setWebviewSrc(validUrl);\n            setEditingURL(false);\n        }\n\n        async function changeTheme(theme: Theme) {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n\n            const themeValue =\n                theme === Theme.System ? 'device' : theme === Theme.Dark ? 'dark' : 'light';\n\n            webview.executeJavaScript(`window.api?.setTheme(\"${themeValue}\")`).then((res) => {\n                setDarkmode(res);\n                setTheme(theme);\n            });\n\n            editorEngine.canvas.saveFrame(settings.id, {\n                theme: theme,\n            });\n        }\n\n        function canGoBack() {\n            try {\n                return webviewRef?.current?.canGoBack();\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function canGoForward() {\n            try {\n                return webviewRef?.current?.canGoForward();\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function getCleanURL(url: string) {\n            try {\n                const urlWithScheme = url.includes('://') ? url : 'http://' + url;\n                const urlObject = new URL(urlWithScheme);\n                const hostname = urlObject.hostname.replace(/^www\\./, '');\n                const port = urlObject.port ? ':' + urlObject.port : '';\n                const path = urlObject.pathname + urlObject.search;\n                return hostname + port + path;\n            } catch (error) {\n                console.error(error);\n                return url;\n            }\n        }\n\n        function handleSelect() {\n            const webview = webviewRef?.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webview);\n            editorEngine.elements.clear();\n        }\n\n        function getSelectedColor() {\n            if (editorEngine.mode === EditorMode.INTERACT) {\n                return 'text-blue-400 fill-blue-400';\n            }\n            if (domState === WebviewState.DOM_ONLOOK_ENABLED) {\n                return 'text-teal-400 fill-teal-400';\n            }\n            if (domState === WebviewState.DOM_NO_ONLOOK) {\n                return 'text-amber-400 fill-amber-400';\n            }\n            if (domState === WebviewState.NOT_RUNNING && editorEngine.mode === EditorMode.DESIGN) {\n                return 'text-foreground-secondary fill-foreground-secondary';\n            }\n            return '';\n        }\n\n        return (\n            <div\n                className={clsx(\n                    'm-auto flex flex-row items-center backdrop-blur-sm overflow-hidden relative shadow-sm rounded-md border-input text-foreground',\n                    selected ? ' bg-active/60 ' : '',\n                    hovered ? ' bg-hover/20 ' : '',\n                    selected\n                        ? getSelectedColor()\n                        : editorMode === EditorMode.INTERACT\n                          ? 'text-foreground-secondary fill-foreground-secondary'\n                          : 'fill-[#f7f7f7]',\n                )}\n                onMouseOver={() => setHovered(true)}\n                onMouseOut={() => setHovered(false)}\n                onClick={handleSelect}\n                style={{\n                    transform: `scale(${1 / editorEngine.canvas.scale})`,\n                    width: `${webviewSize.width * editorEngine.canvas.scale}px`,\n                    marginBottom: `${10 / editorEngine.canvas.scale}px`,\n                }}\n            >\n                {/* Making sure the dropdown arrow is visible */}\n                <div className=\"absolute right-0 bottom-0 top-0 bg-gradient-to-r from-transparent dark:via-background-primary via-background-tertiary dark:to-background-primary to-background-tertiary w-20 z-50\"></div>\n                <div\n                    className={`absolute left-0 flex flex-row z-50`}\n                    style={{\n                        transition: 'opacity 0.5s, transform 0.5s',\n                        transform: editingURL\n                            ? 'translateX(-100%)'\n                            : selected\n                              ? 'translateX(0)'\n                              : 'translateX(-100%)',\n                        opacity: editingURL ? 0 : selected ? 1 : 0,\n                    }}\n                >\n                    <Button\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={goBack}\n                        disabled={!canGoBack()}\n                    >\n                        <Icons.ArrowLeft className=\"text-inherit h-4 w-4 transition-none\" />\n                    </Button>\n\n                    <Button\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={goForward}\n                        style={{\n                            transition: 'display 0.5s',\n                            display: canGoForward() ? 'flex' : 'none',\n                        }}\n                    >\n                        <Icons.ArrowRight className=\"text-inherit h-4 w-4\" />\n                    </Button>\n                    <Button size={'icon'} variant={'ghost'} onClick={reload}>\n                        {webviewRef?.current?.isLoading() ? (\n                            <Icons.CrossL className=\"text-inherit\" />\n                        ) : (\n                            <Icons.Reload className=\"text-inherit h-4 w-4\" />\n                        )}\n                    </Button>\n                </div>\n\n                <div\n                    className={`relative w-full items-center flex flex-row min-h-9 cursor-pointer`}\n                    style={{\n                        transition: 'padding 0.5s',\n                        paddingLeft:\n                            selected && canGoForward()\n                                ? '7.25rem'\n                                : selected && editingURL\n                                  ? '0'\n                                  : selected\n                                    ? '5rem'\n                                    : '0',\n                        paddingRight: editingURL ? '0' : '5.625rem',\n                    }}\n                    onMouseDown={(e) => {\n                        if (e.target instanceof HTMLInputElement) {\n                            return;\n                        }\n                        if (editingURL) {\n                            setEditingURL(false);\n                            const validUrl = getValidUrl(urlInputValue);\n                            setWebviewSrc(validUrl);\n                        }\n                        startMove(e);\n                    }}\n                    onDoubleClick={(e) => {\n                        if (\n                            e.target instanceof HTMLInputElement ||\n                            e.target instanceof HTMLButtonElement ||\n                            (e.target as HTMLElement).closest('button')\n                        ) {\n                            return;\n                        }\n                        setEditingURL(true);\n                    }}\n                >\n                    <Input\n                        ref={inputRef}\n                        className=\"text-small text-foreground-primary bg-background-secondary/60 w-full overflow-hidden text-ellipsis whitespace-nowrap min-w-[20rem] border-none focus:ring-0 focus:border-0 px-0 leading-none py-0 rounded-none\"\n                        value={urlInputValue}\n                        onChange={(e) => setUrlInputValue(e.target.value)}\n                        onKeyDown={handleKeydown}\n                        onBlur={handleBlur}\n                        style={{\n                            transition: 'display 0.5s',\n                            display: editingURL ? 'flex' : 'none',\n                        }}\n                    />\n                    <Button\n                        className=\"absolute right-0.5 px-1 group\"\n                        size={'icon'}\n                        variant={'ghost'}\n                        onClick={() => setEditingURL(false)}\n                        style={{\n                            transition: 'transform 0.5s, visibility 0.5s, opacity 0.5s',\n                            transform: editingURL ? 'translateX(0)' : 'translateX(-5.625rem)',\n                            visibility: editingURL ? 'visible' : 'hidden',\n                            opacity: editingURL ? 1 : 0,\n                        }}\n                    >\n                        <Icons.ArrowRight className=\"text-foreground-secondary group-hover:text-foreground-active h-4 w-4\" />\n                    </Button>\n                    <p\n                        className=\"text-small text-inherit hover:text-opacity-80 transition-colors px-0 h-auto leading-none py-0\"\n                        style={{\n                            transition: 'display 0.5s',\n                            display: editingURL ? 'none' : 'flex',\n                        }}\n                    >\n                        {getCleanURL(urlInputValue)}\n                    </p>\n                </div>\n\n                <div\n                    className=\"absolute right-0 flex flex-row z-50\"\n                    style={{\n                        transition: 'opacity 0.5s, transform 0.5s',\n                        transform: editingURL ? 'translateX(100%)' : 'translateX(0)',\n                        opacity: editingURL ? 0 : 1,\n                    }}\n                >\n                    <EnabledButton webviewId={settings.id} />\n                    <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button\n                                className={cn(\n                                    'group transition-none',\n                                    state === WebviewState.DOM_ONLOOK_ENABLED && selected\n                                        ? 'hover:text-teal-200 hover:bg-teal-400/10'\n                                        : state === WebviewState.DOM_NO_ONLOOK && selected\n                                          ? 'hover:text-amber-200 hover:bg-amber-400/10'\n                                          : '',\n                                )}\n                                size={'icon'}\n                                variant={'ghost'}\n                            >\n                                <Icons.ChevronDown className=\"text-inherit h-4 w-4 rotate-0 group-data-[state=open]:-rotate-180 duration-200 ease-in-out\" />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent className=\"rounded-md bg-background\">\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={() => editorEngine.duplicateWindow(settings.id)}\n                                >\n                                    <span className=\"flex w-full items-center text-smallPlus\">\n                                        <Icons.Copy className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>Duplicate Window</span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={reload}\n                                >\n                                    <span className=\"flex w-full items-center text-smallPlus\">\n                                        <Icons.Reload className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>Refresh Window</span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild className=\"p-0\">\n                                <div className=\"flex flex-row hover:bg-transparent focus:bg-transparent w-full\">\n                                    <Button\n                                        variant={'ghost'}\n                                        className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                        onClick={goBack}\n                                        disabled={!canGoBack()}\n                                    >\n                                        <Icons.ArrowLeft className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />{' '}\n                                        Back\n                                    </Button>\n                                    <Button\n                                        variant={'ghost'}\n                                        className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                        onClick={goForward}\n                                        disabled={!canGoForward()}\n                                    >\n                                        <span className=\"flex w-full items-center text-smallPlus\">\n                                            <span>Next</span>\n                                            <Icons.ArrowRight className=\"ml-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        </span>\n                                    </Button>\n                                </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild className=\"p-0\">\n                                <div className=\"flex flex-row hover:bg-transparent focus:bg-transparent w-full\">\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.System ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.System)}\n                                    >\n                                        <Icons.Laptop\n                                            className={`${theme === Theme.System ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.Dark ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.Dark)}\n                                    >\n                                        <Icons.Moon\n                                            className={`${theme === Theme.Dark ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                    <Button\n                                        size={'icon'}\n                                        variant={'ghost'}\n                                        className={`hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group ${theme === Theme.Light ? 'bg-background-tertiary' : ''}`}\n                                        onClick={() => changeTheme(Theme.Light)}\n                                    >\n                                        <Icons.Sun\n                                            className={`${theme === Theme.Light ? 'text-foreground-active' : 'text-foreground-secondary'} group-hover:text-foreground-active`}\n                                        />\n                                    </Button>\n                                </div>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem asChild>\n                                <Button\n                                    variant={'ghost'}\n                                    className=\"hover:bg-background-secondary focus:bg-background-secondary w-full rounded-sm group\"\n                                    onClick={() => editorEngine.deleteWindow(settings.id)}\n                                    disabled={!editorEngine.canDeleteWindow()}\n                                >\n                                    <span className=\"flex w-full items-center\">\n                                        <Icons.Trash className=\"mr-2 h-4 w-4 text-foreground-secondary group-hover:text-foreground-active\" />\n                                        <span>\n                                            {editorEngine.canDeleteWindow()\n                                                ? 'Delete Window'\n                                                : \"Can't delete this!\"}\n                                        </span>\n                                    </span>\n                                </Button>\n                            </DropdownMenuItem>\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default BrowserControls;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/Frame.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'darkmode' is assigned a value but never used.","line":39,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deregisterWebview' is defined but never used.","line":223,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine, useProjectsManager } from '@/components/Context';\nimport { WebviewState } from '@/lib/editor/engine/webview';\nimport type { WebviewMessageBridge } from '@/lib/editor/messageBridge';\nimport { EditorMode } from '@/lib/models';\nimport type { SizePreset } from '@/lib/sizePresets';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport type { FrameSettings } from '@onlook/models/projects';\nimport { RunState } from '@onlook/models/run';\nimport { Button } from '@onlook/ui/button';\nimport { Icons } from '@onlook/ui/icons';\nimport { ShineBorder } from '@onlook/ui/shine-border';\nimport { cn } from '@onlook/ui/utils';\nimport { motion } from 'framer-motion';\nimport debounce from 'lodash/debounce';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo, useRef, useState, type MouseEvent } from 'react';\nimport BrowserControls from './BrowserControl';\nimport GestureScreen from './GestureScreen';\nimport ResizeHandles from './ResizeHandles';\n\nconst Frame = observer(\n    ({\n        messageBridge,\n        settings,\n    }: {\n        messageBridge: WebviewMessageBridge;\n        settings: FrameSettings;\n    }) => {\n        const RETRY_TIMEOUT = 3000;\n        const DOM_FAILED_DELAY = 3000;\n        const editorEngine = useEditorEngine();\n        const projectsManager = useProjectsManager();\n        const webviewRef = useRef<Electron.WebviewTag | null>(null);\n        let domState = editorEngine.webviews.getState(settings.id);\n        const [selected, setSelected] = useState<boolean>(\n            editorEngine.webviews.isSelected(settings.id),\n        );\n        const [hovered, setHovered] = useState<boolean>(false);\n        const [darkmode, setDarkmode] = useState<boolean>(false);\n        const [domReady, setDomReady] = useState(false);\n        const [domFailed, setDomFailed] = useState(false);\n        const [shouldShowDomFailed, setShouldShowDomFailed] = useState(false);\n        const [selectedPreset, setSelectedPreset] = useState<SizePreset | null>(null);\n        const [lockedPreset, setLockedPreset] = useState<SizePreset | null>(null);\n\n        const [webviewSize, setWebviewSize] = useState(settings.dimension);\n        const [webviewSrc, setWebviewSrc] = useState<string>(settings.url);\n        const [webviewPosition, setWebviewPosition] = useState(settings.position);\n        const [isResizing, setIsResizing] = useState<boolean>(false);\n        const [aspectRatioLocked, setAspectRatioLocked] = useState(\n            settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n        );\n\n        const clampedDimensions = useMemo(\n            () => ({\n                width: Math.max(webviewSize.width, parseInt(DefaultSettings.MIN_DIMENSIONS.width)),\n                height: Math.max(\n                    webviewSize.height,\n                    parseInt(DefaultSettings.MIN_DIMENSIONS.height),\n                ),\n            }),\n            [webviewSize],\n        );\n\n        const debouncedSaveFrame = useCallback(\n            debounce((id: string, frameData: Partial<FrameSettings>) => {\n                editorEngine.canvas.saveFrame(id, frameData);\n            }, 100),\n            [editorEngine.canvas],\n        );\n\n        const handleUrlChange = useCallback(\n            (e: any) => {\n                setWebviewSrc(e.url);\n\n                editorEngine.pages.handleWebviewUrlChange(settings.id);\n            },\n            [editorEngine.pages, settings.id],\n        );\n\n        const handleDomReady = useCallback(async () => {\n            const webview = webviewRef.current;\n            if (!webview) {\n                return;\n            }\n            await webview.executeJavaScript(`window.api?.setWebviewId('${webview.id}')`);\n            setDomReady(true);\n            webview.setZoomLevel(0);\n\n            const body = await editorEngine.ast.getBodyFromWebview(webview);\n\n            setDomFailed(body.children.length === 0);\n\n            const state = editorEngine.webviews.computeState(body);\n            editorEngine.webviews.setState(webview, state);\n\n            if (state === WebviewState.DOM_ONLOOK_ENABLED) {\n                setTimeout(() => {\n                    selectFirstElement(webview);\n                    editorEngine.takeActiveWebviewScreenshot(settings.id, {\n                        save: true,\n                    });\n                }, 1000);\n            }\n\n            setTimeout(() => {\n                getDarkMode(webview);\n            }, 100);\n            webview.executeJavaScript(`window.api?.processDom()`);\n        }, [editorEngine.ast, editorEngine.webviews]);\n\n        useEffect(() => {\n            const observer = (newSettings: FrameSettings) => {\n                const newDimensions = {\n                    width: newSettings.dimension.width,\n                    height: newSettings.dimension.height,\n                };\n                if (newSettings.aspectRatioLocked !== aspectRatioLocked) {\n                    setAspectRatioLocked(\n                        newSettings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED,\n                    );\n                }\n                if (\n                    newSettings.dimension.width !== webviewSize.width ||\n                    newSettings.dimension.height !== webviewSize.height\n                ) {\n                    setWebviewSize(newDimensions);\n                }\n            };\n\n            editorEngine.canvas.observeSettings(settings.id, observer);\n\n            return editorEngine.canvas.unobserveSettings(settings.id, observer);\n        }, []);\n\n        useEffect(setupFrame, [webviewRef]);\n        useEffect(\n            () => setSelected(editorEngine.webviews.isSelected(settings.id)),\n            [editorEngine.webviews.webviews],\n        );\n\n        useEffect(() => {\n            if (projectsManager.runner?.state === RunState.STOPPING) {\n                const refresh = () => {\n                    const webview = webviewRef.current as Electron.WebviewTag | null;\n                    if (webview) {\n                        try {\n                            webview.reload();\n                        } catch (error) {\n                            console.error('Failed to reload webview', error);\n                        }\n                    }\n                };\n                setTimeout(refresh, RETRY_TIMEOUT);\n                setTimeout(refresh, 500);\n            }\n        }, [projectsManager.runner?.state]);\n\n        useEffect(() => {\n            if (\n                settings.dimension.width !== webviewSize.width ||\n                settings.dimension.height !== webviewSize.height ||\n                settings.position.x !== webviewPosition.x ||\n                settings.position.y !== webviewPosition.y ||\n                settings.url !== webviewSrc\n            ) {\n                debouncedSaveFrame(settings.id, {\n                    url: webviewSrc,\n                    dimension: webviewSize,\n                    position: webviewPosition,\n                });\n            }\n        }, [webviewSize, webviewSrc, webviewPosition]);\n\n        useEffect(() => {\n            let timer: Timer;\n\n            if (domFailed) {\n                timer = setTimeout(() => {\n                    setShouldShowDomFailed(true);\n                }, DOM_FAILED_DELAY);\n            } else {\n                setShouldShowDomFailed(false);\n            }\n\n            return () => {\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            };\n        }, [domFailed]);\n\n        useEffect(() => {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n\n            setWebviewSize(settings.dimension);\n            setWebviewPosition(settings.position);\n            setWebviewSrc(settings.url);\n            setAspectRatioLocked(settings.aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED);\n            if (webview) {\n                webview.id = settings.id;\n                setupFrame();\n                domState = editorEngine.webviews.getState(settings.id);\n            }\n        }, [settings.id]);\n\n        function setupFrame() {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.register(webview);\n            messageBridge.register(webview, settings.id);\n            setBrowserEventListeners(webview);\n\n            return () => {\n                editorEngine.webviews.deregister(webview);\n                messageBridge.deregister(webview);\n                webview.removeEventListener('did-navigate', handleUrlChange);\n            };\n        }\n\n        function deregisterWebview() {\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.deregister(webview);\n            messageBridge.deregister(webview);\n            webview.removeEventListener('did-navigate', handleUrlChange);\n        }\n\n        function setBrowserEventListeners(webview: Electron.WebviewTag) {\n            webview.addEventListener('did-navigate', handleUrlChange);\n            webview.addEventListener('did-navigate-in-page', handleUrlChange);\n            webview.addEventListener('dom-ready', handleDomReady);\n            webview.addEventListener('did-fail-load', handleDomFailed);\n            webview.addEventListener('focus', handleWebviewFocus);\n            webview.addEventListener('console-message', handleConsoleMessage);\n        }\n\n        async function getDarkMode(webview: Electron.WebviewTag) {\n            const darkmode = (await webview.executeJavaScript(`window.api?.getTheme()`)) || 'light';\n            setDarkmode(darkmode === 'dark');\n        }\n\n        function handleDomFailed() {\n            setDomFailed(true);\n            const webview = webviewRef.current as Electron.WebviewTag | null;\n            if (!webview) {\n                return;\n            }\n            editorEngine.webviews.setState(webview, WebviewState.RUNNING_NO_DOM);\n\n            setTimeout(() => {\n                if (webview) {\n                    try {\n                        webview.reload();\n                    } catch (error) {\n                        console.error('Failed to reload webview', error);\n                    }\n                }\n            }, RETRY_TIMEOUT);\n        }\n\n        function handleWebviewFocus() {\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webviewRef.current as Electron.WebviewTag);\n        }\n\n        function handleConsoleMessage(event: Electron.ConsoleMessageEvent) {\n            if (event.sourceId === 'chrome-error://chromewebdata/') {\n                // This is a chrome error from renderer, we don't want to show it\n                return;\n            }\n            if (event.level === 3) {\n                editorEngine.errors.addError(settings.id, event);\n            }\n        }\n\n        function startMove(e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            editorEngine.overlay.clear();\n\n            const startX = e.clientX;\n            const startY = e.clientY;\n\n            const move: any = (e: MouseEvent) => {\n                const scale = editorEngine.canvas.scale;\n                const deltaX = (e.clientX - startX) / scale;\n                const deltaY = (e.clientY - startY) / scale;\n\n                setWebviewPosition({\n                    x: webviewPosition.x + deltaX,\n                    y: webviewPosition.y + deltaY,\n                });\n            };\n\n            const stopMove = (e: any) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                window.removeEventListener('mousemove', move);\n                window.removeEventListener('mouseup', stopMove);\n            };\n\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', stopMove);\n        }\n\n        function getSelectedOutlineColor() {\n            if (editorEngine.mode === EditorMode.INTERACT) {\n                return 'outline-blue-400';\n            }\n            if (domState === WebviewState.DOM_ONLOOK_ENABLED) {\n                return 'outline-teal-400';\n            }\n            if (domState === WebviewState.DOM_NO_ONLOOK) {\n                return 'outline-amber-400';\n            }\n            if (domState === WebviewState.NOT_RUNNING && editorEngine.mode === EditorMode.DESIGN) {\n                return 'outline-foreground-secondary';\n            }\n            return 'outline-transparent';\n        }\n\n        function renderNotRunning() {\n            return (\n                <>\n                    {projectsManager.runner?.state === RunState.RUNNING ? (\n                        <ShineBorder\n                            className=\"w-full absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-t from-gray-800/40 via-gray-500/40 to-gray-400/40 border-gray-500 border-[0.5px] space-y-10 rounded-xl\"\n                            color={[\n                                'var(--color-teal-300)',\n                                'var(--color-blue-400)',\n                                'var(--color-purple-200)',\n                            ]}\n                            autoShine={true}\n                        >\n                            <motion.p\n                                className=\"text-active text-title1 text-center text-balance pb-24\"\n                                initial={{ opacity: 0, y: 10 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                transition={{ duration: 0.5, delay: 0.2 }}\n                            >\n                                {'Waiting for the App to start...'}\n                            </motion.p>\n                        </ShineBorder>\n                    ) : (\n                        <div className=\"w-full absolute inset-0 flex flex-col items-center justify-center bg-gradient-to-t from-gray-800/40 via-gray-500/40 to-gray-400/40 border-gray-500 border-[0.5px] space-y-10 rounded-xl\">\n                            <p className=\"text-active text-title1 text-center text-balance\">\n                                {'Press '}\n                                <span className=\"text-teal-600 dark:text-teal-300\">Play</span>\n                                {' to start designing your App'}\n                            </p>\n                            <Button\n                                className={cn(\n                                    'h-14 overflow-hidden',\n                                    'text-teal-700 dark:text-teal-100 relative border-teal-700 dark:border-teal-400 hover:border-teal-500 dark:hover:border-teal-200 hover:shadow-xl shadow-2xl shadow-teal-700/50 dark:shadow-teal-400/50 hover:shadow-teal-500/50 dark:hover:shadow-teal-200/50 transition-all duration-300',\n                                    'before:absolute before:inset-0 before:bg-[radial-gradient(169.40%_89.55%_at_94.76%_6.29%,theme(colors.teal.200/80)_0%,theme(colors.teal.300/80)_100%)] dark:before:bg-[radial-gradient(169.40%_89.55%_at_94.76%_6.29%,theme(colors.teal.800/80)_0%,theme(colors.teal.500/80)_100%)]',\n                                    'after:absolute after:inset-0 after:bg-[radial-gradient(169.40%_89.55%_at_90%_10%,theme(colors.teal.300/50)_0%,theme(colors.teal.200/50)_100%)] dark:after:bg-[radial-gradient(169.40%_89.55%_at_90%_10%,theme(colors.teal.500/50)_0%,theme(colors.teal.400/50)_100%)]',\n                                    'after:opacity-0 hover:after:opacity-100',\n                                    'before:transition-all after:transition-all before:duration-300 after:duration-300',\n                                    'before:z-0 after:z-0',\n                                )}\n                                onClick={() => {\n                                    projectsManager.runner?.start();\n                                }}\n                            >\n                                <span className=\"relative z-10 flex items-center gap-x-1.5 px-3 py-2.5\">\n                                    <Icons.Play className=\"w-8 h-8\" />\n                                    <span className=\"text-title3\">Play</span>\n                                </span>\n                            </Button>\n                        </div>\n                    )}\n                </>\n            );\n        }\n\n        async function selectFirstElement(webview: Electron.WebviewTag) {\n            const domEl = await webview.executeJavaScript(`window.api?.getFirstOnlookElement()`);\n            if (domEl) {\n                editorEngine.elements.click([domEl], webview);\n            }\n        }\n\n        return (\n            <div\n                className=\"flex flex-col fixed\"\n                style={{ transform: `translate(${webviewPosition.x}px, ${webviewPosition.y}px)` }}\n            >\n                <BrowserControls\n                    webviewRef={domReady ? webviewRef : null}\n                    webviewSrc={webviewSrc}\n                    setWebviewSrc={setWebviewSrc}\n                    selected={selected}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setDarkmode={setDarkmode}\n                    settings={settings}\n                    startMove={startMove}\n                    domState={domState}\n                    webviewSize={webviewSize}\n                />\n                <div className=\"relative\">\n                    <ResizeHandles\n                        webviewRef={webviewRef}\n                        webviewSize={webviewSize}\n                        setWebviewSize={setWebviewSize}\n                        selectedPreset={selectedPreset}\n                        setSelectedPreset={setSelectedPreset}\n                        lockedPreset={lockedPreset}\n                        setLockedPreset={setLockedPreset}\n                        setIsResizing={setIsResizing}\n                        aspectRatioLocked={aspectRatioLocked || DefaultSettings.ASPECT_RATIO_LOCKED}\n                        webviewId={settings.id}\n                    />\n                    <webview\n                        id={settings.id}\n                        ref={webviewRef}\n                        className={cn(\n                            'w-[96rem] h-[60rem] backdrop-blur-sm transition outline outline-4',\n                            shouldShowDomFailed ? 'bg-transparent' : 'bg-white',\n                            selected ? getSelectedOutlineColor() : 'outline-transparent',\n                        )}\n                        src={settings.url}\n                        preload={`file://${window.env.WEBVIEW_PRELOAD_PATH}`}\n                        allowpopups={'true' as any}\n                        style={{\n                            width: clampedDimensions.width,\n                            height: clampedDimensions.height,\n                        }}\n                    ></webview>\n                    <GestureScreen\n                        isResizing={isResizing}\n                        webviewRef={webviewRef}\n                        setHovered={setHovered}\n                    />\n                    {domFailed && shouldShowDomFailed && renderNotRunning()}\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default Frame;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/GestureScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropElementProperties' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":111,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { getRelativeMousePositionToWebview } from '@/lib/editor/engine/overlay/utils';\nimport { EditorMode } from '@/lib/models';\nimport { MouseAction } from '@onlook/models/editor';\nimport type { DomElement, DropElementProperties, ElementPosition } from '@onlook/models/element';\nimport { cn } from '@onlook/ui/utils';\nimport throttle from 'lodash/throttle';\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport RightClickMenu from '../RightClickMenu';\n\ninterface GestureScreenProps {\n    webviewRef: React.RefObject<Electron.WebviewTag>;\n    setHovered: React.Dispatch<React.SetStateAction<boolean>>;\n    isResizing: boolean;\n}\n\nconst GestureScreen = observer(({ webviewRef, setHovered, isResizing }: GestureScreenProps) => {\n    const editorEngine = useEditorEngine();\n\n    const getWebview = useCallback((): Electron.WebviewTag => {\n        const webview = webviewRef.current as Electron.WebviewTag | null;\n        if (!webview) {\n            throw Error('No webview found');\n        }\n        return webview;\n    }, [webviewRef]);\n\n    const getRelativeMousePosition = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>): ElementPosition => {\n            const webview = getWebview();\n            return getRelativeMousePositionToWebview(e, webview);\n        },\n        [getWebview],\n    );\n\n    const handleMouseEvent = useCallback(\n        async (e: React.MouseEvent<HTMLDivElement>, action: MouseAction) => {\n            const webview = getWebview();\n            const pos = getRelativeMousePosition(e);\n            const el: DomElement = await webview.executeJavaScript(\n                `window.api?.getElementAtLoc(${pos.x}, ${pos.y}, ${action === MouseAction.MOUSE_DOWN || action === MouseAction.DOUBLE_CLICK})`,\n            );\n            if (!el) {\n                return;\n            }\n\n            switch (action) {\n                case MouseAction.MOVE:\n                    editorEngine.elements.mouseover(el, webview);\n                    if (e.altKey) {\n                        editorEngine.elements.showMeasurement();\n                    } else {\n                        editorEngine.overlay.removeMeasurement();\n                    }\n                    break;\n                case MouseAction.MOUSE_DOWN:\n                    if (el.tagName.toLocaleLowerCase() === 'body') {\n                        editorEngine.webviews.select(webview);\n                        return;\n                    }\n                    // Ignore right-clicks\n                    if (e.button == 2) {\n                        break;\n                    }\n                    if (editorEngine.text.isEditing) {\n                        editorEngine.text.end();\n                    }\n                    if (e.shiftKey) {\n                        editorEngine.elements.shiftClick(el, webview);\n                    } else {\n                        editorEngine.move.start(el, pos, webview);\n                        editorEngine.elements.click([el], webview);\n                    }\n                    break;\n                case MouseAction.DOUBLE_CLICK:\n                    editorEngine.text.start(el, webview);\n                    break;\n            }\n        },\n        [getWebview, getRelativeMousePosition, editorEngine],\n    );\n\n    const throttledMouseMove = useMemo(\n        () =>\n            throttle((e: React.MouseEvent<HTMLDivElement>) => {\n                if (editorEngine.move.isDragging) {\n                    editorEngine.move.drag(e, getRelativeMousePosition);\n                } else if (\n                    editorEngine.mode === EditorMode.DESIGN ||\n                    ((editorEngine.mode === EditorMode.INSERT_DIV ||\n                        editorEngine.mode === EditorMode.INSERT_TEXT ||\n                        editorEngine.mode === EditorMode.INSERT_IMAGE) &&\n                        !editorEngine.insert.isDrawing)\n                ) {\n                    handleMouseEvent(e, MouseAction.MOVE);\n                } else if (editorEngine.insert.isDrawing) {\n                    editorEngine.insert.draw(e);\n                }\n            }, 16),\n        [editorEngine, getRelativeMousePosition, handleMouseEvent],\n    );\n\n    useEffect(() => {\n        return () => {\n            throttledMouseMove.cancel();\n        };\n    }, [throttledMouseMove]);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const webview = getWebview();\n            editorEngine.webviews.deselectAll();\n            editorEngine.webviews.select(webview);\n        },\n        [getWebview, editorEngine.webviews],\n    );\n\n    function handleDoubleClick(e: React.MouseEvent<HTMLDivElement>) {\n        if (editorEngine.mode !== EditorMode.DESIGN) {\n            return;\n        }\n        handleMouseEvent(e, MouseAction.DOUBLE_CLICK);\n    }\n\n    function handleMouseDown(e: React.MouseEvent<HTMLDivElement>) {\n        if (editorEngine.mode === EditorMode.DESIGN) {\n            handleMouseEvent(e, MouseAction.MOUSE_DOWN);\n        } else if (\n            editorEngine.mode === EditorMode.INSERT_DIV ||\n            editorEngine.mode === EditorMode.INSERT_TEXT ||\n            editorEngine.mode === EditorMode.INSERT_IMAGE\n        ) {\n            editorEngine.insert.start(e);\n        }\n    }\n\n    async function handleMouseUp(e: React.MouseEvent<HTMLDivElement>) {\n        editorEngine.insert.end(e, webviewRef.current);\n        editorEngine.move.end(e);\n    }\n\n    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        handleMouseEvent(e, MouseAction.MOVE);\n    };\n\n    const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        try {\n            const propertiesData = e.dataTransfer.getData('application/json');\n            if (!propertiesData) {\n                console.error('No element properties in drag data');\n                return;\n            }\n\n            const properties = JSON.parse(propertiesData);\n\n            if (properties.type === 'image') {\n                const webview = getWebview();\n                const dropPosition = getRelativeMousePosition(e);\n                await editorEngine.insert.insertDroppedImage(webview, dropPosition, properties);\n            } else {\n                const webview = getWebview();\n                const dropPosition = getRelativeMousePosition(e);\n                await editorEngine.insert.insertDroppedElement(webview, dropPosition, properties);\n            }\n\n            editorEngine.mode = EditorMode.DESIGN;\n        } catch (error) {\n            console.error('drop operation failed:', error);\n        }\n    };\n\n    const gestureScreenClassName = useMemo(() => {\n        return cn(\n            'absolute inset-0 bg-transparent',\n            editorEngine.mode === EditorMode.INTERACT && !isResizing ? 'hidden' : 'visible',\n            editorEngine.mode === EditorMode.INSERT_DIV && 'cursor-crosshair',\n            editorEngine.mode === EditorMode.INSERT_TEXT && 'cursor-text',\n        );\n    }, [editorEngine.mode, isResizing]);\n\n    return (\n        <RightClickMenu>\n            <div\n                className={gestureScreenClassName}\n                onClick={handleClick}\n                onMouseOver={() => setHovered(true)}\n                onMouseOut={useCallback(() => {\n                    setHovered(false);\n                    editorEngine.elements.clearHoveredElement();\n                    editorEngine.overlay.state.updateHoverRect(null);\n                }, [editorEngine, setHovered])}\n                onMouseLeave={handleMouseUp}\n                onMouseMove={throttledMouseMove}\n                onMouseDown={handleMouseDown}\n                onMouseUp={handleMouseUp}\n                onDoubleClick={handleDoubleClick}\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n            ></div>\n        </RightClickMenu>\n    );\n});\n\nexport default GestureScreen;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/ResizeHandles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webviewRef' is defined but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webviewId' is defined but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEditorEngine } from '@/components/Context';\nimport { EditorMode } from '@/lib/models';\nimport type { SizePreset } from '@/lib/sizePresets';\nimport { DefaultSettings } from '@onlook/models/constants';\nimport { ToastAction } from '@onlook/ui/toast';\nimport { useToast } from '@onlook/ui/use-toast';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\nimport { type MouseEvent, useRef } from 'react';\n\ninterface ResizeHandleProps {\n    webviewRef: React.RefObject<Electron.WebviewTag>;\n    webviewSize: { width: number; height: number };\n    setWebviewSize: React.Dispatch<React.SetStateAction<{ width: number; height: number }>>;\n    selectedPreset: SizePreset | null;\n    setSelectedPreset: React.Dispatch<React.SetStateAction<SizePreset | null>>;\n    lockedPreset: SizePreset | null;\n    setLockedPreset: React.Dispatch<React.SetStateAction<SizePreset | null>>;\n    setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;\n    aspectRatioLocked: boolean;\n    webviewId: string;\n}\n\nenum HandleType {\n    Right = 'right',\n    Bottom = 'bottom',\n}\n\nconst ResizeHandles = observer(\n    ({\n        webviewRef,\n        webviewSize,\n        setWebviewSize,\n        setSelectedPreset,\n        lockedPreset,\n        setLockedPreset,\n        setIsResizing,\n        aspectRatioLocked,\n        webviewId,\n    }: ResizeHandleProps) => {\n        const editorEngine = useEditorEngine();\n        const resizeHandleRef = useRef(null);\n        const { toast } = useToast();\n\n        const startResize = (\n            e: MouseEvent<HTMLDivElement, globalThis.MouseEvent>,\n            types: HandleType[],\n        ) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            setIsResizing(true);\n\n            const startX = e.clientX;\n            const startY = e.clientY;\n            const startWidth = webviewSize.width;\n            const startHeight = webviewSize.height;\n            const aspectRatio = startWidth / startHeight;\n\n            const resize: any = (e: MouseEvent) => {\n                const scale = editorEngine.canvas.scale;\n                let heightDelta = types.includes(HandleType.Bottom)\n                    ? (e.clientY - startY) / scale\n                    : 0;\n                let widthDelta = types.includes(HandleType.Right)\n                    ? (e.clientX - startX) / scale\n                    : 0;\n\n                let currentWidth = startWidth + widthDelta;\n                let currentHeight = startHeight + heightDelta;\n\n                if (aspectRatioLocked) {\n                    if (types.includes(HandleType.Right) && !types.includes(HandleType.Bottom)) {\n                        heightDelta = widthDelta / aspectRatio;\n                    } else if (\n                        !types.includes(HandleType.Right) &&\n                        types.includes(HandleType.Bottom)\n                    ) {\n                        widthDelta = heightDelta * aspectRatio;\n                    } else {\n                        if (Math.abs(widthDelta) > Math.abs(heightDelta)) {\n                            heightDelta = widthDelta / aspectRatio;\n                        } else {\n                            widthDelta = heightDelta * aspectRatio;\n                        }\n                    }\n\n                    currentWidth = startWidth + widthDelta;\n                    currentHeight = startHeight + heightDelta;\n\n                    if (currentWidth < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                        currentWidth = parseInt(DefaultSettings.MIN_DIMENSIONS.width);\n                        currentHeight = currentWidth / aspectRatio;\n                    }\n                    if (currentHeight < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                        currentHeight = parseInt(DefaultSettings.MIN_DIMENSIONS.height);\n                        currentWidth = currentHeight * aspectRatio;\n                    }\n                } else {\n                    if (currentWidth < parseInt(DefaultSettings.MIN_DIMENSIONS.width)) {\n                        currentWidth = parseInt(DefaultSettings.MIN_DIMENSIONS.width);\n                    }\n                    if (currentHeight < parseInt(DefaultSettings.MIN_DIMENSIONS.height)) {\n                        currentHeight = parseInt(DefaultSettings.MIN_DIMENSIONS.height);\n                    }\n                }\n\n                setWebviewSize({\n                    width: Math.floor(currentWidth),\n                    height: Math.floor(currentHeight),\n                });\n\n                setSelectedPreset(null);\n            };\n\n            const stopResize = (e: any) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                setIsResizing(false);\n\n                window.removeEventListener('mousemove', resize);\n                window.removeEventListener('mouseup', stopResize);\n            };\n\n            window.addEventListener('mousemove', resize);\n            window.addEventListener('mouseup', stopResize);\n        };\n\n        const handleLockedResize = () => {\n            const unlockPresetToast = () => {\n                setLockedPreset(null);\n            };\n\n            toast({\n                title: 'Preset dimensions locked.',\n                description: 'Unlock to resize.',\n                action: (\n                    <ToastAction altText=\"Unlock\" onClick={unlockPresetToast}>\n                        Unlock\n                    </ToastAction>\n                ),\n            });\n        };\n\n        return (\n            <div\n                className={cn(\n                    'absolute inset-0 opacity-40 transition min-w-0',\n                    editorEngine.mode === EditorMode.INTERACT ? 'visible' : 'visible',\n                    { 'hover:opacity-60': !lockedPreset },\n                )}\n            >\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -bottom-10 w-full h-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-s-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset ? handleLockedResize() : startResize(e, [HandleType.Bottom])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-48 h-1\"></div>\n                </div>\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -right-10 h-full w-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-e-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset ? handleLockedResize() : startResize(e, [HandleType.Right])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-1 h-48\"></div>\n                </div>\n                <div\n                    ref={resizeHandleRef}\n                    className={cn(\n                        'flex items-center justify-center absolute -bottom-10 -right-10 w-10 h-10',\n                        lockedPreset ? 'cursor-not-allowed' : 'cursor-se-resize',\n                    )}\n                    onMouseDown={(e) =>\n                        lockedPreset\n                            ? handleLockedResize()\n                            : startResize(e, [HandleType.Right, HandleType.Bottom])\n                    }\n                >\n                    <div className=\"rounded bg-foreground-primary/80 w-2 h-2\"></div>\n                </div>\n            </div>\n        );\n    },\n);\n\nexport default ResizeHandles;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/WebviewArea/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/editor/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Name.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MainChannels' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'invokeMainChannel' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle,\n} from '@onlook/ui/card';\nimport { Input } from '@onlook/ui/input';\nimport { Label } from '@onlook/ui/label';\nimport type { StepProps } from '..';\nimport { getRandomPlaceholder } from '../../../helpers';\nimport { invokeMainChannel } from '@/lib/utils';\n\nexport const LoadNameProject = ({\n    props: { projectData, currentStep, setProjectData, totalSteps, prevStep, nextStep },\n}: {\n    props: StepProps;\n}) => {\n    function setProjectName(name: string) {\n        setProjectData({\n            ...projectData,\n            name,\n        });\n    }\n\n    function goBack() {\n        prevStep();\n    }\n\n    return (\n        <Card className=\"w-[30rem]\">\n            <CardHeader>\n                <CardTitle>{'Letâ€™s name your project'}</CardTitle>\n                <CardDescription>\n                    {\n                        \"This is your Onlook project name. Don't worry, This will not rename your actual folder.\"\n                    }\n                </CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-24 flex items-center w-full\">\n                <div className=\"flex flex-col w-full gap-2\">\n                    <Label htmlFor=\"text\">Project Name</Label>\n                    <Input\n                        type=\"text\"\n                        placeholder={getRandomPlaceholder()}\n                        value={projectData.name || ''}\n                        onInput={(e) => setProjectName(e.currentTarget.value)}\n                    />\n                </div>\n            </CardContent>\n            <CardFooter className=\"text-sm\">\n                <p className=\"text-foreground-onlook\">{`${currentStep + 1} of ${totalSteps}`}</p>\n                <div className=\"flex ml-auto gap-2\">\n                    <Button type=\"button\" onClick={goBack} variant=\"ghost\">\n                        Back\n                    </Button>\n                    <Button\n                        disabled={!projectData.name || projectData.name.length === 0}\n                        type=\"button\"\n                        onClick={nextStep}\n                        variant=\"outline\"\n                    >\n                        Next\n                    </Button>\n                </div>\n            </CardFooter>\n        </Card>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/SelectFolder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/SetUrl.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":76,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { invokeMainChannel } from '@/lib/utils';\nimport { DefaultSettings, MainChannels } from '@onlook/models/constants';\nimport { Button } from '@onlook/ui/button';\nimport { CardDescription, CardTitle } from '@onlook/ui/card';\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@onlook/ui/collapsible';\nimport { Icons } from '@onlook/ui/icons';\nimport { Input } from '@onlook/ui/input';\nimport { Label } from '@onlook/ui/label';\nimport { cn } from '@onlook/ui/utils';\nimport type React from 'react';\nimport { useState } from 'react';\nimport type { StepComponent } from '../withStepProps';\n\nconst LoadSetUrl: StepComponent = ({ props, variant }) => {\n    const { projectData, setProjectData, prevStep, nextStep } = props;\n    const [projectUrl, setProjectUrl] = useState<string>(projectData.url || '');\n    const [runCommand, setRunCommand] = useState<string>(projectData.commands?.run || '');\n    const [buildCommand, setBuildCommand] = useState<string>(projectData.commands?.build || '');\n    const [installCommand, setInstallCommand] = useState<string>(\n        projectData.commands?.install || '',\n    );\n    const [error, setError] = useState<string | null>(null);\n    const [isOpen, setIsOpen] = useState(false);\n\n    function handleUrlInput(e: React.FormEvent<HTMLInputElement>) {\n        setProjectUrl(e.currentTarget.value);\n        if (!validateUrl(e.currentTarget.value)) {\n            setError('Please use a valid URL');\n            return;\n        } else {\n            setError(null);\n        }\n        setProjectData({\n            ...projectData,\n            url: e.currentTarget.value,\n        });\n    }\n\n    function handleInstallCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setInstallCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                install: e.currentTarget.value,\n            },\n        });\n    }\n\n    function handleRunCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setRunCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                run: e.currentTarget.value,\n            },\n        });\n    }\n\n    function handleBuildCommandInput(e: React.FormEvent<HTMLInputElement>) {\n        setBuildCommand(e.currentTarget.value);\n        setProjectData({\n            ...projectData,\n            commands: {\n                ...projectData.commands,\n                build: e.currentTarget.value,\n            },\n        });\n    }\n\n    function validateUrl(url: string): boolean {\n        try {\n            const parsedUrl = new URL(url);\n            return ['http:', 'https:'].includes(parsedUrl.protocol);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    function goBack() {\n        prevStep();\n    }\n\n    function handleNext() {\n        if (!projectData.folderPath) {\n            setError('No project folder path found');\n            return;\n        }\n\n        const updatedInstallCommand = projectData.commands?.install || installCommand;\n\n        if (!updatedInstallCommand) {\n            setError('Please enter a valid install command');\n            return;\n        }\n\n        invokeMainChannel(MainChannels.INSTALL_PROJECT_DEPENDENCIES, {\n            folderPath: projectData.folderPath,\n            installCommand: updatedInstallCommand,\n        });\n        nextStep();\n    }\n\n    const renderHeader = () => (\n        <>\n            <CardTitle>{'Configure your project (optional)'}</CardTitle>\n            <CardDescription>\n                {'Update your project URL and commands or keep the defaults.'}\n            </CardDescription>\n        </>\n    );\n\n    const renderContent = () => (\n        <div className=\"flex flex-col w-full gap-6\">\n            <div className=\"space-y-2\">\n                <Label htmlFor=\"projectUrl\">Local URL</Label>\n                <Input\n                    id=\"projectUrl\"\n                    className=\"bg-secondary\"\n                    value={projectUrl}\n                    type=\"text\"\n                    placeholder=\"http://localhost:3000\"\n                    onInput={handleUrlInput}\n                />\n            </div>\n\n            <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n                <CollapsibleTrigger className=\"flex items-center gap-2 text-sm font-medium\">\n                    <Icons.ChevronDown\n                        className={cn(\n                            'h-4 w-4 transition-transform duration-200',\n                            isOpen ? '' : '-rotate-90',\n                        )}\n                    />\n                    Project Commands\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"pt-4\">\n                    <div className=\"space-y-3\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"installCommand\">Install</Label>\n                            <Input\n                                id=\"installCommand\"\n                                className=\"bg-secondary\"\n                                value={installCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.install}\n                                onInput={handleInstallCommandInput}\n                            />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"runCommand\">Run</Label>\n                            <Input\n                                id=\"runCommand\"\n                                className=\"bg-secondary\"\n                                value={runCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.run}\n                                onInput={handleRunCommandInput}\n                            />\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"buildCommand\">Build</Label>\n                            <Input\n                                id=\"buildCommand\"\n                                className=\"bg-secondary\"\n                                value={buildCommand}\n                                type=\"text\"\n                                placeholder={DefaultSettings.COMMANDS.build}\n                                onInput={handleBuildCommandInput}\n                            />\n                        </div>\n                    </div>\n                </CollapsibleContent>\n            </Collapsible>\n\n            <p className=\"text-red-500 text-sm\">{error || ''}</p>\n        </div>\n    );\n\n    const renderFooter = () => (\n        <>\n            <Button type=\"button\" onClick={goBack} variant=\"ghost\">\n                Back\n            </Button>\n            <Button\n                disabled={\n                    !projectData.url ||\n                    projectData.url.length === 0 ||\n                    !projectData.commands?.run ||\n                    projectData.commands?.run.length === 0 ||\n                    !projectData.commands?.build ||\n                    projectData.commands?.build.length === 0\n                }\n                type=\"button\"\n                onClick={handleNext}\n                variant=\"outline\"\n            >\n                {'Next'}\n            </Button>\n        </>\n    );\n\n    switch (variant) {\n        case 'header':\n            return renderHeader();\n        case 'content':\n            return renderContent();\n        case 'footer':\n            return renderFooter();\n    }\n};\n\nLoadSetUrl.Header = (props) => <LoadSetUrl props={props} variant=\"header\" />;\nLoadSetUrl.Content = (props) => <LoadSetUrl props={props} variant=\"content\" />;\nLoadSetUrl.Footer = (props) => <LoadSetUrl props={props} variant=\"footer\" />;\nLoadSetUrl.Header.displayName = 'LoadSetUrl.Header';\nLoadSetUrl.Content.displayName = 'LoadSetUrl.Content';\nLoadSetUrl.Footer.displayName = 'LoadSetUrl.Footer';\n\nexport { LoadSetUrl };\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/Load/Warning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/Name.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/SelectFolder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/New/Setup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/stepContents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Create/withStepProps.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/NoProjectsScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/Carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/EditAppButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/Info.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/ProjectSettingsButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/Select/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/ProjectsTab/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/CreateError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/CreateLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/PromptingCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":258,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":258,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useProjectsManager } from '@/components/Context';\nimport { ProjectTabs } from '@/lib/projects';\nimport { compressImage } from '@/lib/utils';\nimport { MessageContextType, type ImageMessageContext } from '@onlook/models/chat';\nimport { Button } from '@onlook/ui/button';\nimport { CardContent, CardHeader } from '@onlook/ui/card';\nimport { Icons } from '@onlook/ui/icons';\nimport { MotionCard } from '@onlook/ui/motion-card';\nimport { Textarea } from '@onlook/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipPortal, TooltipTrigger } from '@onlook/ui/tooltip';\nimport { cn } from '@onlook/ui/utils';\nimport { AnimatePresence, motion, MotionConfig } from 'motion/react';\nimport { useEffect, useRef, useState } from 'react';\nimport useResizeObserver from 'use-resize-observer';\nimport { DraftImagePill } from '../../editor/EditPanel/ChatTab/ContextPills/DraftingImagePill';\n\nexport const PromptingCard = () => {\n    const projectsManager = useProjectsManager();\n    const { ref: diffRef, height: diffHeight } = useResizeObserver();\n    const [inputValue, setInputValue] = useState('');\n    const [isDragging, setIsDragging] = useState(false);\n    const [selectedImages, setSelectedImages] = useState<ImageMessageContext[]>([]);\n    const [imageTooltipOpen, setImageTooltipOpen] = useState(false);\n    const [isHandlingFile, setIsHandlingFile] = useState(false);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    const isInputInvalid = !inputValue || inputValue.trim().length < 10;\n    const [isComposing, setIsComposing] = useState(false);\n    const imageRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        const handleEscapeKey = (e: KeyboardEvent) => {\n            if (e.key === 'Escape') {\n                projectsManager.projectsTab = ProjectTabs.PROJECTS;\n            }\n        };\n\n        window.addEventListener('keydown', handleEscapeKey);\n        return () => window.removeEventListener('keydown', handleEscapeKey);\n    }, []);\n\n    const handleSubmit = async () => {\n        if (isInputInvalid) {\n            console.warn('Input is too short');\n            return;\n        }\n        projectsManager.create.sendPrompt(inputValue, selectedImages, false);\n    };\n\n    const handleBlankSubmit = async () => {\n        projectsManager.create.sendPrompt('', [], true);\n    };\n\n    const handleDragOver = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(true);\n    };\n\n    const handleDragLeave = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(false);\n    };\n\n    const handleDrop = (e: React.DragEvent) => {\n        e.preventDefault();\n        setIsDragging(false);\n        setImageTooltipOpen(false);\n        // Find and reset the container's data attribute\n        const container = e.currentTarget.closest('.bg-background-secondary');\n        if (container) {\n            container.setAttribute('data-dragging-image', 'false');\n        }\n        const files = Array.from(e.dataTransfer.files);\n        handleNewImageFiles(files);\n    };\n\n    const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIsHandlingFile(true);\n        setImageTooltipOpen(false);\n        const files = Array.from(e.target.files || []);\n        handleNewImageFiles(files);\n    };\n\n    const handleNewImageFiles = async (files: File[]) => {\n        const imageFiles = files.filter((file) => file.type.startsWith('image/'));\n\n        const imageContexts: ImageMessageContext[] = [];\n        if (imageFiles.length > 0) {\n            // Handle the dropped image files\n            for (const file of imageFiles) {\n                const imageContext = await createImageMessageContext(file);\n                if (imageContext) {\n                    imageContexts.push(imageContext);\n                }\n            }\n        }\n        setSelectedImages([...selectedImages, ...imageContexts]);\n        setIsHandlingFile(false);\n    };\n\n    const handleRemoveImage = (imageContext: ImageMessageContext) => {\n        if (imageRef && imageRef.current) {\n            imageRef.current.value = '';\n        }\n        setSelectedImages(selectedImages.filter((f) => f !== imageContext));\n    };\n\n    const createImageMessageContext = async (file: File): Promise<ImageMessageContext | null> => {\n        try {\n            const compressedImage = await compressImage(file);\n\n            // If compression failed, fall back to original file\n            const base64 =\n                compressedImage ||\n                (await new Promise<string>((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.onloadend = () => {\n                        resolve(reader.result as string);\n                    };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(file);\n                }));\n\n            return {\n                type: MessageContextType.IMAGE,\n                content: base64,\n                displayName: file.name,\n                mimeType: file.type,\n            };\n        } catch (error) {\n            console.error('Error reading file:', error);\n            return null;\n        }\n    };\n\n    const handleDragStateChange = (isDragging: boolean, e: React.DragEvent) => {\n        const hasImage =\n            e.dataTransfer.types.length > 0 &&\n            Array.from(e.dataTransfer.items).some(\n                (item) =>\n                    item.type.startsWith('image/') ||\n                    (item.type === 'Files' && e.dataTransfer.types.includes('public.file-url')),\n            );\n        if (hasImage) {\n            setIsDragging(isDragging);\n            // Find the container div with the bg-background-secondary class\n            const container = e.currentTarget.closest('.bg-background-secondary');\n            if (container) {\n                container.setAttribute('data-dragging-image', isDragging.toString());\n            }\n        }\n    };\n\n    const handleContainerClick = (e: React.MouseEvent) => {\n        // Don't focus if clicking on a button, pill, or the textarea itself\n        if (\n            e.target instanceof Element &&\n            (e.target.closest('button') ||\n                e.target.closest('.group') || // Pills have 'group' class\n                e.target === textareaRef.current)\n        ) {\n            return;\n        }\n\n        textareaRef.current?.focus();\n    };\n\n    const adjustTextareaHeight = () => {\n        if (textareaRef.current) {\n            // Reset height to auto to get the correct scrollHeight\n            textareaRef.current.style.height = 'auto';\n\n            const lineHeight = 20; // Approximate line height in pixels\n            const maxHeight = lineHeight * 10; // 10 lines maximum\n\n            const newHeight = Math.min(textareaRef.current.scrollHeight, maxHeight);\n            textareaRef.current.style.height = `${newHeight}px`;\n        }\n    };\n\n    return (\n        <MotionConfig transition={{ duration: 0.5, type: 'spring', bounce: 0 }}>\n            <div className=\"flex flex-col gap-4 mb-12\">\n                <MotionCard\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ height: diffHeight, opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: 20 }}\n                    className={cn(\n                        'w-[600px] backdrop-blur-md bg-background/30 overflow-hidden',\n                        isDragging && 'bg-background',\n                    )}\n                >\n                    <motion.div ref={diffRef} layout=\"position\" className=\"flex flex-col\">\n                        <CardHeader>\n                            <motion.h2\n                                initial={{ opacity: 0, y: 20 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                className=\"text-2xl text-foreground-primary\"\n                            >\n                                What kind of website do you want to make?\n                            </motion.h2>\n                            <motion.p\n                                initial={{ opacity: 0, y: 20 }}\n                                animate={{ opacity: 1, y: 0 }}\n                                transition={{ delay: 0.1 }}\n                                className=\"text-sm text-foreground-secondary\"\n                            >\n                                Tell us a bit about your project. Be as detailed as possible.\n                            </motion.p>\n                        </CardHeader>\n                        <CardContent>\n                            <div\n                                className={cn(\n                                    'flex flex-col gap-3 rounded p-0 transition-colors duration-200 cursor-text',\n                                    'backdrop-blur-sm bg-background-secondary/80',\n                                    '[&[data-dragging-image=true]]:bg-teal-500/40',\n                                    isDragging && 'bg-teal-500/40 cursor-copy',\n                                )}\n                                onClick={handleContainerClick}\n                                onDragOver={handleDragOver}\n                                onDragLeave={handleDragLeave}\n                                onDrop={handleDrop}\n                            >\n                                <div\n                                    className={`flex flex-col w-full ${selectedImages.length > 0 ? 'p-4' : 'px-4 pt-1'}`}\n                                >\n                                    <div\n                                        className={cn(\n                                            'flex flex-row flex-wrap w-full gap-1.5 text-micro text-foreground-secondary',\n                                            selectedImages.length > 0 ? 'min-h-6' : 'h-0',\n                                        )}\n                                    >\n                                        <AnimatePresence mode=\"popLayout\">\n                                            {selectedImages.map((imageContext, index) => (\n                                                <DraftImagePill\n                                                    key={`image-${index}-${imageContext.content}`}\n                                                    context={imageContext}\n                                                    onRemove={() => handleRemoveImage(imageContext)}\n                                                />\n                                            ))}\n                                        </AnimatePresence>\n                                    </div>\n                                    <Textarea\n                                        ref={textareaRef}\n                                        className={cn(\n                                            'mt-2 overflow-auto min-h-[60px] text-small p-0 border-0 shadow-none rounded-none caret-[#FA003C]',\n                                            'selection:bg-[#FA003C]/30 selection:text-[#FA003C] text-foreground-primary',\n                                            'placeholder:text-foreground-primary/50',\n                                            'cursor-text',\n                                            'transition-[height] duration-300 ease-in-out',\n                                        )}\n                                        placeholder=\"Paste a reference screenshot, write a novel, get creative...\"\n                                        value={inputValue}\n                                        onChange={(e) => {\n                                            setInputValue(e.target.value);\n                                            adjustTextareaHeight();\n                                        }}\n                                        onCompositionStart={() => setIsComposing(true)}\n                                        onCompositionEnd={(e) => {\n                                            setIsComposing(false);\n                                        }}\n                                        onKeyDown={(e) => {\n                                            if (e.key === 'Enter' && !e.shiftKey && !isComposing) {\n                                                e.preventDefault();\n                                                handleSubmit();\n                                            }\n                                        }}\n                                        onDragEnter={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            handleDragStateChange(true, e);\n                                        }}\n                                        onDragOver={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            handleDragStateChange(true, e);\n                                        }}\n                                        onDragLeave={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            if (\n                                                !e.currentTarget.contains(e.relatedTarget as Node)\n                                            ) {\n                                                handleDragStateChange(false, e);\n                                            }\n                                        }}\n                                        onDrop={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            handleDragStateChange(false, e);\n                                            handleDrop(e);\n                                        }}\n                                        rows={3}\n                                        style={{ resize: 'none' }}\n                                    />\n                                </div>\n                                <div className=\"flex flex-row w-full justify-between pt-0 pb-2 px-2\">\n                                    <div className=\"flex flex-row justify-start gap-1.5\">\n                                        <Tooltip\n                                            open={imageTooltipOpen && !isHandlingFile}\n                                            onOpenChange={(open) =>\n                                                !isHandlingFile && setImageTooltipOpen(open)\n                                            }\n                                        >\n                                            <TooltipTrigger asChild>\n                                                <Button\n                                                    variant=\"ghost\"\n                                                    size=\"icon\"\n                                                    className=\"w-9 h-9 text-foreground-tertiary group hover:bg-transparent\"\n                                                    onClick={() =>\n                                                        document\n                                                            .getElementById('image-input')\n                                                            ?.click()\n                                                    }\n                                                >\n                                                    <input\n                                                        id=\"image-input\"\n                                                        type=\"file\"\n                                                        ref={imageRef}\n                                                        accept=\"image/*\"\n                                                        multiple\n                                                        className=\"hidden\"\n                                                        onChange={handleFileSelect}\n                                                    />\n                                                    <Icons.Image\n                                                        className={cn(\n                                                            'w-5 h-5',\n                                                            'group-hover:text-foreground',\n                                                        )}\n                                                    />\n                                                </Button>\n                                            </TooltipTrigger>\n                                            <TooltipPortal>\n                                                <TooltipContent side=\"top\" sideOffset={5}>\n                                                    Upload Image Reference\n                                                </TooltipContent>\n                                            </TooltipPortal>\n                                        </Tooltip>\n                                        <Button\n                                            variant=\"outline\"\n                                            className=\"w-fit h-fit py-0.5 px-2.5 text-foreground-tertiary hidden\"\n                                        >\n                                            <Icons.FilePlus className=\"mr-2\" />\n                                            <span className=\"text-smallPlus\">File Reference</span>\n                                        </Button>\n                                    </div>\n                                    <Tooltip>\n                                        <TooltipTrigger asChild>\n                                            <Button\n                                                size=\"icon\"\n                                                variant=\"secondary\"\n                                                className={cn(\n                                                    'text-smallPlus w-fit h-full py-2 px-2',\n                                                    isInputInvalid\n                                                        ? 'text-primary'\n                                                        : 'bg-foreground-primary text-white hover:bg-foreground-hover',\n                                                )}\n                                                disabled={isInputInvalid}\n                                                onClick={handleSubmit}\n                                            >\n                                                <Icons.ArrowRight\n                                                    className={cn(\n                                                        'w-5 h-5',\n                                                        !isInputInvalid\n                                                            ? 'text-background'\n                                                            : 'text-foreground-primary',\n                                                    )}\n                                                />\n                                            </Button>\n                                        </TooltipTrigger>\n                                        <TooltipPortal>\n                                            <TooltipContent>\n                                                Start building your site\n                                            </TooltipContent>\n                                        </TooltipPortal>\n                                    </Tooltip>\n                                </div>\n                            </div>\n                        </CardContent>\n                    </motion.div>\n                </MotionCard>\n                <Button\n                    variant=\"outline\"\n                    className=\"w-fit mx-auto bg-background-secondary/90 text-sm border text-foreground-secondary\"\n                    onClick={handleBlankSubmit}\n                >\n                    <Icons.File className=\"w-4 h-4 mr-2\" /> Start from a blank page\n                </Button>\n            </div>\n        </MotionConfig>\n    );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/PromptCreation/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/TopBar/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editorEngine' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuthManager, useEditorEngine, useProjectsManager } from '@/components/Context';\nimport UserProfileDropdown from '@/components/ui/UserProfileDropdown';\nimport { ProjectTabs } from '@/lib/projects';\nimport { Button } from '@onlook/ui/button';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@onlook/ui/dropdown-menu';\nimport { Icons } from '@onlook/ui/icons';\nimport { cn } from '@onlook/ui/utils';\nimport { observer } from 'mobx-react-lite';\n\nexport const TopBar = observer(() => {\n    const editorEngine = useEditorEngine();\n    const projectsManager = useProjectsManager();\n    const authManager = useAuthManager();\n\n    function signOut() {\n        authManager.signOut();\n    }\n\n    function openPromptCreation() {\n        projectsManager.projectsTab = ProjectTabs.PROMPT_CREATE;\n    }\n\n    function openImportProject() {\n        projectsManager.projectsTab = ProjectTabs.IMPORT_PROJECT;\n    }\n\n    return (\n        <div className=\"flex flex-row h-12 px-12 items-center\">\n            <div className=\"flex-1 flex items-center justify-start mt-3\">\n                <Icons.OnlookTextLogo className=\"w-24\" viewBox=\"0 0 139 17\" />\n            </div>\n            <div className=\"flex-1 flex justify-end space-x-2 mt-4 items-center\">\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            className=\"text-sm text-foreground-onlook focus:outline-none\"\n                            variant=\"ghost\"\n                        >\n                            <Icons.Plus className=\"w-5 h-5 mr-2\" />\n                            New Project\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                        <DropdownMenuItem\n                            className={cn(\n                                'focus:bg-blue-100 focus:text-blue-900',\n                                'hover:bg-blue-100 hover:text-blue-900',\n                                'dark:focus:bg-blue-900 dark:focus:text-blue-100',\n                                'dark:hover:bg-blue-900 dark:hover:text-blue-100',\n                            )}\n                            onSelect={openPromptCreation}\n                        >\n                            <Icons.FilePlus className=\"w-4 h-4 mr-2\" />\n                            Start from scratch\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                            className={cn(\n                                'focus:bg-teal-100 focus:text-teal-900',\n                                'hover:bg-teal-100 hover:text-teal-900',\n                                'dark:focus:bg-teal-900 dark:focus:text-teal-100',\n                                'dark:hover:bg-teal-900 dark:hover:text-teal-100',\n                            )}\n                            onSelect={openImportProject}\n                        >\n                            <Icons.Download className=\"w-4 h-4 mr-2\" />\n                            Import existing project\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n                <UserProfileDropdown>\n                    <DropdownMenuItem disabled={!authManager.isAuthEnabled} onSelect={signOut}>\n                        <Icons.Exit className=\"w-4 h-4 mr-2\" />\n                        Sign out\n                    </DropdownMenuItem>\n                </UserProfileDropdown>\n            </div>\n        </div>\n    );\n});\n\nexport default TopBar;\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":66,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { invokeMainChannel, platformSlash } from '@/lib/utils';\nimport { MainChannels } from '@onlook/models/constants';\nimport { capitalizeFirstLetter } from '/common/helpers';\n\nexport enum CreateMethod {\n    LOAD = 'load',\n    NEW = 'new',\n}\n\nexport const PLACEHOLDER_NAMES = [\n    'The greatest app in the world',\n    'My epic project',\n    'The greatest project ever',\n    'A revolutionary idea',\n    'Project X',\n    'Genius React App',\n    'The next billion dollar idea',\n    'Mind-blowingly cool app',\n    'Earth-shatteringly great app',\n    'Moonshot project',\n];\n\nexport const SETTINGS_MESSAGE = [\n    'Set some dials and knobs and stuff',\n    'Fine-tune how you want to build',\n    'Swap out your default code editor if you dare',\n    \"You shouldn't be worried about this stuff, yet here you are\",\n    'Mostly a formality',\n    \"What's this button do?\",\n    'Customize how you want to build',\n    'Thanks for stopping by the Settings page',\n    'This is where the good stuff is',\n    'Open 24 hours, 7 days a week',\n    '*beep boop*',\n    \"Welcome. We've been expecting you.\",\n];\n\nexport function getRandomPlaceholder() {\n    return PLACEHOLDER_NAMES[Math.floor(Math.random() * PLACEHOLDER_NAMES.length)];\n}\n\nexport function getRandomSettingsMessage() {\n    return SETTINGS_MESSAGE[Math.floor(Math.random() * SETTINGS_MESSAGE.length)];\n}\n\nexport async function getPreviewImage(filename: string): Promise<string | null> {\n    const base64Img = (await invokeMainChannel(MainChannels.GET_IMAGE, filename)) as string | null;\n    if (!base64Img) {\n        return null;\n    }\n    return base64Img;\n}\n\nconst STEP_MAP = {\n    [CreateMethod.LOAD]: ['Select folder', 'Verify project', 'Name project', 'Set URL'],\n    [CreateMethod.NEW]: ['Name project', 'Select folder', 'Install project', 'Run project'],\n};\n\nexport function getStepName(method: CreateMethod | null, step: number): string {\n    try {\n        if (!method) {\n            return 'Unknown Method';\n        }\n\n        return STEP_MAP?.[method]?.[step];\n    } catch (e) {\n        return 'Unknown Step';\n    }\n}\n\nexport function getNameFromPath(path: string): string {\n    const parts = path.split(/[/\\\\]/);\n    const name = parts.pop() || '';\n    return capitalizeFirstLetter(name);\n}\n\nexport function getFolderNameAndTargetPath(fullPath: string): { name: string; path: string } {\n    const pathParts = fullPath.split(/[/\\\\]/);\n    const newFolderName = pathParts[pathParts.length - 1] || '';\n    const pathToFolders = pathParts.slice(0, -1).join(platformSlash);\n    return { name: newFolderName, path: pathToFolders };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/projects/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/src/routes/signin/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/binary.test.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":1,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":1,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-nocheck\nimport { describe, expect, test } from 'bun:test';\nimport { isBinary, isText } from 'istextorbinary';\n\ndescribe('istextorbinary', () => {\n    test('should identify text files', () => {\n        expect(isText('test.txt')).toBe(true);\n        expect(isText('test.js')).toBe(true);\n        expect(isText('test.html')).toBe(true);\n        expect(isText('test.css')).toBe(true);\n    });\n\n    test('should identify binary files', () => {\n        expect(isBinary('test.png')).toBe(true);\n        expect(isBinary('test.jpg')).toBe(true);\n        expect(isBinary('test.pdf')).toBe(true);\n    });\n\n    test('should identify text content', () => {\n        const textContent = Buffer.from('Hello, world!');\n        expect(isText(null, textContent)).toBe(true);\n    });\n\n    test('should identify binary content', () => {\n        // Create a small binary buffer with some non-text bytes\n        const binaryContent = Buffer.from([0xff, 0x00, 0x00, 0xff]);\n        expect(isBinary(null, binaryContent)).toBe(true);\n    });\n\n    test('should handle both filename and content together', () => {\n        const textContent = Buffer.from('Hello, world!');\n        const binaryContent = Buffer.from([0xff, 0x00, 0x00, 0xff]);\n\n        // Test text file with text content\n        expect(isText('test.txt', textContent)).toBe(true);\n\n        // Test binary file with binary content\n        expect(isBinary('test.png', binaryContent)).toBe(true);\n\n        // Test binary file with text content\n        expect(isBinary('test.png', textContent)).toBe(true);\n\n        // Test text file with binary content\n        expect(isText('test.txt', binaryContent)).toBe(true);\n    });\n});\n","usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/bun.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/gitignore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/tests/styles.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/ubuntu/repos/onlook/apps/studio/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
[36mâ””â”€[0m [31mExited with code 1[0m
[?2026l